#line 2 ".\\Base\\Scanner.cpp"
#include "StdH.h"

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.81 95/03/20 14:02:24 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
//#ifdef c_plusplus
//#ifndef __cplusplus
//#define __cplusplus
//#endif
//#endif

#if 1 //def __cplusplus

  #include <stdlib.h>

  /* Use prototypes in function declarations. */
  #define YY_USE_PROTOS

  /* The "const" storage-class-modifier is valid. */
  #define YY_USE_CONST

#else	/* ! __cplusplus */

  #if __STDC__

    #define YY_USE_PROTOS
    #define YY_USE_CONST

  #endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1; 	/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.	A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( const char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( const char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#ifdef VMS
#ifndef __VMS_POSIX
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
#else
FILE *yyin = stdin, *yyout = stdout;
#endif
#else
FILE *yyin = stdin, *yyout = stdout;
#endif
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
//static
 void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, const char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 54
#define YY_END_OF_BUFFER 55
static const short int yy_accept[181] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        9,    9,   55,   53,   51,   52,   33,   53,   53,   33,
       33,   53,   33,   34,   34,   33,   33,   33,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       42,   33,   43,   49,   49,   46,   44,   45,    4,    4,
       52,    2,    8,    8,   52,    6,    9,    9,   10,   53,
       10,    9,   51,   28,    0,   38,    0,   41,   31,    0,
        0,   47,    0,   36,   34,    0,    0,   30,   25,   27,
       26,   29,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   22,   40,   40,   40,   40,   40,   40,   32,   48,

        0,    3,    0,    2,    0,    7,    0,    6,    9,    9,
        9,    0,    9,    0,   38,   41,   39,   39,    0,   50,
       36,   36,    0,   37,   35,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   19,   40,   40,    9,
       37,   40,   40,   40,   40,   40,   23,   40,   21,   40,
       40,   20,   16,   14,   40,   11,   12,   15,   40,    0,
       40,   40,   40,   40,   40,    5,    0,   24,   18,   40,
       40,   40,   24,    1,   40,   13,   40,   40,   17,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   33,   34,   33,   33,   35,   33,   36,   37,   33,
       33,   33,   38,   39,   33,   33,   33,   40,   33,   33,
       41,   42,   43,   44,   33,    1,   28,   28,   45,   46,

       47,   48,   49,   50,   51,   33,   33,   52,   33,   53,
       54,   55,   33,   56,   57,   58,   59,   60,   33,   61,
       33,   33,   62,   63,   64,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[66] =
    {   0,
        1,    1,    2,    2,    1,    2,    1,    1,    1,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        1,    2,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    1,    1,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1,    1,    1
    } ;

static const short int yy_base[197] =
    {   0,
        0,    0,   63,   64,   65,   66,   68,   76,   81,   86,
       91,   96,  357,  358,   71,  358,  332,   75,    0,  358,
      346,  312,   73,   84,   88,   86,  329,   87,    0,  313,
      316,  314,  295,  301,   62,  300,   68,   78,  289,  291,
      358,  281,  358,  358,  325,  358,  358,  358,  336,  118,
      335,  358,  334,  135,  333,  358,  296,  138,  358,  120,
      358,  102,  144,  358,  130,  358,  137,    0,  358,  327,
      326,  358,  332,  134,  130,  144,    0,  358,  358,  358,
      358,  358,    0,  296,  296,  302,  278,  285,  272,  270,
      275,    0,  281,  269,  267,  276,  275,  270,  358,  358,

      314,  358,  153,  358,  313,  358,  165,  358,  276,  147,
      166,  146,  358,  150,  167,    0,  358,  307,  313,  358,
      155,  358,  164,  174,    0,  257,  266,  242,  174,  176,
      182,  181,  172,  174,  167,  165,    0,  165,  174,  170,
      358,  163,  179,  177,  158,  169,  174,  158,    0,  154,
      160,    0,    0,    0,  159,    0,    0,    0,  160,  181,
      157,  151,  155,  143,  146,    0,  150,    0,    0,  150,
      138,  146,  358,    0,  144,    0,  137,   38,    0,  358,
      232,  238,  244,  250,  256,  262,  264,  270,  273,  279,
      285,  291,  297,  300,  306,  309

    } ;

static const short int yy_def[197] =
    {   0,
      180,    1,  181,  181,  182,  182,  183,  183,  184,  184,
      185,  185,  180,  180,  180,  180,  180,  186,  187,  180,
      180,  188,  180,  180,  180,  180,  180,  180,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      180,  180,  180,  180,  180,  180,  180,  180,  190,  190,
      190,  180,  191,  191,  191,  180,  192,  192,  180,  193,
      180,  192,  180,  180,  186,  180,  186,  194,  180,  180,
      180,  180,  195,  180,  180,  180,  196,  180,  180,  180,
      180,  180,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  180,  180,

      190,  180,  190,  180,  191,  180,  191,  180,  192,  192,
      192,  193,  180,  193,  186,  194,  180,  180,  195,  180,
      180,  180,  180,  180,  196,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  193,
      180,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  180,
      189,  189,  189,  189,  189,  189,  180,  189,  189,  189,
      189,  189,  180,  189,  189,  189,  189,  189,  189,    0,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180

    } ;

static const short int yy_nxt[424] =
    {   0,
       14,   15,   16,   15,   17,   18,   19,   20,   21,   22,
       20,   20,   20,   20,   20,   20,   20,   23,   24,   25,
       20,   20,   26,   27,   28,   20,   29,   29,   30,   29,
       29,   31,   29,   32,   29,   29,   29,   29,   29,   29,
       20,   14,   20,   20,   33,   34,   35,   29,   29,   36,
       37,   29,   29,   29,   38,   29,   29,   29,   39,   40,
       29,   41,   42,   43,   20,   16,   16,   16,   16,   50,
       51,   50,   63,   52,   63,   45,   45,   50,   51,   50,
       66,   52,   54,   55,   54,   72,   56,   54,   55,   54,
       73,   56,   58,   59,   15,  179,   60,   58,   59,   15,

       74,   60,   75,   75,   74,  109,   75,   75,   78,   79,
       81,   82,   61,   89,   76,   92,   67,   61,   76,  103,
       93,  103,   90,  104,   94,  113,   47,   47,   48,   48,
       76,   95,   62,   96,   76,   66,  107,   62,  107,  111,
      108,   63,  115,  110,   77,   63,   74,   63,   75,   75,
      109,  113,  121,  121,  103,  140,  103,  123,  104,  123,
       76,  114,  124,  124,   76,  122,  107,  111,  107,   63,
      108,   67,   66,  121,  121,  113,   76,  160,   67,  110,
       76,  122,  124,  124,  160,   76,  122,  114,  110,  178,
      177,  114,  124,  124,  176,  175,  174,  173,  172,  171,

      170,   76,  122,  169,  168,  141,  166,  110,   67,  165,
      164,  114,  163,  162,  159,  158,  157,  156,  155,  154,
      153,  141,  152,  151,  161,  150,  149,  148,  147,  146,
      145,  167,   44,   44,   44,   44,   44,   44,   46,   46,
       46,   46,   46,   46,   49,   49,   49,   49,   49,   49,
       53,   53,   53,   53,   53,   53,   57,   57,   57,   57,
       57,   57,   65,   65,   65,   65,   65,   65,   68,   68,
       70,   70,  144,   70,   70,   70,   83,   83,   83,  101,
      101,  101,  101,  101,  101,  105,  105,  105,  105,  105,
      105,  109,  143,  109,  109,  109,  109,  112,  112,  112,

      112,  112,  112,  116,  116,  116,  119,  119,  119,  119,
      119,  119,  125,  125,  142,  120,  117,  110,  106,  102,
      139,  138,  137,  136,  135,  134,  133,  132,  131,  130,
      129,  128,  127,  126,  120,  118,  117,  110,  106,  106,
      102,  102,  100,   99,   98,   97,   91,   88,   87,   86,
       85,   84,   80,   71,   69,   64,  180,   13,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180
    } ;

static const short int yy_chk[424] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    6,    7,
        7,    7,   15,    7,   15,    3,    4,    8,    8,    8,
       18,    8,    9,    9,    9,   23,    9,   10,   10,   10,
       23,   10,   11,   11,   11,  178,   11,   12,   12,   12,

       24,   12,   24,   24,   25,   62,   25,   25,   26,   26,
       28,   28,   11,   35,   24,   37,   18,   12,   25,   50,
       37,   50,   35,   50,   38,   60,    5,    6,    5,    6,
       24,   38,   11,   38,   25,   65,   54,   12,   54,   58,
       54,   58,   67,   62,   24,   63,   75,   63,   75,   75,
      110,  112,   74,   74,  103,  114,  103,   76,  103,   76,
       75,   60,   76,   76,   74,   74,  107,  111,  107,  111,
      107,   65,  115,  121,  121,  140,   75,  147,   67,   58,
       74,   74,  123,  123,  160,  121,  121,  112,  110,  177,
      175,  114,  124,  124,  172,  171,  170,  167,  165,  164,

      163,  121,  121,  162,  161,  124,  159,  111,  115,  155,
      151,  140,  150,  148,  146,  145,  144,  143,  142,  139,
      138,  124,  136,  135,  147,  134,  133,  132,  131,  130,
      129,  160,  181,  181,  181,  181,  181,  181,  182,  182,
      182,  182,  182,  182,  183,  183,  183,  183,  183,  183,
      184,  184,  184,  184,  184,  184,  185,  185,  185,  185,
      185,  185,  186,  186,  186,  186,  186,  186,  187,  187,
      188,  188,  128,  188,  188,  188,  189,  189,  189,  190,
      190,  190,  190,  190,  190,  191,  191,  191,  191,  191,
      191,  192,  127,  192,  192,  192,  192,  193,  193,  193,

      193,  193,  193,  194,  194,  194,  195,  195,  195,  195,
      195,  195,  196,  196,  126,  119,  118,  109,  105,  101,
       98,   97,   96,   95,   94,   93,   91,   90,   89,   88,
       87,   86,   85,   84,   73,   71,   70,   57,   55,   53,
       51,   49,   45,   42,   40,   39,   36,   34,   33,   32,
       31,   30,   27,   22,   21,   17,   13,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 ".\\Base\\Scanner.l"
#define INITIAL 0
#line 2 ".\\Base\\Scanner.l"
#include "ParsingSymbols.h"
#include "Parser.h"

#include <Engine/Base/FileName.h>
#include <Engine/Base/CTString.h>
#include <Engine/Base/CTString.inl>
#include <Engine/Base/Shell.h>
#include <Engine/Base/Console.h>

#include <Engine/Templates/DynamicStackArray.cpp>

#define YY_DECL int yylex (YYSTYPE *lvalp)
#define yylval (*lvalp)

int yywrap(void)
{
	// no more bufers
	return 1;
};

static int _iBlockDepth = 0;
static int _iDummyDepth = 0;
static CTString _strCmd = ""; // currently parsed command
static int _ctCmdParam = 1; // current parameter index
static BOOL _bCmdParamCountErrorReported = FALSE;

void TranscriptEsc(CTString &str)
{
	char *pchSrc = (char *)(const char *)str;
	char *pchDst = (char *)(const char *)str;
	// if quoted
	if (pchDst[0] == '"') {
		int len = strlen(pchDst);
		pchDst[len-1] = 0;
		memmove(pchDst, pchDst+1, len-1);
	}
	for (;;pchSrc++, pchDst++) {
		if (*pchSrc==0) {
			break;
		}
		if (*pchSrc!='\\') {
			*pchDst = *pchSrc;
			continue;
		}
		pchSrc++;
		switch(*pchSrc) {
		case 'n': *pchDst = 10; break;
		case 'r': *pchDst = 13; break;
		default: *pchDst = *pchSrc; break;
		}
	}
	*pchDst=0;
}

#define COMMENT 1

#define DUMMYBLOCK 2

#define INCLUDE 3

#define DECODE 4

#define COMMAND 5

#line 618 ".\\Base\\Scanner.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 76 ".\\Base\\Scanner.l"


 /*\0 yyterminate();*/

 /* Include file parsing. */
#line 747 ".\\Base\\Scanner.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 181 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 358 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 81 ".\\Base\\Scanner.l"
BEGIN(INCLUDE);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 ".\\Base\\Scanner.l"
/* eat the whitespace until first quote */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 ".\\Base\\Scanner.l"
{ /* get the include file name until second quote */
	if (ShellGetBufferStackDepth() >= SHELL_MAX_INCLUDE_LEVEL) {
		_pShell->ErrorF("Script files nested too deeply");
	}
	char strFileName[256];
	strcpy(strFileName, yytext);
	strFileName[strlen(strFileName)-1] = 0;

	CTString strIncludeFile;
	try {
		strIncludeFile.Load_t(CTString(strFileName));
		ShellPushBuffer(strFileName, strIncludeFile, FALSE);

	} catch(char *strError) {
		_pShell->ErrorF("Cannot load script file '%s': %s", yytext, strError);
	}
	BEGIN(INITIAL);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 102 ".\\Base\\Scanner.l"
{  /* something unrecognized inside include statement */
	_pShell->ErrorF("Wrong syntax for include statement");
	BEGIN(INITIAL);
}
	YY_BREAK
/* Include Encoded file parsing. */
case 5:
YY_RULE_SETUP
#line 108 ".\\Base\\Scanner.l"
BEGIN(DECODE);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 110 ".\\Base\\Scanner.l"
/* eat the whitespace until first quote */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 111 ".\\Base\\Scanner.l"
{ /* get the include file name until second quote */
	if (ShellGetBufferStackDepth() >= SHELL_MAX_INCLUDE_LEVEL) {
		_pShell->ErrorF("Script files nested too deeply");
	}
	char strFileName[256];
	strcpy(strFileName, yytext);
	strFileName[strlen(strFileName)-1] = 0;

	CTString strIncludeFile;
	try {
		extern CTString OpenPersistentSymbolFile(const CTFileName &fnmPS);
		strIncludeFile = OpenPersistentSymbolFile(CTFileName(strFileName));
		ShellPushBuffer(strFileName, strIncludeFile, FALSE);

	} catch(char *strError) {
		_pShell->ErrorF("Cannot load script file '%s': %s", yytext, strError);
	}
	BEGIN(INITIAL);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 130 ".\\Base\\Scanner.l"
{  /* something unrecognized inside include statement */
	_pShell->ErrorF("Wrong syntax for decode statement");
	BEGIN(INITIAL);
}
	YY_BREAK
/* command parsing */
case 9:
YY_RULE_SETUP
#line 136 ".\\Base\\Scanner.l"
{ // for each parameter
	_ctCmdParam++;
	CTString strParam = yytext;
	TranscriptEsc(strParam);
	// insert the parameter in the command string
	CTString strParamNo = CTString(1, "%%%d", _ctCmdParam);
	if (strParam.FindSubstr(strParamNo)!=-1) {
		_pShell->ErrorF("Parameter substitution recursion detected!");
	} else {
		INDEX ctFound;
		for( ctFound=0;; ctFound++) {
			if (!_strCmd.ReplaceSubstr(strParamNo, strParam)) {
				break;
			}
		}
		// if not found and parameter count error not reported yet
		if (ctFound==0 && !_bCmdParamCountErrorReported) {
			// report error
			_bCmdParamCountErrorReported = TRUE;
			_pShell->ErrorF("Too many parameters for command expansion");
		}
	}
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 158 ".\\Base\\Scanner.l"
{ 
									// at the end of the command

	// switch to the new input buffer with that command
	ShellPushBuffer(ShellGetBufferName(), _strCmd, FALSE);
	BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DUMMYBLOCK):
case YY_STATE_EOF(INCLUDE):
case YY_STATE_EOF(DECODE):
case YY_STATE_EOF(COMMAND):
#line 166 ".\\Base\\Scanner.l"
{
	if (ShellPopBuffer()) {
		yyterminate();
	}
}
	YY_BREAK
/* special data types */
case 11:
YY_RULE_SETUP
#line 173 ".\\Base\\Scanner.l"
{ return(k_FLOAT);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 174 ".\\Base\\Scanner.l"
{ return(k_INDEX);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 175 ".\\Base\\Scanner.l"
{ return(k_CTString);}
	YY_BREAK
/* keywords */
case 14:
YY_RULE_SETUP
#line 178 ".\\Base\\Scanner.l"
{ return(k_void); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 179 ".\\Base\\Scanner.l"
{ return(k_const); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 180 ".\\Base\\Scanner.l"
{ return(k_user); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 181 ".\\Base\\Scanner.l"
{ return(k_persistent); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 182 ".\\Base\\Scanner.l"
{ return(k_extern); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 183 ".\\Base\\Scanner.l"
{ return(k_pre); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 184 ".\\Base\\Scanner.l"
{ return(k_post); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 185 ".\\Base\\Scanner.l"
{ return(k_help); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 186 ".\\Base\\Scanner.l"
{ return(k_if); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 187 ".\\Base\\Scanner.l"
{ return(k_else); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 188 ".\\Base\\Scanner.l"
{ return(k_else_if); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 190 ".\\Base\\Scanner.l"
{ return (LEQ); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 191 ".\\Base\\Scanner.l"
{ return (GEQ); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 192 ".\\Base\\Scanner.l"
{ return (EQ);  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 193 ".\\Base\\Scanner.l"
{ return (NEQ); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 195 ".\\Base\\Scanner.l"
{ return (SHR); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 196 ".\\Base\\Scanner.l"
{ return (SHL); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 198 ".\\Base\\Scanner.l"
{ return (LOGAND); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 199 ".\\Base\\Scanner.l"
{ return (LOGOR); }
	YY_BREAK
/* single character operators and punctuations */
case 33:
YY_RULE_SETUP
#line 202 ".\\Base\\Scanner.l"
{
	return(yytext[0]);}
	YY_BREAK
/* constants */
case 34:
YY_RULE_SETUP
#line 206 ".\\Base\\Scanner.l"
{ yylval.val.iIndex = atoi(yytext); return(c_int); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 207 ".\\Base\\Scanner.l"
{ yylval.val.iIndex = strtoul(yytext+2, NULL, 16); return(c_int); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 208 ".\\Base\\Scanner.l"
{ yylval.val.fFloat = (float) atof(yytext); return(c_float); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 209 ".\\Base\\Scanner.l"
{ yylval.val.fFloat = (float) atof(yytext); return(c_float); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 210 ".\\Base\\Scanner.l"
{ 
	CTString &strNew = _shell_astrTempStrings.Push();
	// remove double-quotes
	strNew = yytext;
	// parse escape symbols and remove double quotes
	TranscriptEsc(strNew);
	yylval.val.strString = (const char*)strNew;
	return(c_string); 
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 219 ".\\Base\\Scanner.l"
{ return(c_char); }
	YY_BREAK
/* identifier */
case 40:
YY_RULE_SETUP
#line 222 ".\\Base\\Scanner.l"
{ 
	// get the symbol
	yylval.pssSymbol =  _pShell->GetSymbol(yytext, FALSE);
	BOOL bCommand = FALSE;
	// if it is string
	if (_shell_ast[yylval.pssSymbol->ss_istType].st_sttType==STT_STRING) {
		// get the value
		CTString str = *(CTString*)yylval.pssSymbol->ss_pvValue;
		// if the value tells that it is a command
		if (str.RemovePrefix("!command ")) {
			// parse the command
			bCommand = TRUE;
			_strCmd = str;
			_ctCmdParam = 0;
			_bCmdParamCountErrorReported = FALSE;
			BEGIN(COMMAND);
		}
	}
	// normally, just return the identifier
	if (!bCommand) {
		return(identifier);
	}
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 245 ".\\Base\\Scanner.l"
{ // special case of identifier, used to bypass command parsing
	// get the symbol
	yylval.pssSymbol =  _pShell->GetSymbol(yytext+1, FALSE);
	return(identifier);
}
	YY_BREAK
/* eat up or execute blocks */
case 42:
YY_RULE_SETUP
#line 252 ".\\Base\\Scanner.l"
{ 
	_iBlockDepth++;
	if (!_bExecNextBlock) {
		_iDummyDepth++;
		BEGIN(DUMMYBLOCK); 
	}
	return block_beg;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 261 ".\\Base\\Scanner.l"
{ 
	_iBlockDepth--;
	if (_iBlockDepth<0) {
	 _pShell->ErrorF("Mismatched '}'");
	}
	return block_end;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 268 ".\\Base\\Scanner.l"
{
	_iBlockDepth++;
	_iDummyDepth++;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 272 ".\\Base\\Scanner.l"
{ 
	_iBlockDepth--;
	_iDummyDepth--;
	if (_iDummyDepth==0) {
		BEGIN(INITIAL); 
		return block_end;
	} 
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 280 ".\\Base\\Scanner.l"
{}
	YY_BREAK
/* eat up comments */
case 47:
YY_RULE_SETUP
#line 283 ".\\Base\\Scanner.l"
{ BEGIN(COMMENT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 284 ".\\Base\\Scanner.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 285 ".\\Base\\Scanner.l"
{}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 286 ".\\Base\\Scanner.l"
{ ShellCountOneLine(); }
	YY_BREAK
/* eat up whitespace */
case 51:
YY_RULE_SETUP
#line 290 ".\\Base\\Scanner.l"
{
}
	YY_BREAK
/* eat up linefeeds and count lines in all conditions */
case 52:
YY_RULE_SETUP
#line 293 ".\\Base\\Scanner.l"
{
	ShellCountOneLine();
}
	YY_BREAK
/* for all unrecognized characters */
case 53:
YY_RULE_SETUP
#line 298 ".\\Base\\Scanner.l"
{
	// report an error
	_pShell->ErrorF("Unrecognized character '%c' (ASCII 0x%02x)", yytext[0], yytext[0] );
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 303 ".\\Base\\Scanner.l"
ECHO;
	YY_BREAK
#line 1257 ".\\Base\\Scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.	We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 181 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 181 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 180);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifdef YY_USE_PROTOS
//static
 void yyunput( int c, register char *yy_bp )
#else
//static
 void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';     /* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#ifdef YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#ifdef YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( const char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
const char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( const char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
const char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, const char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
const char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#ifdef YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 303 ".\\Base\\Scanner.l"


