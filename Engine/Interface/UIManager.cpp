#include "stdh.h"
//#include <Engine/Interface/UIManager.h>
#include <Engine/Interface/UIInternalClasses.h>
#include <Engine/Base/Input.h>
#include <Engine/Base/KeyNames.h>
#include <Engine/GameState.h>
#include <Engine/GlobalDefinition.h>
#include <Engine/LocalDefine.h>
#include <Engine/Entities/InternalClasses.h>
#include <Engine/JobInfo.h>
#include <Engine/World/World.h>
#include <Engine/Interface/UISignBoard.h>	// ŔĚ±âČŻ Ăß°ˇ (04.12.17)
#include <Engine/Interface/UIAutoHelp.h>
#include <Engine/Interface/UIBuff.h>
#include <Engine/Interface/UISiegeWarfareDoc.h> // Date : 2005-07-15(żŔŔü 10:42:38), By Lee Ki-hwan
#include <Engine/Interface/UINotice.h>
#include <Engine/Interface/UISelectWord.h>
#include <Engine/Interface/UIPetTraining.h>
#include <Engine/Interface/UIPetTarget.h>
#include <Engine/Interface/UIPetInfo.h>
#include <Engine/Interface/UISummon.h>
#include <Engine/Interface/UISecurity.h>
#include <Engine/Interface/UIInitJob.h>
#include <Engine/Interface/UIChangeWeapon.h>
#include <Engine/Interface/UISelectResource.h>
#include <Engine/Interface/UIRanking.h>
#include <Engine/Interface/UIGamble.h>
#include <Engine/Interface/UIRemission.h>
#include <Engine/Interface/UIQuickSlot.h>
#include <Engine/Interface/UIWareHouse.h>
#include <Engine/Interface/UIExchange.h>
#include <Engine/Interface/UIPersonalShop.h>
#include <Engine/Interface/UIShop.h>
#include <Engine/Interface/UIProcessNPC.h>
#include <Engine/Interface/UISelectServer.h>
#include <Engine/Interface/UIPetTraining.h>
#include <Engine/Interface/UIPetTarget.h>
#include <Engine/Interface/UISummon.h>
#include <Engine/Interface/UISingleBattle.h>
#include <Engine/Interface/UITeleport.h>
#include <Engine/Interface/UISkillLearn.h>
#include <Engine/Interface/UICreateChar.h>
#include <Engine/Interface/UISelChar.h>
#include <Engine/Interface/UIShop.h>
#include <Engine/Interface/UINpcHelp.h>
// [KH_070419] ˝ÉÇĂ ĆËľ÷ °ü·Ă Ăß°ˇ
#include <Engine/Interface/UISimplePop.h>
#include <Engine/Effect/CMdlEffect.h>
// ttos_080116 : ¸ó˝şĹÍ ÄŢş¸
#include <Engine/Interface/UIMonsterCombo.h>
// [090709: selo] Ćę ą®ľç ˝Ă˝şĹŰ
#include <Engine/Interface/UITatoo.h>
 
CUIManager				*_pUIMgr = NULL;
CUIButtonTextureManager	*_pUIBtnTexMgr = NULL;
CUIFontTextureManager	*_pUIFontTexMgr = NULL;
CUIBuff					*_pUIBuff = NULL;
INDEX					_iNameType = 1;

extern HWND		_hwndMain;
extern INDEX	inp_iKeyboardReadingMethod;			// 0: getasynckey, 1: virtkeytrap, 2: scancodetrap
extern INDEX	_aiScanToKid[512];					// autogenerated fast conversion tables
extern INDEX	_aiVirtToKid[256];					// autogenerated fast conversion tables
extern UBYTE	_abKeysPressed[256];				// which keys are pressed, as recorded by message interception (by KIDs)
extern int		_iMouseZ;
extern INDEX	inp_bAllowMouseAcceleration;

extern INDEX	sam_bFullScreenActive;
extern INDEX	sam_iScreenSizeI;
extern INDEX	sam_iScreenSizeJ;

extern INDEX g_iCountry;
extern BOOL		_bWorldEditorApp;
extern CUIFiltering _UIFilteringCharacter;			// wooss 050812 name filtering 
extern BOOL g_bIsMalEng;
// For final consonant
#define	COMP_STRING_COUNT	399

// wooss 050817
#define	MIN_NAME_SIZE			4
#define MAX_MY_NAME_SIZE		16		// Date : 2006-05-02(żŔČÄ 1:11:46), By eons( ŔĎş»Ŕş ĂÖ´ë 8, 16ŔÚ·Î µĘ )
#define MAX_GUILD_NAME_SIZE		16 

#define RAREITEM_NAME_COLOR		0xFFD31DFF

extern ENGINE_API INDEX g_iAutoAttack;

const static char *aszCompString[COMP_STRING_COUNT][3] =
{
	"°ˇ", "°Ľ", "°Ĺ", "°Ü", "°í", "±ł", "±¸", "±Ô", "±×", "±â", "°ł", "°Â", "°Ô", "°č", "°ú", "±Ą", "±Ĺ", "±Ë", "±«", "±Í", "±á",
	"±î", "˛Ą", "˛¨", "˛¸", "˛ż", "˛Ř", "˛Ů", "˛ó", "˛ô", "ł˘", "±ú", "Ć", "˛˛", "˛ľ", "˛Ę", "˛Ď", "˛ă", "˛ç", "˛Ň", "˛î", "…Ę",
	"łŞ", "łÄ", "łĘ", "łŕ", "łë", "´˘", "´©", "´ş", "´Ŕ", "´Ď", "ł»", "†v", "ł×", "łé", "łö", "‡R", "´˛", "´´", "łú", "´µ", "´Ě",
	"´Ů", "´ô", "´ő", "µ®", "µµ", "µÍ", "µÎ", "µŕ", "µĺ", "µđ", "´ë", "Ű", "µĄ", "µł", "µÂ", "µĹ", "µÖ", "µŘ", "µÇ", "µÚ", "µď",
	"µű", "‹x", "¶°", "¶Ĺ", "¶Ç", "ŚĂ", "¶Ń", "ŤŹ", "¶ß", "¶ě", "¶§", "‹š", "¶Ľ", "‹ó", "¶Ě", "¶Î", "Śô", "¶Ř", "¶Ď", "¶Ů", "¶ç",
	"¶ó", "·Ş", "·Ż", "·Á", "·Î", "·á", "·ç", "·ů", "¸Ł", "¸®", "·ˇ", "Žm", "·ą", "·Ę", "·Ö", "ŹO", "·ď", "·ń", "·Ú", "·ň", "l",
	"¸¶", "¸Ď", "¸Ó", "¸ç", "¸đ", "ą¦", "ą«", "ąÂ", "ąÇ", "ąĚ", "¸Ĺ", "Ů", "¸Ţ", "¸ď", "¸ú", "‘Ŕ", "ąą", "ąľ", "¸ţ", "ąż", "’Ţ",
	"ąŮ", "ąň", "ąö", "ş­", "ş¸", "şĚ", "şÎ", "şä", "şę", "şń", "ąč", "“Ž", "şŁ", "ş¶", "şÁ", "şÄ", "şŰ", "şŢ", "şĆ", "şß", "•‘",
	"şü", "»˛", "»µ", "»Ŕ", "»Ç", "»Ď", "»Ń", "»Ř", "»Ú", "»ß", "»©", "•ű", "»ľ", "–§", "–Ř", "–ô", "—¨", "—Ä", "»Î", "—ŕ", "u",
	"»ç", "»ţ", "Ľ­", "ĽĹ", "ĽŇ", "Ľî", "Ľö", "˝´", "˝ş", "˝Ă", "»ő", "Ľ¨", "ĽĽ", "ĽÎ", "ĽÝ", "Ľâ", "˝¤", "˝¦", "Ľč", "˝¬", "šĂ",
	"˝Î", "›X", "˝á", "›Ç", "˝î", "ľ¤", "ľĄ", "ťo", "ľ˛", "ľľ", "˝Ř", "›y", "˝ę", "›ă", "˝÷", "˝ű", "ľ¬", "ľ®", "˝ý", "ľŻ", "ľş",
	"ľĆ", "ľß", "ľî", "ż©", "żŔ", "żä", "żě", "ŔŻ", "Ŕ¸", "ŔĚ", "ľÖ", "ľę", "żˇ", "żą", "żÍ", "żÖ", "żö", "żţ", "żÜ", "Ŕ§", "ŔÇ",
	"ŔÚ", "Ŕđ", "Ŕú", "Á®", "Á¶", "ÁŇ", "ÁÖ", "Áę", "Áî", "Áö", "Ŕç", "Ŕ÷", "Á¦", "Áµ", "ÁÂ", "ÁČ", "Áŕ", "Áâ", "ÁË", "Áă", "Łp",
	"ÂĄ", "Âą", "ÂĽ", "ÂÇ", "ÂÉ", "§c", "ÂŢ", "Âé", "Âę", "Âî", "Â°", "¤Š", "ÂĹ", "Ą™", "ÂŇ", "ÂÖ", "Âĺ", "¨R", "ÂŘ", "Âč", "©n",
	"Â÷", "Ă­", "Ăł", "ĂÄ", "ĂĘ", "ĂÝ", "Ăß", "Ăň", "Ă÷", "Äˇ", "Ă¤", "Ş‰", "ĂĽ", "ĂÇ", "ĂŇ", "¬‚", "Ăç", "Ăé", "ĂÖ", "Ăë", "ŻM",
	"Ä«", "ÄĽ", "Äż", "ÄŃ", "ÄÚ", "Äě", "Äí", "ĹĄ", "Ĺ©", "Ĺ°", "Äł", "°m", "ÄÉ", "ÄŮ", "Äâ", "Äč", "Äő", "Äů", "Äę", "Äű", "´”",
	"Ĺ¸", "ĹË", "ĹÍ", "Ĺß", "Ĺä", "Ĺô", "Ĺő", "Ć©", "Ć®", "ĆĽ", "ĹÂ", "¶O", "Ĺ×", "Ĺâ", "Ĺí", "Ĺď", "Ĺý", "Ćˇ", "Ĺđ", "Ć˘", "Ć·",
	"ĆÄ", "ĆŮ", "ĆŰ", "Ćě", "Ć÷", "ÇĄ", "ÇŞ", "Ç»", "ÇÁ", "ÇÇ", "ĆĐ", "»—", "Ćä", "Ćó", "Çˇ", "˝Ť", "Ç´", "żR", "ÇŁ", "Ç¶", "Ŕc",
	"ÇĎ", "Çá", "Çă", "Çô", "ČŁ", "Čż", "ČÄ", "ČŢ", "Čĺ", "Č÷", "ÇŘ", "Á…", "Çě", "Çý", "Č­", "Čł", "ČĚ", "ČŃ", "Č¸", "ČÖ", "Čń",
};

#define	COMP_DIGIT_COUNT	4
const static INDEX	aiCompDigit[COMP_DIGIT_COUNT] = { 2, 4, 5, 9 };
static __int64	llOldTime;

// WSS_GUILDMASTER 050717------------------------------------------------------>>
void CUIManager::DrawGuildRankBox(UIRect m_rcRect,SBYTE sbGuildRank,FLOAT fPopupZ)
{
	WRect tRect;
	tRect = m_rcRect;
	tRect +=8; 
	tRect.Left -= 2;
	tRect.Right += 2;

	switch(sbGuildRank)
	{
	case 1:
		m_bxGuildRankBox.SetBoxUV(m_ptdPopupTexture,19,WRect(76,0,123,44));	
		m_bxGuildRankBox.SetBoxPos(tRect);
		m_bxGuildRankBox.Render(0,0,0xFFFFFFFF,fPopupZ);
		break;
	case 2:
		m_bxGuildRankBox.SetBoxUV(m_ptdPopupTexture,19,WRect(128,0,175,44));	
		m_bxGuildRankBox.SetBoxPos(tRect);
		m_bxGuildRankBox.Render(0,0,0xFFFFFFFF,fPopupZ);
		break;
	case 3:
		m_bxGuildRankBox.SetBoxUV(m_ptdPopupTexture,19,WRect(180,0,227,44));	
		m_bxGuildRankBox.SetBoxPos(tRect);
		m_bxGuildRankBox.Render(0,0,0xFFFFFFFF,fPopupZ);
		break;
	}
}
// ---------------------------------------------------------------------------<<

///////////////////////////////////////////////////////////
//
// Malaysia Language Check
// 
// g_bIsMalEng : TRUE  - English
//				 FALSE - Traditional Chinese 
//
////////////////////////////////////////////////////////////
BOOL CheckMalLang()
{
	CTString FileName = _fnmApplicationPath.FileDir();
	FileName += "ln.dta";
	FILE *fp		= NULL;
	char readData; 
	if ((fp = fopen(FileName, "rt")) == NULL) 
	{
		MessageBox(NULL, "File is not Exist.", "error!", MB_OK);
		return -1;
	}
	fread(&readData, sizeof(char), 1, fp);
	if(readData =='0' ) return TRUE;
	else return FALSE;
}

// ----------------------------------------------------------------------------
// Name : CUIManager()
// Desc : Constructor
// ----------------------------------------------------------------------------
CUIManager::CUIManager()
: m_pGame ( NULL )
{

	if( !_bWorldEditorApp )
		_pInput->m_bTcpIp = TRUE;

	m_ugsGameState = UGS_NONE;
	m_umctTypeInUI = UMCT_NORMAL;
	m_pUIDrawPort = NULL;
	m_pumcMouseCursor = NULL;
	m_bShowUIs = TRUE;
	m_bRButtonDown = FALSE;
	m_bMouseInsideUIs = FALSE;
	m_pixMinI = 0;
	m_pixMinJ = 0;
	m_pixMaxI = 0;
	m_pixMaxJ = 0;
	m_ptdPopupTexture = NULL;
	m_ptBlackTexture	= NULL;
	m_dwCSF = 0;

	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		m_apUIs[iUI] = NULL;
		m_aUIOrder[iUI] = iUI;
	}
	m_nShowMessageBox = -1;
	m_bDamageState = false;
	m_nCoolTimeReductionRate =0;
	m_nNeedMPReductionRate =0;
#ifdef HELP_SYSTEM_1
	m_nHelpNpc_Index = -1;		//NPC ľČł» ˝Ă˝şĹŰ
#endif
}

// ----------------------------------------------------------------------------
// Name : ~CUIManager()
// Desc : Destructor
// ----------------------------------------------------------------------------
CUIManager::~CUIManager()
{
	Destroy();
}

// ----------------------------------------------------------------------------
// Name : Create()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::Create()
{
	// Mouse cursor
	m_pumcMouseCursor = new CUIMouseCursor;

	if( _bWorldEditorApp )
	{
		m_bShowUIs = FALSE;
		//return;	//Ĺ×˝şĆ® °ÔŔÓ ˝ÇÇŕ˝Ă UIManager¸¦ »çżëÇĎ´Â şÎşĐżˇĽ­ żˇ·Ż°ˇ ąß»ýÇŘĽ­ ±×łÉ create ÁřÇŕ˝ĂĹ´ :Su-won
	}

	// Check Malaysia Language  - wooss 060330
	if(g_iCountry==MALAYSIA || g_iCountry==HONGKONG){
		if(CheckMalLang()) g_bIsMalEng = TRUE;
		else g_bIsMalEng = FALSE;
	}
	
	// Load string data
	CTFileName	fnmStringData;
#ifdef HELP_SYSTEM_1
	CTFileName	fnmHelp1Data;
#endif
	CTString	strFullPath = _fnmApplicationPath.FileDir();
	CTString	strImmoralWordList;	// ŔĚ±âČŻ Ăß°ˇ ( 11.29 )
	CTString	strImmoralCharacter;	// Date : 2005-02-16,   By Lee Ki-hwan
	//[ttos_2009_7_17]: CHARATER_CHAT_FILTER Äł¸ŻĹÍ Ă¤ĆĂ ÇĘĹÍ
#ifdef CHARATER_CHAT_FILTER
	CTString	strChatFilter;
#endif

//[ttos_2009_7_17]: CHARATER_CHAT_FILTER Äł¸ŻĹÍ Ă¤ĆĂ ÇĘĹÍ
#ifdef CHARATER_CHAT_FILTER
	strChatFilter = strFullPath + "Data\\CharacterChatFilter.dat";
#endif

	switch( g_iCountry )
	{
	case KOREA:
		fnmStringData = strFullPath + "data\\string.dta";
		// wooss 070324 ------------------------------->><<
		// kw : WSS_HELP_SYSTEM_1
		// żěĽ± ±ął»¸¸ Áýľî łÖŔ˝...
#ifdef HELP_SYSTEM_1
		fnmHelp1Data = strFullPath + "data\\help1.dta";
#endif
		strImmoralWordList = strFullPath + "Data\\ImmoralWord.dat";	// ŔĚ±âČŻ Ăß°ˇ ( 11.29 )
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName.dat"; // Date : 2005-02-16,   By Lee Ki-hwan
		break;
	case TAIWAN:
	case TAIWAN2:
		fnmStringData = strFullPath + "data\\string_t.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_t.dat";	// ŔĚ±âČŻ Ăß°ˇ ( 11.29 )
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_t.dat"; // Date : 2005-02-16,   By Lee Ki-hwan
		break;
	case CHINA: 
		fnmStringData = strFullPath + "data\\string_c.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_c.dat";	// Date : 2005-03-04,   By Lee Ki-hwan
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_c.dat"; // Date : 2005-03-04,   By Lee Ki-hwan
		break;
	case THAILAND:
		fnmStringData = strFullPath + "data\\string_th.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_th.dat";	
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_th.dat"; // Date : 2005-09-08,   By Seo
		break;
	case JAPAN:
		fnmStringData = strFullPath + "data\\string_jp.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_jp.dat";	
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_jp.dat"; // Date : 2005-11-07 , wooss
		break;
	case MALAYSIA:
		if(g_bIsMalEng)
		{
			fnmStringData = strFullPath + "data\\string_maleng.dta";
			strImmoralWordList = strFullPath + "Data\\ImmoralWord_mal.dat";	
			strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_mal.dat"; // Date : 2005-11-07 , wooss

#ifdef HELP_SYSTEM_1
			fnmHelp1Data = strFullPath + "data\\help1_eng.dta";
#endif
		}
		else 
		{
			fnmStringData = strFullPath + "data\\string_mal.dta";
			strImmoralWordList = strFullPath + "Data\\ImmoralWord_mal.dat";	
			strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_mal.dat"; // Date : 2005-11-07 , wooss

#ifdef HELP_SYSTEM_1
			fnmHelp1Data = strFullPath + "data\\help1.dta";
#endif
		}
		break;
	case USA:
#ifdef HELP_SYSTEM_1
		fnmHelp1Data = strFullPath + "data\\help1.dta";
#endif		
		fnmStringData = strFullPath + "data\\string_usa.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_usa.dat";
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_usa.dat"; // Date : 2006-10-17 , eons
		break;
	case BRAZIL:
#ifdef HELP_SYSTEM_1
		fnmHelp1Data = strFullPath + "data\\help1.dta";
#endif
		fnmStringData = strFullPath + "data\\string_brz.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_brz.dat";
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_brz.dat"; // Date : 2006-11-02 , eons
		break;
	case HONGKONG:
		if(g_bIsMalEng){
#ifdef HELP_SYSTEM_1
			fnmHelp1Data = strFullPath + "data\\help1_eng.dta";
#endif
			fnmStringData = strFullPath + "data\\string_hkeng.dta";
			strImmoralWordList = strFullPath + "Data\\ImmoralWord_hkeng.dat";
			strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_hkeng.dat"; // Date : 2007-01-16 , eons
		}
		else {
#ifdef HELP_SYSTEM_1
			fnmHelp1Data = strFullPath + "data\\help1.dta";
#endif
			fnmStringData = strFullPath + "data\\string_hk.dta";
			strImmoralWordList = strFullPath + "Data\\ImmoralWord_hk.dat";
			strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_hk.dat"; // Date : 2007-01-16 , eons
		}
		break;
	case GERMANY:
#ifdef HELP_SYSTEM_1
		fnmHelp1Data = strFullPath + "data\\help1.dta";
#endif
		fnmStringData = strFullPath + "data\\string_ger.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_ger.dat";
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_ger.dat"; // wooss 070309 kw : WSS_GERMAN_FONT
		break;
	case SPAIN://FRANCE_SPAIN_CLOSEBETA_NA_20081124
		fnmHelp1Data = strFullPath + "data\\help1.dta";
		fnmStringData = strFullPath + "data\\string_Spa.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_Spa.dat";
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_Spa.dat";
		break;
	case FRANCE:
		fnmHelp1Data = strFullPath + "data\\help1.dta";
		fnmStringData = strFullPath + "data\\string_Fra.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_Fra.dat";
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_Fra.dat";
		break;
	case POLAND:
		fnmHelp1Data = strFullPath + "data\\help1.dta";
		fnmStringData = strFullPath + "data\\string_Pol.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_Pol.dat";
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_Pol.dat";
		break;
		
	case TURKEY:
		fnmHelp1Data = strFullPath + "data\\help1.dta";
		fnmStringData = strFullPath + "data\\string_tur.dta";
		strImmoralWordList = strFullPath + "Data\\ImmoralWord_tur.dat";
		strImmoralCharacter = strFullPath + "Data\\ImmoralCharacterName_tur.dat";
		break;

	}
	LoadStringData( fnmStringData );
#ifdef HELP_SYSTEM_1
	// wooss 070324 ------------->><<
	// kw : WSS_HELP_SYSTEM_1
	LoadHelp1Data( fnmHelp1Data );
#endif
	
	BOOL tFilter = TRUE;
	// ŔĚ±âČŻ Ăß°ˇ ( 04.11.29 )
	tFilter &= _UIFiltering.Create( strImmoralWordList.str_String );
	// Date : 2005-02-16,   By Lee Ki-hwan
	tFilter &= _UIFilteringCharacter.Create ( strImmoralCharacter.str_String );
//[ttos_2009_7_17]: CHARATER_CHAT_FILTER Äł¸ŻĹÍ Ă¤ĆĂ ÇĘĹÍ
#ifdef CHARATER_CHAT_FILTER
//	tFilter &= _UICharacterChatFilter.Create( strChatFilter.str_String, true);
	tFilter &= _UICharacterChatFilter.Create( strChatFilter.str_String);
#endif
	//---------------------------------------------------------------------->>
	// Name :
	// Desc : ÇĘĹÍ¸µ ĆÄŔĎŔĚ Á¸ŔçÇĎÁö ľĘ°ĹłŞ ČŃĽŐ µĆŔ» °ćżě °ÔŔÓ Áľ·á
	// Date : [6/27/2006] , Wooss
	//----------------------------------------------------------------------<<
	if (tFilter != FALSE)
	{
		ENGINE_API extern char *g_szExitError ;
		if(g_szExitError) delete[] g_szExitError;
		g_szExitError = new char[2048];
		strcpy(g_szExitError, CTString("ErrorCode : 626"));
		_pGameState->Running() = FALSE;
		_pGameState->QuitScreen() = FALSE;	
	}
		
	//!! ŔĚ±âČŻ Ăß°ˇ (04.12.17) : ÁöżŞ ŔĚ¸§ ÇĄ˝Ă 
	_UISignBoard = new CUISignBoard ();
	_UISignBoard->Create ( g_iCountry );

	//!! ŔĚ±âČŻ Ăß°ˇ (40.12.19) : ŔÚµż µµżň¸» ÇĄ˝Ă 
	_UIAutoHelp = new CUIAutoHelp ();
	_UIAutoHelp->Create ();

	// Buff
	_pUIBuff = new CUIBuff();
	_pUIBuff->Create();

	// Reset CInput
	if( !_bWorldEditorApp )		//żˇµđĹÍżˇĽ­´Â ľĆ·ˇ şÎşĐŔ» łÖŔ¸¸é ¸¶żě˝ş°ˇ ŔĚ»óÇĎ°Ô żňÁ÷ż©Ľ­
								//żˇµđĹÍŔĎ ¶§´Â Á¦żÜ :Su-won
	{
		_pInput->inp_bInputEnabled = TRUE;
		memset( _abKeysPressed, 0, sizeof( _abKeysPressed ) );
		//_pInput->EnableInput(_hwndMain); // ĂßČÄżˇ ¸¶żě˝ş ČĹĹ·Ŕ» ĹëÇŘĽ­ Ăł¸®
	}

	m_ptBlackTexture = _pTextureStock->Obtain_t( CTString( "Data\\Interface\\Black.tex" ) );
	m_rtBlack.SetUV( 0, 0, 512, 512, m_ptBlackTexture->GetPixWidth(), m_ptBlackTexture->GetPixWidth() );

	// Popup texture
	m_ptdPopupTexture = _pTextureStock->Obtain_t( CTString( "Data\\Interface\\NamePopup.tex" ) );
	FLOAT	fTexWidth = m_ptdPopupTexture->GetPixWidth();
	FLOAT	fTexHeight = m_ptdPopupTexture->GetPixHeight();
	m_rtNameL.SetUV( 0, 14, 2, 29, fTexWidth, fTexHeight );
	m_rtNameC.SetUV( 4, 14, 14, 29, fTexWidth, fTexHeight );
	m_rtNameR.SetUV( 30, 14, 32, 29, fTexWidth, fTexHeight );
	m_rtNameRPK.SetUV( 16, 14, 32, 29, fTexWidth, fTexHeight );
	m_rtNameRDefPK1.SetUV( 0, 30, 16, 45, fTexWidth, fTexHeight );
	m_rtNameRDefPK2.SetUV( 18, 30, 34, 45, fTexWidth, fTexHeight );
	m_rtChatLU.SetUV( 0, 0, 5, 5, fTexWidth, fTexHeight );
	m_rtChatUp.SetUV( 6, 0, 7, 5, fTexWidth, fTexHeight );
	m_rtChatRU.SetUV( 8, 0, 13, 5, fTexWidth, fTexHeight );
	m_rtChatL.SetUV( 0, 6, 5, 7, fTexWidth, fTexHeight );
	m_rtChatC.SetUV( 6, 6, 7, 7, fTexWidth, fTexHeight );
	m_rtChatR.SetUV( 8, 6, 13, 7, fTexWidth, fTexHeight );
	m_rtChatLL.SetUV( 0, 8, 5, 13, fTexWidth, fTexHeight );
	m_rtChatLo.SetUV( 6, 8, 7, 13, fTexWidth, fTexHeight );
	m_rtChatRL.SetUV( 8, 8, 13, 13, fTexWidth, fTexHeight );
	m_rtShopLU.SetUV( 15, 0, 20, 5, fTexWidth, fTexHeight );
	m_rtShopUp.SetUV( 21, 0, 22, 5, fTexWidth, fTexHeight );
	m_rtShopRU.SetUV( 23, 0, 28, 5, fTexWidth, fTexHeight );
	m_rtShopL.SetUV( 15, 6, 20, 7, fTexWidth, fTexHeight );
	m_rtShopC.SetUV( 21, 6, 22, 7, fTexWidth, fTexHeight );
	m_rtShopR.SetUV( 23, 6, 28, 7, fTexWidth, fTexHeight );
	m_rtShopLL.SetUV( 15, 8, 20, 13, fTexWidth, fTexHeight );
	m_rtShopLo.SetUV( 21, 8, 22, 13, fTexWidth, fTexHeight );
	m_rtShopRL.SetUV( 23, 8, 28, 13, fTexWidth, fTexHeight );
	m_rtShopPremLU.SetUV( 35, 0, 48, 13, fTexWidth, fTexHeight );
	m_rtShopPremUp.SetUV( 49, 0, 50, 13, fTexWidth, fTexHeight );
	m_rtShopPremRU.SetUV( 51, 0, 64, 13, fTexWidth, fTexHeight );
	m_rtShopPremL.SetUV( 35, 14, 48, 16, fTexWidth, fTexHeight );
	m_rtShopPremC.SetUV( 49, 14, 50, 16, fTexWidth, fTexHeight );
	m_rtShopPremR.SetUV( 51, 14, 64, 16, fTexWidth, fTexHeight );
	m_rtShopPremLL.SetUV( 35, 16, 48, 29, fTexWidth, fTexHeight );
	m_rtShopPremLo.SetUV( 49, 16, 50, 29, fTexWidth, fTexHeight );
	m_rtShopPremRL.SetUV( 51, 16, 64, 29, fTexWidth, fTexHeight );


	// Number
	int nOffsetX = 0;
	int nOffsetY = 47;

	int nNubmerWidth = 22;
	int nNubmerHeight = 23;

	m_rcNumber.SetRect( 0, 0, 22, 23 );
	
	for( int i = 0 ; i < 10; i++ )
	{
		m_rtNumber[i].SetUV( nOffsetX + i * nNubmerWidth, nOffsetY, 
							nOffsetX + i * nNubmerWidth + nNubmerWidth, nOffsetY + nNubmerHeight, 
							fTexWidth, fTexHeight );
	}

#define ST_MISS			0
#define ST_CRITICAL		1
#define ST_DEADLY		2

	m_rcShowText[ST_MISS].SetRect( 0, 0, 50, 21 );
	m_rtShowText[ST_MISS].SetUV( 0, 98, 50, 119, fTexWidth, fTexHeight );

	m_rcShowText[ST_CRITICAL].SetRect( 0, 0, 113, 27 );
	m_rtShowText[ST_CRITICAL].SetUV( 0, 70, 113, 97, fTexWidth, fTexHeight );
	
	m_rcShowText[ST_DEADLY].SetRect( 0, 0, 101, 27 );
	m_rtShowText[ST_DEADLY].SetUV( 118, 70, 219, 97, fTexWidth, fTexHeight );

	// Button texture
	_pUIBtnTexMgr = new CUIButtonTextureManager;
	_pUIBtnTexMgr->Create();

	// Font texture
	_pUIFontTexMgr = new CUIFontTextureManager;
	_pUIFontTexMgr->Create();

	// Holding button
	m_btnHoldBtn.Create( NULL, 0, 0, 32, 32 );


	// Chatting
	m_apUIs[UI_CHATTING] = new CUIChatting;
	m_apUIs[UI_CHATTING]->Create( NULL, 0, 588, CHATTING_WIDTH, CHATTING_HEIGHT );

	// Player information
	m_apUIs[UI_PLAYERINFO] = new CUIPlayerInfo;
	m_apUIs[UI_PLAYERINFO]->Create( NULL, 0, 0, PLAYERINFO_WIDTH, PLAYERINFO_HEIGHT );

	// Quick slot
	m_apUIs[UI_QUICKSLOT] = new CUIQuickSlot;
	m_apUIs[UI_QUICKSLOT]->Create( NULL, 619, 724, QUICKSLOT_WIDTH, QUICKSLOT_HEIGHT );

	// Radar
	m_apUIs[UI_RADAR] = new CUIRadar;
	m_apUIs[UI_RADAR]->Create( NULL, 896, 0, RADAR_WIDTH, RADAR_HEIGHT );

	// Target information
	m_apUIs[UI_TARGETINFO] = new CUITargetInfo;
	m_apUIs[UI_TARGETINFO]->Create( NULL, 448, 0, TARGETINFO_WIDTH, TARGETINFO_HEIGHT );

	// wooss 070330 -------------------------------------------------------------------->>
	// Help ICON
	m_apUIs[UI_HELP_ICON] = new CUIHelpIcon;
	m_apUIs[UI_HELP_ICON]->Create( NULL, 0, 0, HELPICON_WIDTH, HELPICON_HEIGHT );
	// ---------------------------------------------------------------------------------<<

	// Inventory
	m_apUIs[UI_INVENTORY] = new CUIInventory;
	m_apUIs[UI_INVENTORY]->Create( NULL, 0, 0, INVENTORY_WIDTH, INVENTORY_HEIGHT );

	// Character information
	m_apUIs[UI_CHARACTERINFO] = new CUICharacterInfo;
	m_apUIs[UI_CHARACTERINFO]->Create( NULL, 0, 0, CHARINFO_WIDTH, CHARINFO_HEIGHT );

	// Exchange
	m_apUIs[UI_EXCHANGE] = new CUIExchange;
	m_apUIs[UI_EXCHANGE]->Create( NULL, 0, 0, EXCHANGE_WIDTH, EXCHANGE_HEIGHT );

	// Portal
	m_apUIs[UI_PORTAL] = new CUIPortal;
	m_apUIs[UI_PORTAL]->Create( NULL, 0, 0, PORTAL_WIDTH, PORTAL_HEIGHT );

	// Shop
	m_apUIs[UI_SHOP] = new CUIShop;
	m_apUIs[UI_SHOP]->Create( NULL, 0, 0, SHOP_MAIN_WIDTH, SHOP_MAIN_HEIGHT );

	// Quiz
	m_apUIs[UI_QUIZ] = new CUIQuiz;
	m_apUIs[UI_QUIZ]->Create( NULL, 0, 0, QUIZ_MAIN_WIDTH, QUIZ_MAIN_HEIGHT );

	// Pet Training
	m_apUIs[UI_PETTRAINING] = new CUIPetTraining;
	m_apUIs[UI_PETTRAINING]->Create( NULL, 0, 0, PETTRAINING_WIDTH, PETTRAINING_HEIGHT );

	// Pet Info
	m_apUIs[UI_PETINFO] = new CUIPetInfo;
	m_apUIs[UI_PETINFO]->Create( NULL, 0, 0, PETINFO_WIDTH, PETINFO_HEIGHT );

	// Gamble
	m_apUIs[UI_GAMBLE] = new CUIGamble;
	m_apUIs[UI_GAMBLE]->Create( NULL, 0, 0, GAMBLE_MAIN_WIDTH, GAMBLE_MAIN_HEIGHT );

	// Personal Shop
	m_apUIs[UI_PERSONALSHOP] = new CUIPersonalShop;
	m_apUIs[UI_PERSONALSHOP]->Create( NULL, 0, 0, PERSONAL_MAIN_WIDTH, PERSONAL_MAIN_HEIGHT );

	// Guild
	m_apUIs[UI_GUILD] = new CUIGuild;
	m_apUIs[UI_GUILD]->Create( NULL, 0, 0, GUILD_WIDTH, GUILD_HEIGHT );

	// Ranking
	m_apUIs[UI_RANKING] = new CUIRanking;
	m_apUIs[UI_RANKING]->Create( NULL, 0, 0, RANKING_WIDTH, RANKING_HEIGHT );

	// Pet Target Info
	m_apUIs[UI_PETTARGETINFO] = new CUIPetTargetInfo;
	m_apUIs[UI_PETTARGETINFO]->Create( NULL, 0, 0, PETTARGETINFO_WIDTH, PETTARGETINFO_HEIGHT );

	// WildPet Target Info
	m_apUIs[UI_WILDPETTARGETINFO] = new CUIWildPetTargetInfo;
	m_apUIs[UI_WILDPETTARGETINFO]->Create( NULL, 0, 0, PETTARGETINFO_WIDTH, PETTARGETINFO_HEIGHT );

	// Process NPC
	m_apUIs[UI_PROCESSNPC] = new CUIProcessNPC;
	m_apUIs[UI_PROCESSNPC]->Create( NULL, 0, 0, PROCESSNPC_WIDTH, PROCESSNPC_HEIGHT );

	// Select Resource
	m_apUIs[UI_SELECTRESOURCE] = new CUISelectResource;
	m_apUIs[UI_SELECTRESOURCE]->Create( NULL, 200, 200, SELECTRESOURCE_WIDTH, SELECTRESOURCE_HEIGHT );

	// Single Battle
	m_apUIs[UI_SINGLE_BATTLE] = new CUISingleBattle;
	m_apUIs[UI_SINGLE_BATTLE]->Create( NULL, 0, 0, SB_WIDTH, SB_HEIGHT );
#ifdef HELP_SYSTEM_1
	// Help
	m_apUIs[UI_HELP] = new CUIHelp;
	m_apUIs[UI_HELP]->Create( NULL, 0, 0, HELP_WIDTH, HELP_HEIGHT );

#else
	// Help
	m_apUIs[UI_HELP] = new CUIHelpOld;
	m_apUIs[UI_HELP]->Create( NULL, 0, 0, HELPOLD_WIDTH, HELPOLD_HEIGHT );

#endif
	// Help3
	m_apUIs[UI_HELP3] = new CUIHelp3;
	m_apUIs[UI_HELP3]->Create( NULL, 0, 0, HELP3_WIDTH, HELP3_HEIGHT );

	// Guild Battle // Date : 2005-03-17,   By Lee Ki-hwan
	m_apUIs[UI_GUILD_BATTLE] = new CUIGuildBattle;
	m_apUIs[UI_GUILD_BATTLE]->Create( NULL, 0, 0, GB_WIDTH, GB_HEIGHT );

	// WareHouse
	m_apUIs[UI_WAREHOUSE] = new CUIWareHouse;
	m_apUIs[UI_WAREHOUSE]->Create( NULL, 0, 0, WAREHOUSE_WIDTH, WAREHOUSE_HEIGHT );

	// SECURITY
	m_apUIs[UI_SECURITY] = new CUISecurity;
	m_apUIs[UI_SECURITY]->Create( NULL, 0, 0, SECURITY_CHANGEPW_WIDTH, SECURITY_CHANGEPW_HEIGHT );

	// System menu
	m_apUIs[UI_SYSTEMMENU] = new CUISystemMenu;
	m_apUIs[UI_SYSTEMMENU]->Create( NULL, 0, 0, SYSTEMMENU_WIDTH, SYSTEMMENU_HEIGHT );

	// GuildWar Portal
	m_apUIs[UI_GUILDWARPORTAL] = new CUIGuildWarPortal;
	m_apUIs[UI_GUILDWARPORTAL]->Create( NULL, 0, 0, GUILDWARPORTAL_WIDTH, GUILDWARPORTAL_HEIGHT );

	// Party
	m_apUIs[UI_PARTY] = new CUIParty;
	m_apUIs[UI_PARTY]->Create( NULL, 0, 0, PARTY_WIDTH, PARTY_HEIGHT );

	// party auto matching
	m_apUIs[UI_PARTYAUTO] = new CUIPartyAuto;
	m_apUIs[UI_PARTYAUTO]->Create( NULL, 0, 0, P_AUTO_WIDTH, P_AUTO_HEIGHT );

	// Map
	m_apUIs[UI_MAP] = new CUIMap;
	m_apUIs[UI_MAP]->Create( NULL, 0, 0, MAP_FRAME_WIDTH, MAP_FRAME_HEIGHT );

	// Option
	m_apUIs[UI_OPTION] = new CUIOption;
	m_apUIs[UI_OPTION]->Create( NULL, 0, 0, OPTION_WIDTH, OPTION_HEIGHT );

	// Refine
	m_apUIs[UI_REFINE] = new CUIRefine;
	m_apUIs[UI_REFINE]->Create( NULL, 0, 0, REFINE_WIDTH, REFINE_HEIGHT );
	
	// Process
	m_apUIs[UI_PROCESS] = new CUIProcess;
	m_apUIs[UI_PROCESS]->Create( NULL, 0, 0, PROCESS_WIDTH, PROCESS_HEIGHT );

	// Prodcut ŔĚ±âČŻ (12.7)
	m_apUIs[UI_PRODUCT] = new CUIProduct;
	m_apUIs[UI_PRODUCT]->Create( NULL, 0, 0, PRODUCT_WIDTH, PRODUCT_HEIGHT );

	// Mix :  ŔĚ±âČŻ (12.7)
	m_apUIs[UI_MIX] = new CUIMix;
	m_apUIs[UI_MIX]->Create( NULL, 0, 0, MIX_WIDTH, MIX_HEIGHT );
	
	// wooss 060523 mix new
	m_apUIs[UI_MIXNEW] = new CUIMixNew;
	m_apUIs[UI_MIXNEW]->Create( NULL, 0, 0, MIXNEW_WIDTH, MIXNEW_HEIGHT );

	// UI_COMPOUND // Date : 2005-01-12,   By Lee Ki-hwan
	m_apUIs[UI_COMPOUND] = new CUICompound;
	m_apUIs[UI_COMPOUND]->Create( NULL, 0, 0, COMPOUND_WIDTH, COMPOUND_HEIGHT );

	// Date : 2005-04-30(żŔČÄ 3:56:59), By Lee Ki-hwan
	m_apUIs[UI_BILLING] = new CUIBilling;
	m_apUIs[UI_BILLING]->Create( NULL, 0, 0, BILLING_WIDTH, BILLING_HEIGHT );
	
	
	m_apUIs[UI_BILL_ITEM] = new CUIBillItem;
	m_apUIs[UI_BILL_ITEM]->Create( NULL, 0, 0, BILL_ITEM_WIDTH, BILL_ITEM_HEIGHT );

	m_apUIs[UI_REMISSION] = new CUIRemission;
	m_apUIs[UI_REMISSION]->Create( NULL, 0, 0, REMISSION_WIDTH, REMISSION_HEIGHT );

	m_apUIs[UI_QUEST] = new CUIQuest;
	m_apUIs[UI_QUEST]->Create( NULL, 0, 0, QUEST_WIDTH, QUEST_HEIGHT );

	m_apUIs[UI_SELECTWORD] = new CUISelectWord;
	m_apUIs[UI_SELECTWORD]->Create( NULL, 0, 0, SELECTREWORD_WIDTH, SELECTREWORD_HEIGHT );

	// ÄŁ±¸ ĂŁ±â ŔĚşĄĆ® 060126
	m_apUIs[UI_SELECTLIST] = new CUISelectList;
	m_apUIs[UI_SELECTLIST]->Create( NULL, 0, 0, SELECTLIST_WIDTH, SELECTLIST_HEIGHT );

	// Ćę ľĆŔĚĹŰ Á¶ÇŐ( ŔŻ´ĎĹ© ľĆŔĚĹŰ Á¦ŔŰ )
	m_apUIs[UI_PETITEMMIX] = new CUIPetItemMix;
	m_apUIs[UI_PETITEMMIX]->Create( NULL, 0, 0, PROCESS_WIDTH, PROCESS_HEIGHT );
	
	m_apUIs[UI_PETFREE] = new CUIPetFree;
	m_apUIs[UI_PETFREE]->Create( NULL, 0, 0, UI_PETFREE_WIDTH, UI_PETFREE_HEIGHT );	
	
	m_apUIs[UI_QUIZEVENT] = new CUIOXQuizEvent;
	m_apUIs[UI_QUIZEVENT]->Create( NULL, 0, 0, UI_OX_WIDTH, UI_OX_HEIGHT );

	m_apUIs[UI_COLLECTBOX] = new CUICollectBox;
	m_apUIs[UI_COLLECTBOX]->Create( NULL, 0, 0, UICOLLECTBOX_WIDTH, UICOLLECTBOX_HEIGHT );

	m_apUIs[UI_BINGOBOX] = new CUIBingoBox;
	m_apUIs[UI_BINGOBOX]->Create( NULL, 0, 0, UI_BINGOBOX_WIDTH, UI_BINGOBOX_HEIGHT );
	// NPC ľČł» ˝Ă˝şĹŰ
	m_apUIs[UI_NPCHELP]	= new CUINpcHelp;
	m_apUIs[UI_NPCHELP]->Create( NULL, 0, 0, UI_NPCHELP_WIDTH, UI_NPCHELP_HEIGHT );

	// Äů˝şĆ® ¸ń·Ď
	m_apUIs[UI_QUESTBOOK_LIST] = new CUIQuestBook( UI_QUESTBOOK_LIST );
	m_apUIs[UI_QUESTBOOK_LIST]->Create( NULL, 0, 0, QUESTBOOK_WIDTH, QUESTBOOK_HEIGHT );	

	// Äů˝şĆ® ł»żë
	m_apUIs[UI_QUESTBOOK_CONTENT] = new CUIQuestBook( UI_QUESTBOOK_CONTENT );
	m_apUIs[UI_QUESTBOOK_CONTENT]->Create( NULL, 0, 0, QUESTBOOK_WIDTH, QUESTBOOK_HEIGHT );	

	// Äů˝şĆ® żĎ·á
	m_apUIs[UI_QUESTBOOK_COMPLETE] = new CUIQuestBook( UI_QUESTBOOK_COMPLETE );
	m_apUIs[UI_QUESTBOOK_COMPLETE]->Create( NULL, 0, 0, QUESTBOOK_WIDTH, QUESTBOOK_HEIGHT );	

	// ˝Ĺ±Ô Äů˝şĆ®
	m_apUIs[UI_QUESTBOOK_NEW] = new CUIQuestBook( UI_QUESTBOOK_NEW );
	m_apUIs[UI_QUESTBOOK_NEW]->Create( NULL, 0, 0, QUESTBOOK_WIDTH, QUESTBOOK_HEIGHT );	

	// ĽŇČŻĽö ÄÁĆ®·Ń...
	m_apUIs[UI_SUMMON_FIRST] = new CUISummon( UI_SUMMON_FIRST );
	m_apUIs[UI_SUMMON_FIRST]->Create( NULL, 0, 0, SUMMON_WIDTH, SUMMON_HEIGHT );	

	m_apUIs[UI_SUMMON_SECOND] = new CUISummon( UI_SUMMON_SECOND );
	m_apUIs[UI_SUMMON_SECOND]->Create( NULL, 0, 0, SUMMON_WIDTH, SUMMON_HEIGHT );	
	
	// SkillLearn
	m_apUIs[UI_SKILLLEARN] = new CUISkillLearn;
	m_apUIs[UI_SKILLLEARN]->Create( NULL, 0, 0, SKILLLEARN_WIDTH, SKILLLEARN_HEIGHT );

	// ChangeWeapon
	m_apUIs[UI_CHANGEWEAPON] = new CUIChangeWeapon;
	m_apUIs[UI_CHANGEWEAPON]->Create( NULL, 0, 0, CHANGEWEAPON_WIDTH, CHANGEWEAPON_HEIGHT );

	// Init Job
	m_apUIs[UI_INITJOB]	= new CUIInitJob;
	m_apUIs[UI_INITJOB]->Create( NULL, 0, 0, INITJOB_WIDTH, INITJOB_HEIGHT );

	// Init Job
	m_apUIs[UI_HELPER]	= new CUIHelper;
	m_apUIs[UI_HELPER]->Create( NULL, 0, 0, HELPER_WIDTH, HELPER_HEIGHT );

	// Teleport
	m_apUIs[UI_TELEPORT] = new CUITeleport;
	m_apUIs[UI_TELEPORT]->Create( NULL, 0, 0, TELEPORT_WIDTH, TELEPORT_HEIGHT );

	// [KH_070315] Primium Teleport
	m_apUIs[UI_TELEPORT_PRIMIUM] = new CUITeleportPrimium;
	m_apUIs[UI_TELEPORT_PRIMIUM]->Create( NULL, 0, 0, TELEPORT_PRIMIUM_WIDTH, TELEPORT_PRIMIUM_HEIGHT );

	// Messenger
	m_apUIs[UI_MESSENGER] = new CUIMessenger;
	m_apUIs[UI_MESSENGER]->Create( NULL, 0, 0, MESSENGER_WIDTH, MESSENGER_HEIGHT );

	// Web board
	m_apUIs[UI_WEBBOARD] = new CUIWebBoard;
	m_apUIs[UI_WEBBOARD]->Create( NULL, 0, 0, WBOARD_WIDTH, WBOARD_HEIGHT );

	// SiegeWarfare(°řĽşŔü)
	m_apUIs[UI_SIEGE_WARFARE] = new CUISiegeWarfare;
	m_apUIs[UI_SIEGE_WARFARE]->Create( NULL, 0, 0, 0, 0 );
	
	// WSS_DRATAN_SIEGEWARFARE
	// SiegeWarfareNew(˝Ĺ°řĽşŔü) -DRATAN
	m_apUIs[UI_SIEGE_WARFARE_NEW] = new CUISiegeWarfareNew;
	m_apUIs[UI_SIEGE_WARFARE_NEW]->Create( NULL, 0, 0, 0, 0 );

	m_apUIs[UI_GW_MIX] = new CUIGWMix;
	m_apUIs[UI_GW_MIX]->Create( NULL, 0, 0, 0, 0 );

	// Notice
	m_apUIs[UI_NOTICE] = new CUINotice;
	m_apUIs[UI_NOTICE]->Create( NULL, 0, 0, NOTICE_WIDTH, NOTICE_HEIGHT );

	m_apUIs[UI_GUILDSTASH] = new CUIGuildStash;
	m_apUIs[UI_GUILDSTASH]->Create( NULL, 0, 0, 0, 0 );

	m_apUIs[UI_AUCTION] = new CUIAuction;
	m_apUIs[UI_AUCTION]->Create(NULL, 0, 0, AUCTION_WIDTH, AUCTION_HEIGHT);

	m_apUIs[UI_WILDPET_INFO] = new CUIWildPetInfo;
	m_apUIs[UI_WILDPET_INFO]->Create( NULL, 0, 0, WILDPETINFO_WIDTH,WILDPETINFO_HEIGHT);

	m_apUIs[UI_TATOO] = new CUITatoo;
	m_apUIs[UI_TATOO]->Create( NULL, 0, 0, TATOO_WIDTH, TATOO_HEIGHT);

	// Messenger talk box
	int iUI;
	for(  iUI = UI_MESSENGER_TALK_START; iUI < UI_MESSENGER_TALK_END; iUI++ )
	{
		m_apUIs[iUI] = new CUITalk;
		((CUITalk*)m_apUIs[iUI])->Create( NULL, iUI );
	}

	// Message box
	for( iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		m_apUIs[iUI] = new CUIMessageBox;
		m_apUIs[iUI]->Create( NULL, 0, 0, MSGBOX_WIDTH, MSGBOX_HEIGHT );
		((CUIMessageBox *)m_apUIs[iUI])->SetUIIndex( iUI );
	}

	// Message box Large
	for( iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		m_apUIs[iUI] = new CUIMessageBoxL;
		m_apUIs[iUI]->Create( NULL, 0, 0, MSGBOXL_WIDTH, MSGBOXL_HEIGHT );
		((CUIMessageBoxL *)m_apUIs[iUI])->SetUIIndex( iUI );
	}

	// Login
	m_apUIs[UI_LOGIN] = new CUILogin;
	m_apUIs[UI_LOGIN]->Create( NULL, 0, 0, LOGIN_WIDTH, LOGIN_HEIGHT );

	// Select Server
	m_apUIs[UI_SEL_SERVER] = new CUISelectServer;
	m_apUIs[UI_SEL_SERVER]->Create( NULL, 0, 0, SELECTSERVER_WIDTH, SELECTSERVER_HEIGHT );

	// Create character
	m_apUIs[UI_CREATE_CHAR] = new CUICreateChar;
	m_apUIs[UI_CREATE_CHAR]->Create( NULL, 0, 0, 0, 0 );

	// Select character
	m_apUIs[UI_SEL_CHAR] = new CUISelChar;
	m_apUIs[UI_SEL_CHAR]->Create( NULL, 0, 0, SELCHAR_WIDTH, SELCHAR_HEIGHT );
	
	// wooss 050819
	// UI cash shop
	m_apUIs[UI_CASH_SHOP] = new CUICashShop;//CASHSHOP_WIDTH,CASHSHOP_HEIGHT
	m_apUIs[UI_CASH_SHOP]->Create(NULL, 0, 0, 698,CASHSHOP_HEIGHT);
	
// [KH_070420]	Ăß°ˇ
	m_apUIs[UI_SIMPLE_POP] = new CUISimplePop;
	m_apUIs[UI_SIMPLE_POP]->Create(NULL, 0, 0, 0, 0);
	
	// WSS_MINIGAME 070418 --------------------------------------------->>
	// UI MINIGAME
	m_apUIs[UI_MINIGAME] = new CUIMinigame;//CASHSHOP_WIDTH,CASHSHOP_HEIGHT
	m_apUIs[UI_MINIGAME]->Create(NULL, 0, 0, MINIGAME_WIDTH,MINIGAME_HEIGHT);
	// -----------------------------------------------------------------<<

	// UI FlowerTree
	m_apUIs[UI_FLOWERTREE] = new CUIFlowerTree;
	m_apUIs[UI_FLOWERTREE]->Create(NULL, 0, 0, FLOWERTREE_WIDTH, FLOWERTREE_HEIGHT);
	
	// WSS_NEW_GUILD_SYSTEM --------------------------------------------------->>
	// UI Guild Notice 
	m_apUIs[UI_GUILD_NOTICE] = new CUIGuildNotice;
	m_apUIs[UI_GUILD_NOTICE]->Create(NULL, 0, 0, GUILD_NOTICE_WIDTH, GUILD_NOTICE_HEIGHT);
	// ------------------------------------------------------------------------<<
	// ttos_080116 : ¸ó˝şĹÍ ÄŢş¸
	m_apUIs[UI_MONSTER_COMBO] = new CUIMonsterCombo;
	m_apUIs[UI_MONSTER_COMBO]->Create(NULL, 0, 0, UI_MONSTERCOMBO_WIDTH, UI_MONSTERCOMBO_HEIGHT);
	// ------------------------------------------------------------------------<<

	//[ttos_2009_7_17]: CHARATER_CHAT_FILTER Äł¸ŻĹÍ Ă¤ĆĂ ÇĘĹÍ
	m_apUIs[UI_CHAT_FILTER] = new CUIChatFilter;
	m_apUIs[UI_CHAT_FILTER]->Create( NULL, 0, 0, 250, 332);
	// ------------------------------------------------------------------------<<
	
	SetTitleName( sam_bFullScreenActive, sam_iScreenSizeI, sam_iScreenSizeJ );

	m_nShowMessageBox = -1;
}

// ----------------------------------------------------------------------------
// Name : Destroy()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::Destroy()
{
	// Popup texture
	if( m_ptdPopupTexture )
	{
		_pTextureStock->Release( m_ptdPopupTexture );
		m_ptdPopupTexture = NULL;
	}

	if( m_ptBlackTexture )
	{
		_pTextureStock->Release( m_ptBlackTexture );
		m_ptBlackTexture = NULL;
	}

	if( _bWorldEditorApp )
		return;

	// set mouse clip region to entire screen
	ClipCursor(NULL);
	// restore mouse pos
	//SetCursorPos( inp_ptOldMousePos.x, inp_ptOldMousePos.y);

	// show mouse on screen
	while (ShowCursor(TRUE) < 0);
	// set system mouse settings
	//SystemParametersInfo(SPI_SETMOUSE, 0, &inp_mscMouseSettings, 0);

	m_pGame = NULL;

	// Button texture
	if( _pUIBtnTexMgr )
	{
		delete _pUIBtnTexMgr;
		_pUIBtnTexMgr = NULL;
	}

	// Text texture
	if( _pUIFontTexMgr )
	{
		delete _pUIFontTexMgr;
		_pUIFontTexMgr = NULL;
	}

	// Buff
	if( _pUIBuff )
	{
		delete _pUIBuff;
		_pUIBuff = NULL;
	}

	// UIs
	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if( m_apUIs[iUI] )
		{
			m_apUIs[iUI]->Destroy();
			delete m_apUIs[iUI];
			m_apUIs[iUI] = NULL;
		}
	}

	if ( _UISignBoard != NULL )
	{
		delete _UISignBoard;
		_UISignBoard = NULL;
	}

	// Date : 2005-01-10,   By Lee Ki-hwan : 
	if ( _UIAutoHelp != NULL )
	{
		delete _UIAutoHelp;
		_UIAutoHelp = NULL;
	}

	// Strings
	m_aStringData.Clear();
	//DeleteFilterList();

	// Date : 2005-01-10,   By Lee Ki-hwan : NULL Check
	if ( m_pumcMouseCursor != NULL )
	{
		delete m_pumcMouseCursor;
		 m_pumcMouseCursor = NULL;
	}
}

//-----------------------------------------------------------------------------
// Purpose: 
// Input  : *pWorld - 
//-----------------------------------------------------------------------------
void CUIManager::SetBackgroundWorld(CWorld *pWorld)
{
	// NOTE : Ä«¸Ţ¶ó ĽłÁ¤ ¶§ą®żˇ ÇĘżäÇŃ şÎşĐ.
	GetSelChar()->SetBackgroundWorld(pWorld);
	GetCreateChar()->SetBackgroundWorld(pWorld);
}

void CUIManager::SetGameHandle(CGame *pGame)
{
	ASSERT(pGame != NULL && "Invalid Game Handle");
	m_pGame = pGame;
}

// ----------------------------------------------------------------------------
// Name : CreateMessageBox()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CreateMessageBox( CUIMsgBox_Info &rMsgBoxInfo, int nPosX, int nPosY )
{
	// Create message box
	for( int iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( !m_apUIs[iUI]->IsEnabled() )
		{
			((CUIMessageBox *)m_apUIs[iUI])->CreateMessageBox( rMsgBoxInfo, nPosX, nPosY );
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : CloseMessageBox()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CloseMessageBox( int nCommandCode )
{
	// Find message box and close it
	for( int iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBox *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
		{
			((CUIMessageBox *)m_apUIs[iUI])->InitMessageBox();
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : DoesMessageBoxExist()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::DoesMessageBoxExist( int nCommandCode )
{
	// Find message box and return result
	for( int iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBox *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
			return TRUE;
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : GetMessageBox()
// Desc :
// ----------------------------------------------------------------------------
CUIMessageBox* CUIManager::GetMessageBox( int nCommandCode )
{
	// Find message box and return result
	for( int iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBox *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
			return (CUIMessageBox *)m_apUIs[iUI];
	}
	return NULL;
}

// ----------------------------------------------------------------------------
// Name : CreateMessageBoxL()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CreateMessageBoxL( CTString &strTitle, int nWhichUI, int nCommandCode, int nPosX, int nPosY )
{
	// Create message box
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( !m_apUIs[iUI]->IsEnabled() )
		{
			((CUIMessageBoxL *)m_apUIs[iUI])->CreateMessageBox( strTitle, nWhichUI, nCommandCode, nPosX, nPosY );
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : CloseMessageBoxL()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::AddMessageBoxLString( int nCommandCode, BOOL bDesc, CTString &strMessage, int iValue, const COLOR colDesc, CTString strPrefix )
{
	// Find message box
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBoxL *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
		{
			if( bDesc )
				((CUIMessageBoxL *)m_apUIs[iUI])->AddDescString( strMessage, colDesc );
			else
			{
				CTString strTemp;
#ifndef NEW_QUESTBOOK
				strTemp.PrintF("%d. %s", ((CUIMessageBoxL *)m_apUIs[iUI])->GetCurNum()++, strMessage);				
#else
				strTemp.PrintF("%s %s", strPrefix, strMessage);
#endif				
				((CUIMessageBoxL *)m_apUIs[iUI])->AddSelString( strTemp, colDesc, iValue );
			}
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : CloseMessageBoxL()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CloseMessageBoxL( int nCommandCode )
{
	// Find message box and close it
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBoxL *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
		{
			((CUIMessageBoxL *)m_apUIs[iUI])->InitMessageBox();
			break;
		}
	}
}

// ----------------------------------------------------------------------------
// Name : DoesMessageBoxExistL()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::DoesMessageBoxLExist( int nCommandCode )
{
	// Find message box and return result
	for( int iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled() &&
			((CUIMessageBoxL *)m_apUIs[iUI])->GetCmdCode() == nCommandCode )
			return TRUE;
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : ResetUIPos()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::ResetUIPos( CDrawPort *pdp )
{
	m_pixMinI = pdp->dp_MinI;
	m_pixMinJ = pdp->dp_MinJ;
	m_pixMaxI = pdp->dp_MaxI;
	m_pixMaxJ = pdp->dp_MaxJ;

	for( int iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
		m_apUIs[iUI]->ResetPosition( m_pixMinI, m_pixMinJ, m_pixMaxI, m_pixMaxJ );
}

// ----------------------------------------------------------------------------
// Name : AdjustUIPos()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::AdjustUIPos( CDrawPort *pdp )
{
	if( m_pixMinI != pdp->dp_MinI || m_pixMinJ != pdp->dp_MinJ ||
		m_pixMaxI != pdp->dp_MaxI || m_pixMaxJ != pdp->dp_MaxJ )
	{
		m_pixMinI = pdp->dp_MinI;
		m_pixMinJ = pdp->dp_MinJ;
		m_pixMaxI = pdp->dp_MaxI;
		m_pixMaxJ = pdp->dp_MaxJ;

		for( int iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			m_apUIs[iUI]->AdjustPosition( m_pixMinI, m_pixMinJ, m_pixMaxI, m_pixMaxJ );
	}
}

// ----------------------------------------------------------------------------
// Name : InsertCommaToString()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::InsertCommaToString( CTString &strCount )
{
	char	szCount[256];
	int		iChar = 0, iCharTemp = 0, ctComma = 0;
	int		nLength = strCount.Length();
	for( int iChiper = nLength; iChiper > 0; iChiper-- )
	{
		szCount[iChar++] = strCount[iCharTemp++];
		if( ( iChiper % 3 ) == 1 && iChiper > 1 )
		{
			szCount[iChar++] = ',';
			ctComma++;
		}
	}
	szCount[nLength + ctComma] = NULL;
	strCount = szCount;
}

//------------------------------------------------------------------------------
// CUIManager::GetNasColor
// Explain:  łŞ˝şŔÇ ±Ýľ×żˇ µű¶óĽ­ ÁöÁ¤µČ łŞ˝ş »öŔ» Á¶Á¤ÇŃ´Ů.
// Date : 2005-11-10,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
COLOR CUIManager::GetNasColor( SQUAD llNas )
{
	ALPHA AlphaValue = 255; 

	if( llNas < 1000 ) 
	{
		return RGBAToColor( 255, 255, 255, AlphaValue );
	}
	else if( llNas < 1000000 ) // 1,000,000 ąĚ¸¸ 
	{
		return RGBAToColor( 0, 255, 255, AlphaValue );
	}
	else if( llNas < 1000000000 ) // 1,000,000,000 ąĚ¸¸ 1ľď
	{
		 return RGBAToColor( 0, 255, 0, AlphaValue );
	}
	else if( llNas < 1000000000000 ) // 1,000,000,000,000 ąĚ¸¸ 
	{
		return RGBAToColor( 255, 255, 0, AlphaValue );
	}
	else if( llNas >= 1000000000000 ) // 1,000,000,000,000 ŔĚ»ó
	{
		return RGBAToColor( 255, 204, 0, AlphaValue );
	}
	
	return RGBAToColor( 255, 255, 255, AlphaValue );
}


//------------------------------------------------------------------------------
// CUIManager::GetNasColor
// Explain:  łŞ˝şŔÇ ±Ýľ×żˇ µű¶óĽ­ ÁöÁ¤µČ łŞ˝ş »öŔ» Á¶Á¤ÇŃ´Ů.
// Date : 2005-11-10,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
COLOR CUIManager::GetNasColor( CTString strNas )
{
	char		szCount[256];
	SQUAD		llNas = 0;
	int			iChar = 0;

	int nLength = strNas.Length();

	for( int i = 0; i < nLength; i++ )
	{
		if( strNas[i] == ',' ) continue;

		szCount[iChar++] = strNas[i];
	}

	szCount[++iChar] = NULL;

	llNas = atoi( szCount );

	return GetNasColor( llNas );
}

CTString CUIManager::NasNumToWord(SQUAD llNas)
{
	CTString strNasString = "";
	CTString strTemp;

	switch(g_iCountry)
	{
		case KOREA:
		{
			int nQuotient = llNas / 100000000;
			int nRemain = llNas % 100000000;
			if(nQuotient > 0)
			{
				strTemp.PrintF("%dľď", nQuotient);
				strNasString += strTemp;
			}
			
			if(nRemain > 0)
			{
				nQuotient = nRemain / 10000;
				nRemain = nRemain % 10000;

				if(nQuotient > 0)
				{
					if(nRemain > 0)
					{
						strTemp.PrintF("%d¸¸%d", nQuotient, nRemain);
					}
					else
					{
						strTemp.PrintF("%d¸¸", nQuotient);
					}
				}
				else
				{
					if(nRemain > 0)
					{
						strTemp.PrintF("%d", nRemain);
					}
				}
				strNasString += strTemp;

			}
		}
		break;

		default: //±ął»¸¸ ´ÜŔ§¸¦ łŞ´©ľîĽ­ Ăâ·Â, ´Ů¸Ą±ą°ˇ´Â ÄŢ¸¶·Î ±¸şĐ
		{
			strNasString.PrintF("%I64d", llNas);
			_pUIMgr->InsertCommaToString( strNasString );
		}
		break;
	}

	return strNasString;
}

// ----------------------------------------------------------------------------
// Name : Render()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::Render( CDrawPort *pdp, CProjection3D* pprProjection )
{
	m_pUIDrawPort = pdp;

	// If UIs are not shown
	if( !m_bShowUIs )
		return;

	LONGLONG llElapsedTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();

	if( llElapsedTime - llOldTime > 5000 )
	{
		CPrintF( "ClearAllDamageEffect\n" );
		llOldTime = llElapsedTime;

		if( m_ugsGameState == UGS_GAMEON )
		{
			ClearDamageData();
		}	
	}


	// Mipmap bias
	FLOAT	fMipmapBias = GetOption()->GetTextureQuality( 2 );
	gfxSetTextureBiasing( fMipmapBias );

	if( m_ugsGameState == UGS_GAMELOADING )
	{
		m_pUIDrawPort->InitTextureData( m_ptBlackTexture );
		
		m_pUIDrawPort->AddTexture( 0, 0, m_pUIDrawPort->dp_MaxI, m_pUIDrawPort->dp_MaxJ,
										m_rtBlack.U0, m_rtBlack.V0, m_rtBlack.U1, m_rtBlack.V1, 0xFFFFFFFF );
		m_pUIDrawPort->FlushRenderingQueue();
		return;
	}

	// Popups of objects
	if( _iNameType )
		RenderObjectNamePopup( pprProjection );
	else
		RenderObjectIndexPopup( pprProjection );

	_pUIMgr->SetDamageState();

	// Render UIs
	for( INDEX iUI = UI_TYPE_END - 1; iUI >= UI_TYPE_START; iUI-- )
	{
		INDEX	iCurUI = m_aUIOrder[iUI];
		if( m_apUIs[iCurUI]->IsEnabled() && m_apUIs[iCurUI]->IsVisible() ){
			if(iCurUI>=UI_MESSAGEBOX_START)
				if(_pUIMgr->DoesMessageBoxLExist(MSGLCMD_QUEST_REQ)||
					_pUIMgr->DoesMessageBoxLExist(MSGLCMD_EVENT_2PAN4PAN_ONE)||
					_pUIMgr->DoesMessageBoxLExist(MSGLCMD_EVENT_2PAN4PAN_TWO)||
					_pUIMgr->DoesMessageBoxExist(MSGCMD_ASK_ONE_FIVE)||
					_pUIMgr->DoesMessageBoxExist(MSGCMD_ASK_ONE_FOUR)||
					_pUIMgr->DoesMessageBoxExist(MSGCMD_ASK_TWO_OPEN)){

					// 051104 npcżˇ ŔÇÇŘ »ýĽşµČ Ă˘Ŕ» °Ĺ¸®°ˇ ¸ÖľîÁö¸é ÁöżöÁŘ´Ů
					// Check distance
					FLOAT	fDiffX = _pNetwork->MyCharacterInfo.x - _pUIMgr->GetQuest()->GetNpcPosX();
					FLOAT	fDiffZ = _pNetwork->MyCharacterInfo.z - _pUIMgr->GetQuest()->GetNpcPosZ();
					if( fDiffX * fDiffX + fDiffZ * fDiffZ > UI_VALID_SQRDIST ){
						_pUIMgr->GetQuest()->CloseQuest();
						continue;
					}
				}
			 
			m_apUIs[iCurUI]->Render();

		}
	}

	_UISignBoard->Render();
	_UIAutoHelp->Render();
	_UIAutoHelp->RenderGMNotice();
	_pUIMgr->GetCombo()->SysStateRender();

	if( !m_btnHoldBtn.IsEmpty() )
	{
		// Render holding button
		m_btnHoldBtn.Render();

		// Render all button elements
		m_pUIDrawPort->FlushBtnRenderingQueue( m_btnHoldBtn.GetBtnType() );
	}

	// Render cursor
	if( !m_bRButtonDown )
	{
		if( m_bMouseInsideUIs )
			GetMouseCursor()->SetCursorType( m_umctTypeInUI );
		else
			m_umctTypeInUI = UMCT_NORMAL;
	}

	// Mipmap bias
	extern FLOAT	gap_fTextureLODBias;
	gfxSetTextureBiasing( gap_fTextureLODBias );
}

// ----------------------------------------------------------------------------
// Name : RenderObjectNamePopup()
// Desc : Character, npc and item must use ska...
// ----------------------------------------------------------------------------
void CUIManager::RenderObjectNamePopup( CProjection3D* pprProjection )
{
	// If game state is not on game
	if( m_ugsGameState != UGS_GAMEON )
		return;
	extern INDEX	g_iShowName;
	extern INDEX	g_iShowNameItem;
	if(g_iShowName == -1 && g_iShowNameItem == -1)
		return;

	// Blinking name popup for pk
	static BOOL		bHideName = TRUE;
	static __int64	llOldTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	static __int64	llElapsedTime = 0;
	__int64			llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	llElapsedTime += llCurTime - llOldTime;
	llOldTime = llCurTime;
	if( llElapsedTime > 500 )
	{
		bHideName = !bHideName;
		do
		{
			llElapsedTime -= 500;
		}
		while( llElapsedTime > 500 );
	}
	COLOR	colNameBlend;
	if( bHideName ) colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * ( 1.0f - ( (FLOAT)llElapsedTime / 500.0f ) ) );
	else colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * ( (FLOAT)llElapsedTime / 500.0f ) );

	// Get font size
	int	nBoxWidth, nTextSX, nTextSY, nChatMsgLines, nShopMsgLines;
	int	nFontWidth = _pUIFontTexMgr->GetFontWidth() + _pUIFontTexMgr->GetFontSpacing();
	int	nFontHeight = _pUIFontTexMgr->GetLineHeight();

	CEntity			*penObject;
	CTString		strName, strTemp;
	CModelInstance	*pmi;
	FLOAT3D			vObjectPos, vViewPos, vPopupPos, vObjCenter;
	FLOATaabbox3D	boxModel;
	int				nColIndex, nLevelDiff, nPopupY;
	FLOAT			fRadius, fHeight, fX, fZ, fPopupZ, fSqrDist;
	FLOAT			fSqrDistance = g_iShowName * OPTION_NAME_DISTANCE;
	FLOAT			fSqrDistanceItem = g_iShowNameItem * OPTION_NAME_DISTANCE;
	fSqrDistance *= fSqrDistance;
	fSqrDistanceItem *= fSqrDistanceItem;

	////////////////////////////////////////////////////////////////////////
	// Show name of npc
	if( g_iShowName > 0 )
	{
		INDEX	ctMob = _pNetwork->ga_srvServer.srv_amtMob.Count();
		INDEX iObj;
		for(  iObj = 0; iObj < ctMob; iObj++ ) 
		{
			// Get target mob
			CMobTarget	&mt = _pNetwork->ga_srvServer.srv_amtMob[iObj];
			CMobData& MD = _pNetwork->GetMobData(mt.mob_iType);
			// WSS_DRATAN_SEIGEWARFARE 2007/08/23 ----------------->>
			// °řĽş ÁřÇŕ˝Ă şÎČ°ÁřÁö ŔĚ¸§ŔĚ şŻÇĎąÇ·Î...
			if(//_pUIMgr->GetSiegeWarfareNew()->GetWarState() && 
			   //_pNetwork->MyCharacterInfo.sbJoinFlagDratan != WCJF_NONE &&
				_pNetwork->MyCharacterInfo.sbAttributePos == ATTC_WAR )
			{			
				if(mt.mob_iType >=390 && mt.mob_iType <=399)
					mt.mob_Name = MD.GetName();
			}
			// ----------------------------------------------------<<
			// ÄŢş¸ ąŮ´Ú ŔĚĆĺĆ® NPC ÇĄ˝Ă ľČÇÔ
			if (mt.mob_iType == 491) continue;
			
			penObject = mt.mob_pEntity;

			ASSERT( penObject != NULL );
			if( penObject == NULL )
				continue;

			if (penObject->IsFlagOff(ENF_ALIVE))
			{
				StopTargetEffect(mt.mob_Index);
				continue;
			}
			
			if (penObject->IsFlagOn(ENF_HIDDEN)&&
				(CEntity::GetPlayerEntity(0)->IsFlagOff(ENF_SHOWHIDDEN) ||
				(CEntity::GetPlayerEntity(0)->IsFlagOn(ENF_SHOWHIDDEN)&&!penObject->IsEnemy())))//ENF_SHOWHIDDENŔĚ¸é npc´Â şĽ Ľö ŔÖ´Ů.
				continue;

			vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistance )
			{
#ifdef TARGET_MARK
				StopTargetEffect(mt.mob_Index);
#endif
				continue;
			}

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			if(pmi == NULL)
				continue;
			ASSERT( pmi->GetName() != "" );
			if( pmi->GetName() == "" )
				continue;
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			// Get box region
			if(g_iCountry == THAILAND) nBoxWidth = FindThaiLen(mt.mob_Name)+13; //wooss 051017
			else nBoxWidth = mt.mob_Name.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			COLOR colPopup =0xFFFFFFFF;
			BOOL bTarget =FALSE;
			BOOL bTargetEffect = TRUE;
#ifdef TARGET_MARK
			switch (mt.mob_iType)
			{
			case 484: case 486: // Ĺ©¸®˝ş ¸¶˝ş Ć®¸® 
				{//Ĺ¸°Ů ŔĚĆĺĆ®°ˇ ÇĘżä ľř´Ů.
					bTargetEffect = FALSE;
				}
			}

			if (bTargetEffect)
			{
				//Ĺ¸°ŮŔ¸·Î Ŕâ°í ŔÖ´Â NPCŔÇ °ćżě...
				if( mt.mob_pEntity == _pNetwork->_TargetInfo.pen_pEntity)
				{
					bTarget =TRUE;
					if( mt.mob_bNPC )				//NPCŔĎ °ćżě Ĺ×µÎ¸®¸¦ łë¶ő»öŔ¸·Î...
					{
						colPopup =0xFFFF00FF;
						StartTargetEffect(mt.mob_Index, mt.mob_pEntity, FALSE);
					}
					else							//¸÷ŔĎ °ćżě Ĺ×µÎ¸®¸¦ »ˇ°Ł»öŔ¸·Î...
					{
						colPopup =0xFF0000FF;
						StartTargetEffect(mt.mob_Index, mt.mob_pEntity, TRUE);
					}
				}
				else
					StopTargetEffect(mt.mob_Index);
			}

#endif

			if( bTarget )
			{
				int iAddFrame =3;
				// Add render regions
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );

				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}
			else
			{
				// Add render regions
				m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
												m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
												m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
												m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}

			// ł»°ˇ ¶§·ČŔ»¶§ łŞżŔ´Â µĄąĚÁö???
			ShowDamageList( vPopupPos, fPopupZ, mt.mob_iClientIndex );

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 1;

			if( mt.IsNPC() )
			{
				m_pUIDrawPort->PutTextCharEx( mt.mob_Name, 0, nTextSX, nTextSY,
												GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
			}
			else
			{
				nLevelDiff = mt.mob_iLevel - _pNetwork->MyCharacterInfo.level;
				if( nLevelDiff > 5 ) nColIndex = 0;
				else if( nLevelDiff > 2 ) nColIndex = 1;
				else if( nLevelDiff > -3 ) nColIndex = 2;
				else if( nLevelDiff > -6 ) nColIndex = 3;
				else nColIndex = 4;
				m_pUIDrawPort->PutTextCharEx( mt.mob_Name, 0, nTextSX, nTextSY,
												GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );
			}

			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}

		////////////////////////////////////////////////////////////////////////
		// Show name of pet
		INDEX	ctPet = _pNetwork->ga_srvServer.srv_actPet.Count();
		for( iObj = 0; iObj < ctPet; iObj++ ) 
		{
			// Get target mob
			CPetTarget	&pt = _pNetwork->ga_srvServer.srv_actPet[iObj];
			penObject = pt.pet_pEntity;

			ASSERT( penObject != NULL );
			if( penObject == NULL )
				continue;

			// Invisibility
			if( penObject->IsFlagOn(ENF_HIDDEN) )
				continue;
			vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistance )
			{
#ifdef TARGET_MARK				
				StopTargetEffect(pt.pet_Index);
#endif
				continue;
			}

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			if(pmi == NULL)
				continue;
			ASSERT( pmi->GetName() != "" );
			if( pmi->GetName() == "" )
				continue;
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			// Get box region
			if( pt.pet_strNameCard.Length() >0)
				nBoxWidth = pt.pet_strNameCard.Length() * nFontWidth + 13;
			else
				nBoxWidth = pt.pet_Name.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			//ŔĚ¸§ ĆËľ÷ Ĺ×µÎ¸®»ö
			COLOR colPopup =0xFFFFFFFF;
			BOOL bTarget =FALSE;
			
#ifdef TARGET_MARK
			//Ĺ¸°ŮŔ¸·Î Ŕâ°í ŔÖ´Â ĆęŔÇ °ćżě...
			if( pt.pet_pEntity == _pNetwork->_TargetInfo.pen_pEntity )
			{
				bTarget =TRUE;

				if( IsEnemy(&pt, PET) )			//ĆęŔÇ ÁÖŔÎŔĚ ŔűŔĚ¸é Ĺ×µÎ¸®¸¦ »ˇ°Ł»öŔ¸·Î...
				{
					colPopup =0xFF0000FF;
					StartTargetEffect(pt.pet_Index, pt.pet_pEntity, TRUE);
				}
				else							//ĆęŔÇ ÁÖŔÎŔĚ ŔűŔĚ ľĆ´Ď¸é łë¶ő»öŔ¸·Î...
				{
					colPopup =0xFFFF00FF;
					StartTargetEffect(pt.pet_Index, pt.pet_pEntity, FALSE);
				}
			}
			else
				StopTargetEffect(pt.pet_Index);
#endif

			if( bTarget )
			{
				int iAddFrame =3;

				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );

				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}
			else
			{
				// Add render regions
				m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
												m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
												m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
												m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 1;
			
			if( pt.pet_strNameCard.Length()>0)
				m_pUIDrawPort->PutTextCharEx( pt.pet_strNameCard, 0, nTextSX, nTextSY,
												GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
			else
				m_pUIDrawPort->PutTextCharEx( pt.pet_Name, 0, nTextSX, nTextSY,
											GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
			
			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}

		////////////////////////////////////////////////////////////////////////
		// Show name of Slave
		INDEX	ctSlave = _pNetwork->ga_srvServer.srv_actSlave.Count();
		for( iObj = 0; iObj < ctSlave; iObj++ ) 
		{
			// Get target mob
			CSlaveTarget	&st = _pNetwork->ga_srvServer.srv_actSlave[iObj];
			penObject = st.slave_pEntity;

			ASSERT( penObject != NULL );
			if( penObject == NULL )
				continue;

#ifdef SORCERER_SUMMON_VILLAGE_VISIBLE_NA_20081008
			if (penObject->IsFlagOn(ENF_HIDDEN))
				continue;
#endif
			vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistance )
			{
#ifdef TARGET_MARK
				StopTargetEffect(st.slave_Index);
#endif
				continue;
			}

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			if(pmi == NULL)
				continue;
			ASSERT( pmi->GetName() != "" );
			if( pmi->GetName() == "" )
				continue;
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			// Get box region
			nBoxWidth = st.slave_Name.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			//ŔĚ¸§ ĆËľ÷ Ĺ×µÎ¸®»ö
			COLOR colPopup =0xFFFFFFFF;
			BOOL bTarget =FALSE;
			
#ifdef TARGET_MARK
			//Ĺ¸°ŮŔ¸·Î Ŕâ°í ŔÖ´Â ĽŇČŻĽöŔÇ °ćżě...
			if( st.slave_pEntity== _pNetwork->_TargetInfo.pen_pEntity)
			{
				bTarget =TRUE;

				if( IsEnemy(&st, SUMMON) )		//ĽŇČŻĽöŔÇ ÁÖŔÎŔĚ ŔűŔĚ¸é Ĺ×µÎ¸®¸¦ »ˇ°Ł»öŔ¸·Î...
				{
					colPopup =0xFF0000FF;
					StartTargetEffect( st.slave_Index, st.slave_pEntity, TRUE);
				}
				else							//ĽŇČŻĽöŔÇ ÁÖŔÎŔĚ ŔűŔĚ ľĆ´Ď¸é łë¶ő»öŔ¸·Î...
				{
					colPopup =0xFFFF00FF;
					StartTargetEffect( st.slave_Index, st.slave_pEntity, FALSE);
				}
			}
			else
				StopTargetEffect(st.slave_Index);
#endif

			if( bTarget )
			{
				int iAddFrame =3;
				
				// Add render regions
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );

				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}
			else
			{
				// Add render regions
				m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
												m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
												m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
												m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}

			// ł»°ˇ ¶§·ČŔ»¶§ łŞżŔ´Â µĄąĚÁö???
			ShowDamageList( vPopupPos, fPopupZ, st.slave_iClientIndex );

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 1;
			
			m_pUIDrawPort->PutTextCharEx( st.slave_Name, 0, nTextSX, nTextSY,
											GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
			
			

			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}

		////////////////////////////////////////////////////////////////////////
		// Show name of Wildpet
		INDEX	ctWildPet = _pNetwork->ga_srvServer.srv_actWildPet.Count();
		for( iObj = 0; iObj < ctWildPet; iObj++ ) 
		{
			// Get target mob
			CWildPetInfo	&pt = _pNetwork->ga_srvServer.srv_actWildPet[iObj];
			penObject = pt.pet_pEntity;

			ASSERT( penObject != NULL );
			if( penObject == NULL )
				continue;

			// Invisibility
			if( penObject->IsFlagOn(ENF_HIDDEN) )
				continue;
			vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistance )
			{
	#ifdef TARGET_MARK				
				StopTargetEffect(pt.m_nNetIndex);
	#endif
				continue;
			}

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			if(pmi == NULL)
				continue;
			ASSERT( pmi->GetName() != "" );
			if( pmi->GetName() == "" )
				continue;
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			// Get box region
			if( pt.m_strName.Length() >0)
				nBoxWidth = pt.m_strName.Length() * nFontWidth + 13;
			else
				nBoxWidth = pt.m_strName.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			//ŔĚ¸§ ĆËľ÷ Ĺ×µÎ¸®»ö
			COLOR colPopup =0xFFFFFFFF;
			BOOL bTarget =FALSE;
			
	#ifdef TARGET_MARK
			//Ĺ¸°ŮŔ¸·Î Ŕâ°í ŔÖ´Â ĆęŔÇ °ćżě...
			if( pt.pet_pEntity == _pNetwork->_TargetInfo.pen_pEntity )
			{
				bTarget =TRUE;

				if( IsEnemy(&pt, WILDPET) )			//ĆęŔÇ ÁÖŔÎŔĚ ŔűŔĚ¸é Ĺ×µÎ¸®¸¦ »ˇ°Ł»öŔ¸·Î...
				{
					colPopup =0xFF0000FF;
					StartTargetEffect(pt.m_nNetIndex, pt.pet_pEntity, TRUE);
				}
				else							//ĆęŔÇ ÁÖŔÎŔĚ ŔűŔĚ ľĆ´Ď¸é łë¶ő»öŔ¸·Î...
				{
					colPopup =0xFFFF00FF;
					StartTargetEffect(pt.m_nNetIndex, pt.pet_pEntity, FALSE);
				}
			}
			else
				StopTargetEffect(pt.m_nNetIndex);
	#endif

			if( bTarget )
			{
				int iAddFrame =3;

				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );

				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}
			else
			{
				// Add render regions
				m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
												m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
												m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
												m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 1;
			CTString temString;
			temString.PrintF("%s",pt.m_strName);
			
			if( pt.m_strName.Length()>0)
				m_pUIDrawPort->PutTextCharEx(/* pt.m_strName*/temString, 0, nTextSX, nTextSY,
												GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
			else
				m_pUIDrawPort->PutTextCharEx(/* pt.m_strName*/temString, 0, nTextSX, nTextSY,
											GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
			
			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}

	}

	////////////////////////////////////////////////////////////////////////
	// Show name of item
	if( g_iShowNameItem > 0 )
	{
		INDEX	ctItem = _pNetwork->ga_srvServer.srv_aitItem.Count();
		for( INDEX iObj = 0; iObj < ctItem; iObj++ ) 
		{
			// Get target mob
			CItemTarget	&it = _pNetwork->ga_srvServer.srv_aitItem[iObj];
			penObject = it.item_pEntity;

			if( penObject == NULL )
				continue;
			vObjectPos = penObject->en_plPlacement.pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistanceItem )
				continue;

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			if(pmi == NULL)
				continue;
			ASSERT( pmi->GetName() != "" );
			if( pmi->GetName() == "" )
				continue;
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			COLOR colNas = GetTargetInfo()->GetNameColor( 2 );

			// Get box region
			if( it.item_llCount > 1 )
			{
				strTemp.PrintF( "%I64d", it.item_llCount );
				InsertCommaToString( strTemp );
				strName.PrintF( "%s(%s)", it.item_Name, strTemp );
				colNas = _pUIMgr->GetNasColor(  it.item_llCount );
			}
			else
			{
				strName = it.item_Name;
				//strName.TrimRightChar( '(' );
			}

			if(g_iCountry == THAILAND) 
				nBoxWidth = FindThaiLen(strName)+13; //wooss 051017
			else 
			nBoxWidth = strName.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			// Add render regions
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 1;

			BOOL bRare = IsRareItem( it.item_Name);

			if( bRare )
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, RAREITEM_NAME_COLOR, fPopupZ );
			else
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, colNas, fPopupZ );
			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}
	}

	////////////////////////////////////////////////////////////////////////
	// Show name & chatting of character
	INDEX	ctCha = _pNetwork->ga_srvServer.srv_actCha.Count();
	for( INDEX iObj = 0; iObj < ctCha; iObj++ ) 
	{
		// Get target character
		CCharacterTarget	&ct = _pNetwork->ga_srvServer.srv_actCha[iObj];
		penObject = ct.cha_pEntity;
		nChatMsgLines = ct.ChatMsg.GetCount();

		// Invisibility buff
		if( ct.cha_statusEffect.GetStatus() & ( 1L << EST_ASSIST_INVISIBLE ) )
			continue;

		ASSERT( penObject != NULL );
		if( penObject == NULL )
			continue;
		vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

		// Test distance
		fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
		fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
		fSqrDist = fX * fX + fZ * fZ;
		if( nChatMsgLines == 0 && ct.cha_sbShopType == PST_NOSHOP &&
			ct.GetPkState() == CHA_PVP_STATE_PEACE && fSqrDist > fSqrDistance )
		{
#ifdef TARGET_MARK
			StopTargetEffect(ct.cha_Index);
#endif
			continue;
		}

		// Get frame box
		pmi = penObject->GetModelInstance();
		ASSERT( pmi != NULL );
		if(pmi == NULL)
			continue;
		ASSERT( pmi->GetName() != "" );
		if( pmi->GetName() == "" )
			continue;
		pmi->GetAllFramesBBox( boxModel );
		boxModel.StretchByVector( pmi->mi_vStretch );
		fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
		fRadius = fHeight * 0.5f;

		// Frustum test
		vObjCenter = vObjectPos;
		vObjCenter(2) += fRadius;
		pprProjection->PreClip( vObjCenter, vViewPos );
		if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
			continue;

		// Object point to screen point
		vObjectPos(2) += fHeight;
		pprProjection->PreClip( vObjectPos, vViewPos );
		pprProjection->PostClip( vViewPos, vPopupPos );
		fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
					* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

		// Get box region
		if(g_iCountry == THAILAND) { //wooss 051017 Äł¸ŻĹÍ ŔĚ¸§Ă˘ ±ćŔĚ ĽöÁ¤
			nBoxWidth = FindThaiLen(ct.cha_strName);
			if( (ct.GetPkState() == CHA_PVP_STATE_PEACE) && !ct.IsLegitimate() ) 
				nBoxWidth += 13; 
			else 
				nBoxWidth += 27; 
		}
		else 
		if( ct.GetPkState() == CHA_PVP_STATE_PEACE && !ct.IsLegitimate())
			nBoxWidth = ct.cha_strName.Length() * nFontWidth + 13;
		else
			nBoxWidth = ct.cha_strName.Length() * nFontWidth + 27;
		m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
		m_rcName.Right = m_rcName.Left + nBoxWidth;
		m_rcName.Bottom = vPopupPos(2) - 7;
		m_rcName.Top = m_rcName.Bottom - 15;
		nPopupY = m_rcName.Top;

		// Set popup texture
		m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

		//ŔĚ¸§ ĆËľ÷ Ĺ×µÎ¸®»ö
		COLOR colPopup =0xFFFFFFFF;
		BOOL bTarget =FALSE;
		int iAddFrame =0;
#ifdef TARGET_MARK
		//Ĺ¸°ŮŔ¸·Î Ŕâ°í ŔÖ´Â Äł¸ŻĹÍŔÇ °ćżě...
		if( ct.cha_pEntity== _pNetwork->_TargetInfo.pen_pEntity)
		{
			bTarget = TRUE;
			iAddFrame =3;

			if( IsEnemy(&ct, CHARACTER) )	//Äł¸ŻĹÍ°ˇ ŔűŔĚ¸é Ĺ×µÎ¸®¸¦ »ˇ°Ł»öŔ¸·Î...
			{
				colPopup =0xFF0000FF;
				StartTargetEffect( ct.cha_Index, ct.cha_pEntity, TRUE);
			}
			else							//Äł¸ŻĹÍ°ˇ ŔűŔĚ ľĆ´Ď¸é łë¶ő»öŔ¸·Î...
			{
				colPopup =0xFFFF00FF;
				StartTargetEffect( ct.cha_Index, ct.cha_pEntity, FALSE);
			}
		}
		else
			StopTargetEffect(ct.cha_Index);
#endif
		// Add render regions
		if( ct.IsLegitimate() )
		{
			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, colPopup, fPopupZ );
			}
			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, colPopup, fPopupZ );
		}
		else if( ct.GetPkState() == CHA_PVP_STATE_PEACE )
		{
			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom+iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
			}
			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom+iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
		}
		else		// PK
		{
			if( ct.GetPkState() == CHA_PVP_STATE_RELEASE )
				colPopup= colNameBlend;

			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colPopup, fPopupZ );
			}

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colPopup, fPopupZ );
		}

		// Guild Name
		if( ct.cha_lGuildIndex > 0)
		{
			if(g_iCountry == THAILAND) { //wooss 051017 Äł¸ŻĹÍ ŔĚ¸§Ă˘ ±ćŔĚ ĽöÁ¤
				nBoxWidth = FindThaiLen(ct.cha_strGuildName)+13; }
			else 
			nBoxWidth = ct.cha_strGuildName.Length() * nFontWidth + 13;		
			m_rcGuildName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcGuildName.Right = m_rcGuildName.Left + nBoxWidth;			
			m_rcGuildName.Bottom = nPopupY - 5;
			m_rcGuildName.Top = (m_rcGuildName.Bottom - 1 * nFontHeight) - 4;
			nPopupY = m_rcGuildName.Top;

			m_pUIDrawPort->AddTexture( m_rcGuildName.Left, m_rcGuildName.Top, m_rcGuildName.Left + 2, m_rcGuildName.Bottom,
				m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left + 2, m_rcGuildName.Top, m_rcGuildName.Right - 2, m_rcGuildName.Bottom,
				m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Right - 2, m_rcGuildName.Top, m_rcGuildName.Right, m_rcGuildName.Bottom,
				m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// WSS_GUILDMASTER 070517 -------------------------->>
#ifdef	DISPLAY_GUILD_RANK			
			DrawGuildRankBox(m_rcGuildName,ct.cha_sbGuildRank,fPopupZ);			
#endif
			// -------------------------------------------------<<

		}

		nShopMsgLines = 0;
		if( ct.cha_sbShopType != PST_NOSHOP )
		{
			nShopMsgLines = ct.ShopMsg.GetCount();
			if(g_iCountry == THAILAND) { //wooss 051017 ŔĚ¸§Ă˘ ±ćŔĚ ĽöÁ¤
				nBoxWidth = FindThaiLen(ct.ShopMsg.GetString(0)); }
			else 
			nBoxWidth = ct.ShopMsg.GetWidth();
			m_rcShop.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcShop.Right = m_rcShop.Left + nBoxWidth;

			if( ct.cha_sbShopType & PST_PREMIUM )
			{
				m_rcShop.Bottom = nPopupY - 18;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top - 13, m_rcShop.Left, m_rcShop.Top,
											m_rtShopPremLU.U0, m_rtShopPremLU.V0, m_rtShopPremLU.U1, m_rtShopPremLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 13, m_rcShop.Right, m_rcShop.Top,
											m_rtShopPremUp.U0, m_rtShopPremUp.V0, m_rtShopPremUp.U1, m_rtShopPremUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 13, m_rcShop.Right + 13, m_rcShop.Top,
											m_rtShopPremRU.U0, m_rtShopPremRU.V0, m_rtShopPremRU.U1, m_rtShopPremRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopPremL.U0, m_rtShopPremL.V0, m_rtShopPremL.U1, m_rtShopPremL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopPremC.U0, m_rtShopPremC.V0, m_rtShopPremC.U1, m_rtShopPremC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 13, m_rcShop.Bottom,
											m_rtShopPremR.U0, m_rtShopPremR.V0, m_rtShopPremR.U1, m_rtShopPremR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 13,
											m_rtShopPremLL.U0, m_rtShopPremLL.V0, m_rtShopPremLL.U1, m_rtShopPremLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 13,
											m_rtShopPremLo.U0, m_rtShopPremLo.V0, m_rtShopPremLo.U1, m_rtShopPremLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 13, m_rcShop.Bottom + 13,
											m_rtShopPremRL.U0, m_rtShopPremRL.V0, m_rtShopPremRL.U1, m_rtShopPremRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top - 8;
			}
			else
			{
				m_rcShop.Bottom = nPopupY - 10;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top - 5, m_rcShop.Left, m_rcShop.Top,
											m_rtShopLU.U0, m_rtShopLU.V0, m_rtShopLU.U1, m_rtShopLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 5, m_rcShop.Right, m_rcShop.Top,
											m_rtShopUp.U0, m_rtShopUp.V0, m_rtShopUp.U1, m_rtShopUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 5, m_rcShop.Right + 5, m_rcShop.Top,
											m_rtShopRU.U0, m_rtShopRU.V0, m_rtShopRU.U1, m_rtShopRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopL.U0, m_rtShopL.V0, m_rtShopL.U1, m_rtShopL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopC.U0, m_rtShopC.V0, m_rtShopC.U1, m_rtShopC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 5, m_rcShop.Bottom,
											m_rtShopR.U0, m_rtShopR.V0, m_rtShopR.U1, m_rtShopR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 5,
											m_rtShopLL.U0, m_rtShopLL.V0, m_rtShopLL.U1, m_rtShopLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 5,
											m_rtShopLo.U0, m_rtShopLo.V0, m_rtShopLo.U1, m_rtShopLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 5, m_rcShop.Bottom + 5,
											m_rtShopRL.U0, m_rtShopRL.V0, m_rtShopRL.U1, m_rtShopRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top;
			}
		}

		if( nChatMsgLines > 0 )
		{
			if(g_iCountry == THAILAND) { //wooss 051017 ŔĚ¸§Ă˘ ±ćŔĚ ĽöÁ¤
				nBoxWidth = FindThaiLen(ct.ChatMsg.GetString(0)); }
			else 
			nBoxWidth = ct.ChatMsg.GetWidth();
			m_rcChat.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcChat.Right = m_rcChat.Left + nBoxWidth;
			m_rcChat.Bottom = nPopupY - 10;
			m_rcChat.Top = m_rcChat.Bottom - nChatMsgLines * nFontHeight;
			nPopupY = m_rcChat.Top;

			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top - 5, m_rcChat.Left, m_rcChat.Top,
										m_rtChatLU.U0, m_rtChatLU.V0, m_rtChatLU.U1, m_rtChatLU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top - 5, m_rcChat.Right, m_rcChat.Top,
										m_rtChatUp.U0, m_rtChatUp.V0, m_rtChatUp.U1, m_rtChatUp.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top - 5, m_rcChat.Right + 5, m_rcChat.Top,
										m_rtChatRU.U0, m_rtChatRU.V0, m_rtChatRU.U1, m_rtChatRU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top, m_rcChat.Left, m_rcChat.Bottom,
										m_rtChatL.U0, m_rtChatL.V0, m_rtChatL.U1, m_rtChatL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top, m_rcChat.Right, m_rcChat.Bottom,
										m_rtChatC.U0, m_rtChatC.V0, m_rtChatC.U1, m_rtChatC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top, m_rcChat.Right + 5, m_rcChat.Bottom,
										m_rtChatR.U0, m_rtChatR.V0, m_rtChatR.U1, m_rtChatR.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Bottom, m_rcChat.Left, m_rcChat.Bottom + 5,
										m_rtChatLL.U0, m_rtChatLL.V0, m_rtChatLL.U1, m_rtChatLL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Bottom, m_rcChat.Right, m_rcChat.Bottom + 5,
										m_rtChatLo.U0, m_rtChatLo.V0, m_rtChatLo.U1, m_rtChatLo.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Bottom, m_rcChat.Right + 5, m_rcChat.Bottom + 5,
										m_rtChatRL.U0, m_rtChatRL.V0, m_rtChatRL.U1, m_rtChatRL.V1, 0xFFFFFFFF, fPopupZ );
		}

		// ł»°ˇ ¶§·ČŔ»¶§ łŞżŔ´Â µĄąĚÁö???
		ShowDamageList( vPopupPos, fPopupZ, ct.cha_iClientIndex );

		// Render all elements
		m_pUIDrawPort->FlushRenderingQueue();

		// Text
		nTextSX = m_rcName.Left + 7;
		nTextSY = m_rcName.Top + 1;
		// Title
		if( ct.cha_pkstate < -9 ) nColIndex = 11;
		else if( ct.cha_pkstate > 9 ) nColIndex = 7;
		else nColIndex = 9;
		// PK
		if( ct.GetPkState() != CHA_PVP_STATE_PEACE )
			nColIndex--;

		if(ct.cha_sbPresscorps != 0)
		{
			m_pUIDrawPort->PutTextEx( ct.cha_strName, nTextSX, nTextSY,
										0x00C80FFF, fPopupZ );
		}
		else
		{
			m_pUIDrawPort->PutTextEx( ct.cha_strName, nTextSX, nTextSY,
							GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );
		}


		// Text
		nTextSX = m_rcGuildName.Left + 7;
		nTextSY = m_rcGuildName.Top + 2;

		// Guild Name
		if( ct.cha_lGuildIndex > 0)
		{
			// WSS_GUILDMASTER 070517 --------------------------->>
/*			COLOR tRankColor = 0xD6A4D6FF;
#ifdef DISPLAY_GUILD_RANK
			// WSS_GUILDMASTER 070517
			// ±ćµĺ ·©Ĺ·żˇ µű¶ó »öÇĄ˝Ă ´Ţ¸®ÇÔ
			// 1 : Č˛±Ý»ö
			// 2 : Ŕş»ö 
			// 3 : µż»ö				
			switch(ct.cha_sbGuildRank)
			{
			case 1:
				tRankColor = 0xCDAF28FF;
				break;
			case 2:
				tRankColor = 0xBEBEAAFF;
				break;
			case 3:
				tRankColor = 0x9B7D50FF;
				break;
						
			}
#endif */
			//[071123: Su-won] DRATAN_SIEGE_DUNGEON
			//±ćµĺ ŔĚ¸§ »ö ĽłÁ¤
			COLOR colGuildName =0xD6A4D6FF;			//ŔĎąÝ ±ćµĺ

			if( ct.cha_ubGuildNameColor == 1)	//¸Ţ¶óĹ© ĽşÁÖ ±ćµĺ
				colGuildName = 0xFF4500FF;
			else if( ct.cha_ubGuildNameColor == 2)	//µĺ¶óĹş ĽşÁÖ ±ćµĺ
				colGuildName = 0xFFD700FF;

				// --------------------------------------------------<<
			m_pUIDrawPort->PutTextEx( ct.cha_strGuildName, nTextSX, nTextSY,
				colGuildName, fPopupZ );
		}

		if( nShopMsgLines > 0 )
		{
			nTextSX = m_rcShop.Left + 1;
			nTextSY = m_rcShop.Top + 1;
			for( int i = 0; i < nShopMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( ct.ShopMsg.GetString( i ), nTextSX, nTextSY,
											ct.ShopMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}
		}

		if( nChatMsgLines > 0 )
		{
			nTextSX = m_rcChat.Left + 1;
			nTextSY = m_rcChat.Top + 1;
			for( int i = 0; i < nChatMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( ct.ChatMsg.GetString( i ), nTextSX, nTextSY,
											ct.ChatMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}

			__int64	llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
			if( llCurTime - ct.ChatMsg.GetTime() > CHATMSG_TIME_DELAY || fSqrDist > CHATMSG_SQRDIST )
				ct.ChatMsg.Reset();
		}

		// Flush all render text queue
		_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
	}

	// My character
	nChatMsgLines = _pNetwork->MyCharacterInfo.ChatMsg.GetCount();
#ifdef GM_INVISIBLE_MODE
	if(_pNetwork->MyCharacterInfo.m_ModelColor ==NULL)
	{	
#endif
	if( g_iShowName > 0 || nChatMsgLines > 0 || _pNetwork->MyCharacterInfo.sbShopType != PST_NOSHOP ||
		_pNetwork->MyCharacterInfo.pk_mode != 0 )
	{
		penObject = CEntity::GetPlayerEntity( 0 );
		vObjectPos = penObject->GetLerpedPlacement().pl_PositionVector;

		// Get frame box
		pmi = penObject->GetModelInstance();
		ASSERT( pmi != NULL );
		if(pmi == NULL)						
			return;
		ASSERT( pmi->GetName() != "" );
		if( pmi->GetName() == "" )
			return;
		pmi->GetAllFramesBBox( boxModel );
		boxModel.StretchByVector( pmi->mi_vStretch );
		fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
		fRadius = fHeight * 0.5f;

		// Object point to screen point
		vObjectPos(2) += fHeight;
		pprProjection->PreClip( vObjectPos, vViewPos );
		pprProjection->PostClip( vViewPos, vPopupPos );
		fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
					* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

		// Get box region
		if(g_iCountry == THAILAND) {
			nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.name); //wooss 051017
			if(_pNetwork->MyCharacterInfo.pk_mode == 0 ) nBoxWidth+=13;
			else nBoxWidth+=27;
		} 
		else 
		if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
			nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 13;
		else
			nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 27;
		m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
		m_rcName.Right = m_rcName.Left + nBoxWidth;
		m_rcName.Bottom = vPopupPos(2) - 7;
		m_rcName.Top = m_rcName.Bottom - 15;
		nPopupY = m_rcName.Top;

		// Set popup texture
		m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

		// Add render regions
		/*if( _pNetwork->MyCharacterInfo.pk_mode == 3 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRDefPK1.U0, m_rtNameRDefPK1.V0, m_rtNameRDefPK1.U1, m_rtNameRDefPK1.V1, 0xFFFFFFFF, fPopupZ );
		}
		else */if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
		}
		else
		{
			COLOR	colBlend = 0xFFFFFFFF;
			if( _pNetwork->MyCharacterInfo.pk_mode == 2 )
				colBlend = colNameBlend;

			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colBlend, fPopupZ );
		}

		// Guild Name
		if( _pNetwork->MyCharacterInfo.lGuildIndex > 0)
		{
			// Get box region
			if(g_iCountry == THAILAND) nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.strGuildName)+13; //wooss 051017
			else
			nBoxWidth = _pNetwork->MyCharacterInfo.strGuildName.Length() * nFontWidth + 13;
			m_rcGuildName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcGuildName.Right = m_rcGuildName.Left + nBoxWidth;
			m_rcGuildName.Bottom = nPopupY - 5;
			m_rcGuildName.Top = (m_rcGuildName.Bottom - 1 * nFontHeight) - 4;
			nPopupY = m_rcGuildName.Top;
			
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left, m_rcGuildName.Top, m_rcGuildName.Left + 2, m_rcGuildName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left + 2, m_rcGuildName.Top, m_rcGuildName.Right - 2, m_rcGuildName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Right - 2, m_rcGuildName.Top, m_rcGuildName.Right, m_rcGuildName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
			// WSS_GUILDMASTER 070517 -------------------------->>
#ifdef	DISPLAY_GUILD_RANK	
			DrawGuildRankBox(m_rcGuildName,_pNetwork->MyCharacterInfo.sbGuildRank,fPopupZ);
#endif
			// -------------------------------------------------<<

		}

		nShopMsgLines = 0;
		if( _pNetwork->MyCharacterInfo.sbShopType != PST_NOSHOP )
		{
			nShopMsgLines = _pNetwork->MyCharacterInfo.ShopMsg.GetCount();
			if(g_iCountry == THAILAND) nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.ShopMsg.GetString(0)); //wooss 051017
			else
			nBoxWidth = _pNetwork->MyCharacterInfo.ShopMsg.GetWidth();
			m_rcShop.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcShop.Right = m_rcShop.Left + nBoxWidth;

			if( _pNetwork->MyCharacterInfo.sbShopType & PST_PREMIUM )
			{
				m_rcShop.Bottom = nPopupY - 18;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top - 13, m_rcShop.Left, m_rcShop.Top,
											m_rtShopPremLU.U0, m_rtShopPremLU.V0, m_rtShopPremLU.U1, m_rtShopPremLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 13, m_rcShop.Right, m_rcShop.Top,
											m_rtShopPremUp.U0, m_rtShopPremUp.V0, m_rtShopPremUp.U1, m_rtShopPremUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 13, m_rcShop.Right + 13, m_rcShop.Top,
											m_rtShopPremRU.U0, m_rtShopPremRU.V0, m_rtShopPremRU.U1, m_rtShopPremRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopPremL.U0, m_rtShopPremL.V0, m_rtShopPremL.U1, m_rtShopPremL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopPremC.U0, m_rtShopPremC.V0, m_rtShopPremC.U1, m_rtShopPremC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 13, m_rcShop.Bottom,
											m_rtShopPremR.U0, m_rtShopPremR.V0, m_rtShopPremR.U1, m_rtShopPremR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 13,
											m_rtShopPremLL.U0, m_rtShopPremLL.V0, m_rtShopPremLL.U1, m_rtShopPremLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 13,
											m_rtShopPremLo.U0, m_rtShopPremLo.V0, m_rtShopPremLo.U1, m_rtShopPremLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 13, m_rcShop.Bottom + 13,
											m_rtShopPremRL.U0, m_rtShopPremRL.V0, m_rtShopPremRL.U1, m_rtShopPremRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top - 8;
			}
			else
			{
				m_rcShop.Bottom = nPopupY - 10;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top - 5, m_rcShop.Left, m_rcShop.Top,
											m_rtShopLU.U0, m_rtShopLU.V0, m_rtShopLU.U1, m_rtShopLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 5, m_rcShop.Right, m_rcShop.Top,
											m_rtShopUp.U0, m_rtShopUp.V0, m_rtShopUp.U1, m_rtShopUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 5, m_rcShop.Right + 5, m_rcShop.Top,
											m_rtShopRU.U0, m_rtShopRU.V0, m_rtShopRU.U1, m_rtShopRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopL.U0, m_rtShopL.V0, m_rtShopL.U1, m_rtShopL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopC.U0, m_rtShopC.V0, m_rtShopC.U1, m_rtShopC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 5, m_rcShop.Bottom,
											m_rtShopR.U0, m_rtShopR.V0, m_rtShopR.U1, m_rtShopR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 5,
											m_rtShopLL.U0, m_rtShopLL.V0, m_rtShopLL.U1, m_rtShopLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 5,
											m_rtShopLo.U0, m_rtShopLo.V0, m_rtShopLo.U1, m_rtShopLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 5, m_rcShop.Bottom + 5,
											m_rtShopRL.U0, m_rtShopRL.V0, m_rtShopRL.U1, m_rtShopRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top;
			}
		}

		if( nChatMsgLines > 0 )
		{
			if(g_iCountry == THAILAND) nBoxWidth = FindThaiLen(_pNetwork->MyCharacterInfo.ChatMsg.GetString(0)); //wooss 051017
			else
			nBoxWidth = _pNetwork->MyCharacterInfo.ChatMsg.GetWidth();
			m_rcChat.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcChat.Right = m_rcChat.Left + nBoxWidth;
			m_rcChat.Bottom = nPopupY - 10;
			m_rcChat.Top = m_rcChat.Bottom - nChatMsgLines * nFontHeight;
			nPopupY = m_rcChat.Top;

			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top - 5, m_rcChat.Left, m_rcChat.Top,
										m_rtChatLU.U0, m_rtChatLU.V0, m_rtChatLU.U1, m_rtChatLU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top - 5, m_rcChat.Right, m_rcChat.Top,
										m_rtChatUp.U0, m_rtChatUp.V0, m_rtChatUp.U1, m_rtChatUp.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top - 5, m_rcChat.Right + 5, m_rcChat.Top,
										m_rtChatRU.U0, m_rtChatRU.V0, m_rtChatRU.U1, m_rtChatRU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top, m_rcChat.Left, m_rcChat.Bottom,
										m_rtChatL.U0, m_rtChatL.V0, m_rtChatL.U1, m_rtChatL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top, m_rcChat.Right, m_rcChat.Bottom,
										m_rtChatC.U0, m_rtChatC.V0, m_rtChatC.U1, m_rtChatC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top, m_rcChat.Right + 5, m_rcChat.Bottom,
										m_rtChatR.U0, m_rtChatR.V0, m_rtChatR.U1, m_rtChatR.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Bottom, m_rcChat.Left, m_rcChat.Bottom + 5,
										m_rtChatLL.U0, m_rtChatLL.V0, m_rtChatLL.U1, m_rtChatLL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Bottom, m_rcChat.Right, m_rcChat.Bottom + 5,
										m_rtChatLo.U0, m_rtChatLo.V0, m_rtChatLo.U1, m_rtChatLo.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Bottom, m_rcChat.Right + 5, m_rcChat.Bottom + 5,
										m_rtChatRL.U0, m_rtChatRL.V0, m_rtChatRL.U1, m_rtChatRL.V1, 0xFFFFFFFF, fPopupZ );
		}

		ShowDamageList( vPopupPos, fPopupZ, CEntity::GetPlayerEntity( 0 )->en_ulID );

		// Render all elements
		m_pUIDrawPort->FlushRenderingQueue();

		// Text
		nTextSX = m_rcName.Left + 7;
		nTextSY = m_rcName.Top + 1;
		// Title
		if( _pNetwork->MyCharacterInfo.pkpenalty < -9 ) nColIndex = 11;
		else if( _pNetwork->MyCharacterInfo.pkpenalty > 9 ) nColIndex = 7;
		else nColIndex = 9;
		// PK
		if( _pNetwork->MyCharacterInfo.pk_mode != 0 )
			nColIndex--;

		if( _pNetwork->MyCharacterInfo.sbPresscorps != 0)
		{
			m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
										0x00C80FFF, fPopupZ );
		}
		else
		{
			m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );
		}


		// Text
		nTextSX = m_rcGuildName.Left + 7;
		nTextSY = m_rcGuildName.Top + 2;

		// Guild Name
		if( _pNetwork->MyCharacterInfo.lGuildIndex > 0)
		{		
			// WSS_GUILDMASTER 070517 --------------------------->>
/*			COLOR tRankColor = 0xD6A4D6FF;
#ifdef DISPLAY_GUILD_RANK
			// WSS_GUILDMASTER 070517
			// ±ćµĺ ·©Ĺ·żˇ µű¶ó »öÇĄ˝Ă ´Ţ¸®ÇÔ
			// 1 : Č˛±Ý»ö
			// 2 : Ŕş»ö 
			// 3 : µż»ö				
			switch(_pNetwork->MyCharacterInfo.sbGuildRank)
			{
			case 1:
				tRankColor = 0xCDAF28FF;
				break;
			case 2:
				tRankColor = 0xBEBEAAFF;
				break;
			case 3:
				tRankColor = 0x9B7D50FF;
				break;
						
			}
#endif */
			// ----------------------------------------------------<<

			//[071123: Su-won] DRATAN_SIEGE_DUNGEON
			COLOR colGuildName = 0xD6A4D6FF;

			if( _pNetwork->MyCharacterInfo.ubGuildNameColor == 1 )			//¸Ţ¶óĹ© ĽşÁÖ ±ćµĺ 
				colGuildName = 0xFF4500FF;
			else if( _pNetwork->MyCharacterInfo.ubGuildNameColor == 2 )		//µĺ¶óĹş ĽşÁÖ ±ćµĺ
				colGuildName = 0xFFD700FF;

			m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.strGuildName, nTextSX, nTextSY,
									colGuildName, fPopupZ );
		}

		if( nShopMsgLines > 0 )
		{
			nTextSX = m_rcShop.Left + 1;
			nTextSY = m_rcShop.Top + 1;
			for( int i = 0; i < nShopMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.ShopMsg.GetString( i ), nTextSX, nTextSY,
											_pNetwork->MyCharacterInfo.ShopMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}
		}

		if( nChatMsgLines > 0 )
		{
			nTextSX = m_rcChat.Left + 1;
			nTextSY = m_rcChat.Top + 1;
			for( int i = 0; i < nChatMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.ChatMsg.GetString( i ), nTextSX, nTextSY,
											_pNetwork->MyCharacterInfo.ChatMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}

			__int64	llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
			if( llCurTime - _pNetwork->MyCharacterInfo.ChatMsg.GetTime() > CHATMSG_TIME_DELAY )
				_pNetwork->MyCharacterInfo.ChatMsg.Reset();
		}

		// Flush all render text queue
		_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
	}

#ifdef GM_INVISIBLE_MODE
	} 
#endif

	// If over target is not exist
	if( !_pNetwork->_TargetInfoReal.bIsActive || _pNetwork->_TargetInfoReal.pen_pEntity == NULL )
		return;

#ifdef TARGET_MARK
	vObjectPos = _pNetwork->_TargetInfoReal.pen_pEntity->GetLerpedPlacement().pl_PositionVector;

	// Test distance
	fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
	fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
	fSqrDist = fX * fX + fZ * fZ;
	if( fSqrDist > fSqrDistance )
		return;
#endif

	// Get target
	penObject = _pNetwork->_TargetInfoReal.pen_pEntity;

	ASSERT( penObject != NULL );
	if( penObject == NULL )
		return;
	vObjectPos = penObject->en_plPlacement.pl_PositionVector;

	// Get frame box
	pmi = penObject->GetModelInstance();
	ASSERT( pmi != NULL );
	if(pmi == NULL)
		return;
	ASSERT( pmi->GetName() != "" );
	if( pmi->GetName() == "" )
		return;

	pmi->GetAllFramesBBox( boxModel );
	boxModel.StretchByVector( pmi->mi_vStretch );

	// Object point to screen point
	vObjectPos(2) += boxModel.maxvect(2) - boxModel.minvect(2);
	pprProjection->PreClip( vObjectPos, vViewPos );
	pprProjection->PostClip( vViewPos, vPopupPos );
	fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
				 * pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

	COLOR colNas = GetTargetInfo()->GetNameColor( 2 );

	// Get name
	if( _pNetwork->_TargetInfoReal.TargetType == ITEM )
	{
		if( _pNetwork->_TargetInfoReal.llCount > 1 )
		{
			strTemp.PrintF( "%I64d", _pNetwork->_TargetInfoReal.llCount );
			InsertCommaToString( strTemp );
			strName.PrintF( "%s(%s)", _pNetwork->_TargetInfoReal.TargetName, strTemp );
			colNas = GetNasColor( _pNetwork->_TargetInfoReal.llCount );

		}
		else
		{
			strName = _pNetwork->_TargetInfoReal.TargetName;
			//strName.TrimRightChar( '(' );
		}
	}
	else
		strName.PrintF( "%s", _pNetwork->_TargetInfoReal.TargetName );

	// Get box region
	if( _pNetwork->_TargetInfoReal.TargetType == CHARACTER )
	{
		if(g_iCountry == THAILAND) {
			nBoxWidth = FindThaiLen(strName); //wooss 051017
			if(_pNetwork->_TargetInfoReal.PkMode == 0 ) nBoxWidth+=13;
			else nBoxWidth+=27;			
		}
		else 
		if( _pNetwork->_TargetInfoReal.PkMode == 0 )
			nBoxWidth = strName.Length() * nFontWidth + 13;
		else
			nBoxWidth = strName.Length() * nFontWidth + 27;
	}
	else if(g_iCountry == THAILAND) nBoxWidth = FindThaiLen(strName)+13; //wooss 051017
		else nBoxWidth = strName.Length() * nFontWidth + 13;

	m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
	m_rcName.Right = m_rcName.Left + nBoxWidth;
	m_rcName.Bottom = vPopupPos(2) - 7;
	m_rcName.Top = m_rcName.Bottom - 15;
	nPopupY = m_rcName.Top;

	// Guild Name
	if( _pNetwork->_TargetInfoReal.lGuildIndex != -1 )
	{
		// Get box region
		if( _pNetwork->_TargetInfoReal.TargetType == CHARACTER )
		{	
			if(g_iCountry == THAILAND) nBoxWidth = FindThaiLen(_pNetwork->_TargetInfoReal.strGuildName)+13; //wooss 051017
			else 
			nBoxWidth = _pNetwork->_TargetInfoReal.strGuildName.Length() * nFontWidth + 13;
		}
		
		m_rcGuildName.Left		= vPopupPos(1) - nBoxWidth / 2;
		m_rcGuildName.Right		= m_rcGuildName.Left + nBoxWidth;
		m_rcGuildName.Bottom	= nPopupY - 5;
		m_rcGuildName.Top		= (m_rcGuildName.Bottom - 1 * nFontHeight) - 4;
		nPopupY					= m_rcGuildName.Top;
	}

	// Set popup texture
	m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );
 
	// Add render regions
	if( _pNetwork->_TargetInfoReal.TargetType == CHARACTER )
	{
		COLOR colPopup =0xFFFFFFFF;
		BOOL bTarget = FALSE;
		int iAddFrame =0;

#ifdef TARGET_MARK
		//ÇöŔç Ĺ¸°ŮŔ¸·Î Ŕâ°í ŔÖ´Â Äł¸ŻĹÍŔĎ ¶§...
		if( _pNetwork->_TargetInfo.pen_pEntity == _pNetwork->_TargetInfoReal.pen_pEntity )
		{
			bTarget =TRUE;
			iAddFrame =3;

			if( IsEnemy(_pNetwork->_TargetInfoReal.pen_pEntity, CHARACTER, TRUE) )	//ŔűŔĚ¸é Ĺ×µÎ¸®¸¦ »ˇ°Ł»öŔ¸·Î...
				colPopup =0xFF0000FF;
			else							//ŔűŔĚ ľĆ´Ď¸é łë¶ő»öŔ¸·Î...
				colPopup =0xFFFF00FF;
		}
#endif
		if( _pNetwork->_TargetInfoReal.PkMode == 3 )
		{
			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, colPopup, fPopupZ );

			}
			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, colPopup, fPopupZ );
		}
		else if( _pNetwork->_TargetInfoReal.PkMode == 0 )
		{
			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom+iAddFrame,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );

			}

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom+iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
		}
		else
		{
			if( _pNetwork->_TargetInfoReal.PkMode == 2 )
				colPopup = colNameBlend;

			if( bTarget )
			{
				m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
											m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colPopup, fPopupZ );
			}

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 16, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colPopup, fPopupZ );
		}

		// Guild Name
		if( _pNetwork->_TargetInfoReal.lGuildIndex != -1 )
		{
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left, m_rcGuildName.Top, m_rcGuildName.Left + 2, m_rcGuildName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Left + 2, m_rcGuildName.Top, m_rcGuildName.Right - 2, m_rcGuildName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcGuildName.Right - 2, m_rcGuildName.Top, m_rcGuildName.Right, m_rcGuildName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// WSS_GUILDMASTER 070517 -------------------------->>
#ifdef	DISPLAY_GUILD_RANK
		DrawGuildRankBox(m_rcGuildName,_pNetwork->_TargetInfoReal.sbGuildRank,fPopupZ);	
#endif
			// -------------------------------------------------<<
		}
	}
	else
	{
		COLOR colPopup =0xFFFFFFFF;
		BOOL bTarget =FALSE;

#ifdef TARGET_MARK
		//ÇöŔç Ĺ¸°ŮŔ¸·Î Ŕâ°í ŔÖ´Â ´ë»óŔĎ ¶§...
		if( _pNetwork->_TargetInfo.pen_pEntity == _pNetwork->_TargetInfoReal.pen_pEntity )
		{
			bTarget =TRUE;

			switch( _pNetwork->_TargetInfoReal.TargetType )
			{
			case MOB:
				// WSS_DRATAN_SEIGEWARFARE 2007/08/23 ----------------->>
// şÎČ°ÁřÁö ŔĚ¸§ŔĚ Ľö˝Ă·Î ąŮ˛îąÇ·Î µĺ¶óĹş °řĽşżˇĽ­´Â
// ¸¶żě˝ş żŔąö˝Ă MOB,NPC ŔĚ¸§ ÇĄ˝Ă´Â ÇĎÁö ľĘ´Â´Ů.
				if( //_pUIMgr->GetSiegeWarfareNew()->GetWarState() &&
					//_pNetwork->MyCharacterInfo.sbJoinFlagDratan != WCJF_NONE &&
					_pNetwork->MyCharacterInfo.sbAttributePos == ATTC_WAR )
									return;				
// ----------------------------------------------------<<
				colPopup = 0xFF0000FF;
				break;
			case NPC:
				// WSS_DRATAN_SEIGEWARFARE 2007/08/23 ----------------->>
// şÎČ°ÁřÁö ŔĚ¸§ŔĚ Ľö˝Ă·Î ąŮ˛îąÇ·Î µĺ¶óĹş °řĽşżˇĽ­´Â
// ¸¶żě˝ş żŔąö˝Ă MOB,NPC ŔĚ¸§ ÇĄ˝Ă´Â ÇĎÁö ľĘ´Â´Ů.
				if( //_pUIMgr->GetSiegeWarfareNew()->GetWarState() &&
					//_pNetwork->MyCharacterInfo.sbJoinFlagDratan != WCJF_NONE &&
					_pNetwork->MyCharacterInfo.sbAttributePos == ATTC_WAR )
									return;				
// ----------------------------------------------------<<
				colPopup = 0xFFFF00FF;
				break;
			case PET:
				{
					if( IsEnemy(_pNetwork->_TargetInfoReal.pen_pEntity, PET, TRUE) )
						colPopup =0xFF0000FF;
					else
						colPopup =0xFFFF00FF;
				}
				break;
			case SUMMON:
				{
					if( IsEnemy(_pNetwork->_TargetInfoReal.pen_pEntity, SUMMON, TRUE) )
						colPopup =0xFF0000FF;
					else
						colPopup =0xFFFF00FF;
				}
				break;
			case WILDPET:
				{
					if(IsEnemy(_pNetwork->_TargetInfoReal.pen_pEntity,WILDPET, TRUE))
						colPopup =0xFF0000FF;
					else
						colPopup =0xFFFF00FF;
				}
				break;
			default:
				break;
			}
		}
#endif

		if( bTarget )
		{
			int iAddFrame =3;

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );

			m_pUIDrawPort->AddTexture( m_rcName.Left -iAddFrame, m_rcName.Top -iAddFrame, m_rcName.Left + 2, m_rcName.Bottom +iAddFrame,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top -iAddFrame, m_rcName.Right - 2, m_rcName.Bottom +iAddFrame,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top -iAddFrame, m_rcName.Right +iAddFrame, m_rcName.Bottom +iAddFrame,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
		}
		else
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
											m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
											m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colPopup, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
											m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, colPopup, fPopupZ );
		}
	}

	// Render all elements
	m_pUIDrawPort->FlushRenderingQueue();

	// Text
	nTextSX = m_rcName.Left + 7;
	nTextSY = m_rcName.Top + 1;
	switch( _pNetwork->_TargetInfoReal.TargetType )
	{
	case MOB:
		{
			nLevelDiff = _pNetwork->_TargetInfoReal.iLevel - _pNetwork->MyCharacterInfo.level;
			if( nLevelDiff > 5 ) nColIndex = 0;
			else if( nLevelDiff > 2 ) nColIndex = 1;
			else if( nLevelDiff > -3 ) nColIndex = 2;
			else if( nLevelDiff > -6 ) nColIndex = 3;
			else nColIndex = 4;
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );
		}
		break;

	case NPC:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
		}
		break;

	case PET:
	case WILDPET:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
		}
		break;

	case CHARACTER:
		{
			// Title
			if( _pNetwork->_TargetInfoReal.PkState < -9 ) nColIndex = 11;
			else if( _pNetwork->_TargetInfoReal.PkState > 9 ) nColIndex = 7;
			else nColIndex = 9;
			// PK
			if( _pNetwork->_TargetInfoReal.PkMode != 0 )
				nColIndex--;
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );

			// Guild Name
			if( _pNetwork->_TargetInfoReal.lGuildIndex != -1 )
			{
				// WSS_GUILDMASTER 070517 --------------------------->>
/*				COLOR tRankColor = 0xD6A4D6FF;
#ifdef DISPLAY_GUILD_RANK
				// WSS_GUILDMASTER 070517
				// ±ćµĺ ·©Ĺ·żˇ µű¶ó »öÇĄ˝Ă ´Ţ¸®ÇÔ
				// 1 : Č˛±Ý»ö
				// 2 : Ŕş»ö 
				// 3 : µż»ö				
				switch(_pNetwork->_TargetInfoReal.sbGuildRank)
				{
				case 1:
					tRankColor = 0xCDAF28FF;
					break;
				case 2:
					tRankColor = 0xBEBEAAFF;
					break;
				case 3:
					tRankColor = 0x9B7D50FF;
					break;
							
				}
#endif */
				//[071123: Su-won] DRATAN_SIEGE_DUNGEON
				//±ćµĺ ŔĚ¸§ »ö ĽłÁ¤
				COLOR colGuildName =0xD6A4D6FF;			//ŔĎąÝ ±ćµĺ

				if( _pNetwork->_TargetInfoReal.ubGuildNameColor == 1)	//¸Ţ¶óĹ© ĽşÁÖ ±ćµĺ
					colGuildName = 0xFF4500FF;
				else if( _pNetwork->_TargetInfoReal.ubGuildNameColor == 2)	//µĺ¶óĹş ĽşÁÖ ±ćµĺ
					colGuildName = 0xFFD700FF;

				// --------------------------------------------------<<
				nTextSX = m_rcGuildName.Left + 7;
				nTextSY = m_rcGuildName.Top + 2;
				m_pUIDrawPort->PutTextEx( _pNetwork->_TargetInfoReal.strGuildName, nTextSX, nTextSY,
										colGuildName, fPopupZ );
			}
		}
		break;

	case ITEM:
		{
			BOOL bRareItem =IsRareItem(strName);
			if( bRareItem )
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, RAREITEM_NAME_COLOR, fPopupZ );
			else
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, colNas, fPopupZ );
		}
		break;

	default:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( 2 ), fPopupZ );
		}
	}

	// Flush all render text queue
	_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
}

// ----------------------------------------------------------------------------
// Name : RenderObjectIndexPopup()
// Desc : Character, npc and item must use ska...
// ----------------------------------------------------------------------------
void CUIManager::RenderObjectIndexPopup( CProjection3D* pprProjection )
{
	// If game state is not on game
	if( m_ugsGameState != UGS_GAMEON )
		return;

	// Blinking name popup for pk
	static BOOL		bHideName = TRUE;
	static __int64	llOldTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	static __int64	llElapsedTime = 0;
	__int64			llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
	llElapsedTime += llCurTime - llOldTime;
	llOldTime = llCurTime;
	if( llElapsedTime > 500 )
	{
		bHideName = !bHideName;
		do
		{
			llElapsedTime -= 500;
		}
		while( llElapsedTime > 500 );
	}
	COLOR	colNameBlend;
	if( bHideName ) colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * ( 1.0f - ( (FLOAT)llElapsedTime / 500.0f ) ) );
	else colNameBlend = 0xFFFFFF00 | COLOR( 0x3C + 0xC3 * ( (FLOAT)llElapsedTime / 500.0f ) );

	// Get font size
	int	nBoxWidth, nTextSX, nTextSY, nChatMsgLines, nShopMsgLines;
	int	nFontWidth = _pUIFontTexMgr->GetFontWidth() + _pUIFontTexMgr->GetFontSpacing();
	int	nFontHeight = _pUIFontTexMgr->GetLineHeight();

	extern INDEX	g_iShowName;
	extern INDEX	g_iShowNameItem;
	CTString		strName, strTemp;
	CEntity			*penObject;
	CModelInstance	*pmi;
	FLOAT3D			vObjectPos, vViewPos, vPopupPos, vObjCenter;
	FLOATaabbox3D	boxModel;
	int				nColIndex, nLevelDiff, nPopupY;
	FLOAT			fRadius, fHeight, fX, fZ, fPopupZ, fSqrDist;
	FLOAT			fSqrDistance = g_iShowName * OPTION_NAME_DISTANCE;
	FLOAT			fSqrDistanceItem = g_iShowNameItem * OPTION_NAME_DISTANCE;
	fSqrDistance *= fSqrDistance;
	fSqrDistanceItem *= fSqrDistanceItem;

	////////////////////////////////////////////////////////////////////////
	// Show name of npc
	if( g_iShowName > 0 )
	{
		INDEX	ctMob = _pNetwork->ga_srvServer.srv_amtMob.Count();
		INDEX iObj;
		for(  iObj = 0; iObj < ctMob; iObj++ ) 
		{
			// Get target mob
			CMobTarget	&mt = _pNetwork->ga_srvServer.srv_amtMob[iObj];
			penObject = mt.mob_pEntity;

			if (penObject->IsFlagOff(ENF_ALIVE))
				continue;

			ASSERT( penObject != NULL );
			vObjectPos = penObject->en_plPlacement.pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistance )
				continue;

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			// Get box region
			strName.PrintF( "%s C%d S%d L%d", mt.mob_Name, mt.mob_iClientIndex, mt.mob_Index, mt.mob_yLayer );
			nBoxWidth = strName.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			// Add render regions
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// ł»°ˇ ¶§·ČŔ»¶§ łŞżŔ´Â µĄąĚÁö???
			ShowDamageList( vPopupPos, fPopupZ, mt.mob_iClientIndex );

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 2;

			if( mt.IsNPC() )
			{
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
											GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
			}
			else
			{
				nLevelDiff = mt.mob_iLevel - _pNetwork->MyCharacterInfo.level;
				if( nLevelDiff > 5 ) nColIndex = 0;
				else if( nLevelDiff > 2 ) nColIndex = 1;
				else if( nLevelDiff > -3 ) nColIndex = 2;
				else if( nLevelDiff > -6 ) nColIndex = 3;
				else nColIndex = 4;
				m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
											GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );
			}

			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}

		////////////////////////////////////////////////////////////////////////
		// Show Pet Name
		INDEX	ctPet = _pNetwork->ga_srvServer.srv_actPet.Count();
		for( iObj = 0; iObj < ctPet; iObj++ ) 
		{
			// Get target mob
			CPetTarget	&pt = _pNetwork->ga_srvServer.srv_actPet[iObj];
			penObject = pt.pet_pEntity;

			ASSERT( penObject != NULL );
			vObjectPos = penObject->en_plPlacement.pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistance )
				continue;

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			// Get box region
			if( pt.pet_strNameCard.Length() >0 )
				strName.PrintF( "%s C%d S%d L%d", pt.pet_strNameCard, pt.pet_iClientIndex, pt.pet_Index, pt.pet_yLayer );
			else
				strName.PrintF( "%s C%d S%d L%d", pt.pet_Name, pt.pet_iClientIndex, pt.pet_Index, pt.pet_yLayer );
			nBoxWidth = strName.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			// Add render regions
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 2;

			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( 5 ), fPopupZ );			

			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}

		////////////////////////////////////////////////////////////////////////
		// Show WildPet Name
		INDEX	ctWildPet = _pNetwork->ga_srvServer.srv_actWildPet.Count();
		for( iObj = 0; iObj < ctWildPet; iObj++ ) 
		{
			// Get target mob
			CWildPetInfo	&pt = _pNetwork->ga_srvServer.srv_actWildPet[iObj];
			penObject = pt.pet_pEntity;

			ASSERT( penObject != NULL );
			vObjectPos = penObject->en_plPlacement.pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistance )
				continue;

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			// Get box region
			strName.PrintF( "%s", pt.m_strName);
			nBoxWidth = strName.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			// Add render regions
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 2;

			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( 5 ), fPopupZ );			

			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}


		////////////////////////////////////////////////////////////////////////
		// Show Slave Name
		INDEX	ctSlave = _pNetwork->ga_srvServer.srv_actSlave.Count();
		for( iObj = 0; iObj < ctSlave; iObj++ ) 
		{
			// Get target mob
			CSlaveTarget	&st = _pNetwork->ga_srvServer.srv_actSlave[iObj];
			penObject = st.slave_pEntity;

			ASSERT( penObject != NULL );
			vObjectPos = penObject->en_plPlacement.pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistance )
				continue;

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			// Get box region
			strName.PrintF( "%s C%d S%d L%d", st.slave_Name, st.slave_iClientIndex, st.slave_Index, st.slave_yLayer );
			nBoxWidth = strName.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			// Add render regions
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// ł»°ˇ ¶§·ČŔ»¶§ łŞżŔ´Â µĄąĚÁö???
			ShowDamageList( vPopupPos, fPopupZ, st.slave_iClientIndex );

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 2;

			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( 5 ), fPopupZ );			

			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}
	}

	////////////////////////////////////////////////////////////////////////
	// Show name of item
	if( g_iShowNameItem > 0 )
	{
		INDEX	ctItem = _pNetwork->ga_srvServer.srv_aitItem.Count();
		for( INDEX iObj = 0; iObj < ctItem; iObj++ ) 
		{
			// Get target mob
			CItemTarget	&it = _pNetwork->ga_srvServer.srv_aitItem[iObj];
			penObject = it.item_pEntity;

			if( penObject == NULL )
				continue;
			vObjectPos = penObject->en_plPlacement.pl_PositionVector;

			// Test distance
			fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
			fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
			fSqrDist = fX * fX + fZ * fZ;
			if( fSqrDist > fSqrDistanceItem )
				continue;

			// Get frame box
			pmi = penObject->GetModelInstance();
			ASSERT( pmi != NULL );
			pmi->GetAllFramesBBox( boxModel );
			boxModel.StretchByVector( pmi->mi_vStretch );
			fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
			fRadius = fHeight * 0.5f;

			// Frustum test
			vObjCenter = vObjectPos;
			vObjCenter(2) += fRadius;
			pprProjection->PreClip( vObjCenter, vViewPos );
			if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
				continue;

			// Object point to screen point
			vObjectPos(2) += fHeight;
			pprProjection->PreClip( vObjectPos, vViewPos );
			pprProjection->PostClip( vViewPos, vPopupPos );
			fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
						* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

			COLOR colNas = GetTargetInfo()->GetNameColor( 5 );
			// Get box region
			if( it.item_llCount > 1 )
			{
				strTemp.PrintF( "%I64d", it.item_llCount );
				InsertCommaToString( strTemp );
				colNas = GetNasColor( it.item_llCount );
				strName.PrintF( "%s(%s) C%d S%d", it.item_Name, strTemp, it.item_iClientIndex, it.item_Index );
			}
			else
			{
				strName.PrintF( "%s C%d S%d", it.item_Name, it.item_iClientIndex, it.item_Index );
			}
			nBoxWidth = strName.Length() * nFontWidth + 13;
			m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcName.Right = m_rcName.Left + nBoxWidth;
			m_rcName.Bottom = vPopupPos(2) - 7;
			m_rcName.Top = m_rcName.Bottom - 15;

			// Set popup texture
			m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

			// Add render regions
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );

			// Render all elements
			m_pUIDrawPort->FlushRenderingQueue();

			// Text
			nTextSX = m_rcName.Left + 7;
			nTextSY = m_rcName.Top + 1;

			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, colNas, fPopupZ );
			// Flush all render text queue
			_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
		}
	}

	////////////////////////////////////////////////////////////////////////
	// Show name & chatting of character
	INDEX	ctCha = _pNetwork->ga_srvServer.srv_actCha.Count();
	for( INDEX iObj = 0; iObj < ctCha; iObj++ ) 
	{
		// Get target character
		CCharacterTarget	&ct = _pNetwork->ga_srvServer.srv_actCha[iObj];
		penObject = ct.cha_pEntity;
		nChatMsgLines = ct.ChatMsg.GetCount();

		// Invisibility buff
		if( ct.cha_statusEffect.GetStatus() & ( 1L << EST_ASSIST_INVISIBLE ) )
			continue;

		ASSERT( penObject != NULL );
		vObjectPos = penObject->en_plPlacement.pl_PositionVector;

		// Test distance
		fX = vObjectPos(1) - _pNetwork->MyCharacterInfo.x;
		fZ = vObjectPos(3) - _pNetwork->MyCharacterInfo.z;
		fSqrDist = fX * fX + fZ * fZ;
		if( nChatMsgLines == 0 && ct.cha_sbShopType == PST_NOSHOP &&
			ct.GetPkState() == CHA_PVP_STATE_PEACE && fSqrDist > fSqrDistance )
			continue;

		// Get frame box
		pmi = penObject->GetModelInstance();
		ASSERT( pmi != NULL );
		pmi->GetAllFramesBBox( boxModel );
		boxModel.StretchByVector( pmi->mi_vStretch );
		fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
		fRadius = fHeight * 0.5f;

		// Frustum test
		vObjCenter = vObjectPos;
		vObjCenter(2) += fRadius;
		pprProjection->PreClip( vObjCenter, vViewPos );
		if( pprProjection->TestSphereToFrustum( vViewPos, fRadius ) < 0 )
			continue;

		// Object point to screen point
		vObjectPos(2) += fHeight;
		pprProjection->PreClip( vObjectPos, vViewPos );
		pprProjection->PostClip( vViewPos, vPopupPos );
		fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
					* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

		// Get box region
		strName.PrintF( "%s C%d S%d", ct.cha_strName, ct.cha_iClientIndex, ct.cha_Index );
		if( ct.cha_state == 0 )
			nBoxWidth = strName.Length() * nFontWidth + 13;
		else
			nBoxWidth = strName.Length() * nFontWidth + 27;
		m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
		m_rcName.Right = m_rcName.Left + nBoxWidth;
		m_rcName.Bottom = vPopupPos(2) - 7;
		m_rcName.Top = m_rcName.Bottom - 15;
		nPopupY = m_rcName.Top;

		// Set popup texture
		m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

		// Add render regions
		if( ct.IsLegitimate() )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, 0xFFFFFFFF, fPopupZ );
		}
		else if( ct.GetPkState() == CHA_PVP_STATE_PEACE )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
		}
		else		// PK
		{
			COLOR	colBlend = 0xFFFFFFFF;
			if( ct.GetPkState() == CHA_PVP_STATE_RELEASE )
				colBlend = colNameBlend;

			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colBlend, fPopupZ );
		}

		nShopMsgLines = 0;
		if( ct.cha_sbShopType != PST_NOSHOP )
		{
			nShopMsgLines = ct.ShopMsg.GetCount();

			nBoxWidth = ct.ShopMsg.GetWidth();
			m_rcShop.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcShop.Right = m_rcShop.Left + nBoxWidth;

			if( ct.cha_sbShopType & PST_PREMIUM )
			{
				m_rcShop.Bottom = nPopupY - 18;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top - 13, m_rcShop.Left, m_rcShop.Top,
											m_rtShopPremLU.U0, m_rtShopPremLU.V0, m_rtShopPremLU.U1, m_rtShopPremLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 13, m_rcShop.Right, m_rcShop.Top,
											m_rtShopPremUp.U0, m_rtShopPremUp.V0, m_rtShopPremUp.U1, m_rtShopPremUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 13, m_rcShop.Right + 13, m_rcShop.Top,
											m_rtShopPremRU.U0, m_rtShopPremRU.V0, m_rtShopPremRU.U1, m_rtShopPremRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopPremL.U0, m_rtShopPremL.V0, m_rtShopPremL.U1, m_rtShopPremL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopPremC.U0, m_rtShopPremC.V0, m_rtShopPremC.U1, m_rtShopPremC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 13, m_rcShop.Bottom,
											m_rtShopPremR.U0, m_rtShopPremR.V0, m_rtShopPremR.U1, m_rtShopPremR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 13,
											m_rtShopPremLL.U0, m_rtShopPremLL.V0, m_rtShopPremLL.U1, m_rtShopPremLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 13,
											m_rtShopPremLo.U0, m_rtShopPremLo.V0, m_rtShopPremLo.U1, m_rtShopPremLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 13, m_rcShop.Bottom + 13,
											m_rtShopPremRL.U0, m_rtShopPremRL.V0, m_rtShopPremRL.U1, m_rtShopPremRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top - 8;
			}
			else
			{
				m_rcShop.Bottom = nPopupY - 10;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top - 5, m_rcShop.Left, m_rcShop.Top,
											m_rtShopLU.U0, m_rtShopLU.V0, m_rtShopLU.U1, m_rtShopLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 5, m_rcShop.Right, m_rcShop.Top,
											m_rtShopUp.U0, m_rtShopUp.V0, m_rtShopUp.U1, m_rtShopUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 5, m_rcShop.Right + 5, m_rcShop.Top,
											m_rtShopRU.U0, m_rtShopRU.V0, m_rtShopRU.U1, m_rtShopRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopL.U0, m_rtShopL.V0, m_rtShopL.U1, m_rtShopL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopC.U0, m_rtShopC.V0, m_rtShopC.U1, m_rtShopC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 5, m_rcShop.Bottom,
											m_rtShopR.U0, m_rtShopR.V0, m_rtShopR.U1, m_rtShopR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 5,
											m_rtShopLL.U0, m_rtShopLL.V0, m_rtShopLL.U1, m_rtShopLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 5,
											m_rtShopLo.U0, m_rtShopLo.V0, m_rtShopLo.U1, m_rtShopLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 5, m_rcShop.Bottom + 5,
											m_rtShopRL.U0, m_rtShopRL.V0, m_rtShopRL.U1, m_rtShopRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top;
			}
		}

		if( nChatMsgLines > 0 )
		{
			nBoxWidth = ct.ChatMsg.GetWidth();
			m_rcChat.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcChat.Right = m_rcChat.Left + nBoxWidth;
			m_rcChat.Bottom = nPopupY - 10;
			m_rcChat.Top = m_rcChat.Bottom - nChatMsgLines * nFontHeight;
			nPopupY = m_rcChat.Top;

			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top - 5, m_rcChat.Left, m_rcChat.Top,
										m_rtChatLU.U0, m_rtChatLU.V0, m_rtChatLU.U1, m_rtChatLU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top - 5, m_rcChat.Right, m_rcChat.Top,
										m_rtChatUp.U0, m_rtChatUp.V0, m_rtChatUp.U1, m_rtChatUp.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top - 5, m_rcChat.Right + 5, m_rcChat.Top,
										m_rtChatRU.U0, m_rtChatRU.V0, m_rtChatRU.U1, m_rtChatRU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top, m_rcChat.Left, m_rcChat.Bottom,
										m_rtChatL.U0, m_rtChatL.V0, m_rtChatL.U1, m_rtChatL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top, m_rcChat.Right, m_rcChat.Bottom,
										m_rtChatC.U0, m_rtChatC.V0, m_rtChatC.U1, m_rtChatC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top, m_rcChat.Right + 5, m_rcChat.Bottom,
										m_rtChatR.U0, m_rtChatR.V0, m_rtChatR.U1, m_rtChatR.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Bottom, m_rcChat.Left, m_rcChat.Bottom + 5,
										m_rtChatLL.U0, m_rtChatLL.V0, m_rtChatLL.U1, m_rtChatLL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Bottom, m_rcChat.Right, m_rcChat.Bottom + 5,
										m_rtChatLo.U0, m_rtChatLo.V0, m_rtChatLo.U1, m_rtChatLo.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Bottom, m_rcChat.Right + 5, m_rcChat.Bottom + 5,
										m_rtChatRL.U0, m_rtChatRL.V0, m_rtChatRL.U1, m_rtChatRL.V1, 0xFFFFFFFF, fPopupZ );
		}

		// Render all elements
		m_pUIDrawPort->FlushRenderingQueue();

		// Text
		nTextSX = m_rcName.Left + 7;
		nTextSY = m_rcName.Top + 1;
		// Title
		if( ct.cha_pkstate < -9 ) nColIndex = 11;
		else if( ct.cha_pkstate > 9 ) nColIndex = 7;
		else nColIndex = 9;
		// PK
		if( ct.GetPkState() != CHA_PVP_STATE_PEACE )
			nColIndex--;
		m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
									GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );

		if( nShopMsgLines > 0 )
		{
			nTextSX = m_rcShop.Left + 1;
			nTextSY = m_rcShop.Top + 1;
			for( int i = 0; i < nShopMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( ct.ShopMsg.GetString( i ), nTextSX, nTextSY,
											ct.ShopMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}
		}

		if( nChatMsgLines > 0 )
		{
			nTextSX = m_rcChat.Left + 1;
			nTextSY = m_rcChat.Top + 1;
			for( int i = 0; i < nChatMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( ct.ChatMsg.GetString( i ), nTextSX, nTextSY,
											ct.ChatMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}

			__int64	llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
			if( llCurTime - ct.ChatMsg.GetTime() > CHATMSG_TIME_DELAY || fSqrDist > CHATMSG_SQRDIST )
				ct.ChatMsg.Reset();
		}

		// Flush all render text queue
		_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
	}

	////////////////////////////////////////////////////////////////////////
	// My character
	nChatMsgLines = _pNetwork->MyCharacterInfo.ChatMsg.GetCount();
	if( g_iShowName > 0 || nChatMsgLines > 0 || _pNetwork->MyCharacterInfo.sbShopType != PST_NOSHOP ||
		_pNetwork->MyCharacterInfo.pk_mode != 0 )
	{
		penObject = CEntity::GetPlayerEntity( 0 );
		vObjectPos = penObject->en_plPlacement.pl_PositionVector;

		// Get frame box
		pmi = penObject->GetModelInstance();
		ASSERT( pmi != NULL );
		pmi->GetAllFramesBBox( boxModel );
		boxModel.StretchByVector( pmi->mi_vStretch );
		fHeight = boxModel.maxvect(2) - boxModel.minvect(2);
		fRadius = fHeight * 0.5f;

		// Object point to screen point
		vObjectPos(2) += fHeight;
		pprProjection->PreClip( vObjectPos, vViewPos );
		pprProjection->PostClip( vViewPos, vPopupPos );
		fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
					* pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

		// Get box region
		if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
			nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 13;
		else
			nBoxWidth = _pNetwork->MyCharacterInfo.name.Length() * nFontWidth + 27;
		m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
		m_rcName.Right = m_rcName.Left + nBoxWidth;
		m_rcName.Bottom = vPopupPos(2) - 7;
		m_rcName.Top = m_rcName.Bottom - 15;
		nPopupY = m_rcName.Top;

		// Set popup texture
		m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

		// Add render regions
		/*if( _pNetwork->MyCharacterInfo.pk_mode == 3 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRDefPK1.U0, m_rtNameRDefPK1.V0, m_rtNameRDefPK1.U1, m_rtNameRDefPK1.V1, 0xFFFFFFFF, fPopupZ );
		}
		else */if( _pNetwork->MyCharacterInfo.pk_mode == 0 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
		}
		else
		{
			COLOR	colBlend = 0xFFFFFFFF;
			if( _pNetwork->MyCharacterInfo.pk_mode == 2 )
				colBlend = colNameBlend;

			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colBlend, fPopupZ );
		}

		nShopMsgLines = 0;
		if( _pNetwork->MyCharacterInfo.sbShopType != PST_NOSHOP )
		{
			nShopMsgLines = _pNetwork->MyCharacterInfo.ShopMsg.GetCount();

			nBoxWidth = _pNetwork->MyCharacterInfo.ShopMsg.GetWidth();
			m_rcShop.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcShop.Right = m_rcShop.Left + nBoxWidth;

			if( _pNetwork->MyCharacterInfo.sbShopType & PST_PREMIUM )
			{
				m_rcShop.Bottom = nPopupY - 18;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top - 13, m_rcShop.Left, m_rcShop.Top,
											m_rtShopPremLU.U0, m_rtShopPremLU.V0, m_rtShopPremLU.U1, m_rtShopPremLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 13, m_rcShop.Right, m_rcShop.Top,
											m_rtShopPremUp.U0, m_rtShopPremUp.V0, m_rtShopPremUp.U1, m_rtShopPremUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 13, m_rcShop.Right + 13, m_rcShop.Top,
											m_rtShopPremRU.U0, m_rtShopPremRU.V0, m_rtShopPremRU.U1, m_rtShopPremRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopPremL.U0, m_rtShopPremL.V0, m_rtShopPremL.U1, m_rtShopPremL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopPremC.U0, m_rtShopPremC.V0, m_rtShopPremC.U1, m_rtShopPremC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 13, m_rcShop.Bottom,
											m_rtShopPremR.U0, m_rtShopPremR.V0, m_rtShopPremR.U1, m_rtShopPremR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 13, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 13,
											m_rtShopPremLL.U0, m_rtShopPremLL.V0, m_rtShopPremLL.U1, m_rtShopPremLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 13,
											m_rtShopPremLo.U0, m_rtShopPremLo.V0, m_rtShopPremLo.U1, m_rtShopPremLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 13, m_rcShop.Bottom + 13,
											m_rtShopPremRL.U0, m_rtShopPremRL.V0, m_rtShopPremRL.U1, m_rtShopPremRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top - 8;
			}
			else
			{
				m_rcShop.Bottom = nPopupY - 10;
				m_rcShop.Top = m_rcShop.Bottom - nShopMsgLines * nFontHeight;

				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top - 5, m_rcShop.Left, m_rcShop.Top,
											m_rtShopLU.U0, m_rtShopLU.V0, m_rtShopLU.U1, m_rtShopLU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top - 5, m_rcShop.Right, m_rcShop.Top,
											m_rtShopUp.U0, m_rtShopUp.V0, m_rtShopUp.U1, m_rtShopUp.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top - 5, m_rcShop.Right + 5, m_rcShop.Top,
											m_rtShopRU.U0, m_rtShopRU.V0, m_rtShopRU.U1, m_rtShopRU.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Top, m_rcShop.Left, m_rcShop.Bottom,
											m_rtShopL.U0, m_rtShopL.V0, m_rtShopL.U1, m_rtShopL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Top, m_rcShop.Right, m_rcShop.Bottom,
											m_rtShopC.U0, m_rtShopC.V0, m_rtShopC.U1, m_rtShopC.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Top, m_rcShop.Right + 5, m_rcShop.Bottom,
											m_rtShopR.U0, m_rtShopR.V0, m_rtShopR.U1, m_rtShopR.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left - 5, m_rcShop.Bottom, m_rcShop.Left, m_rcShop.Bottom + 5,
											m_rtShopLL.U0, m_rtShopLL.V0, m_rtShopLL.U1, m_rtShopLL.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Left, m_rcShop.Bottom, m_rcShop.Right, m_rcShop.Bottom + 5,
											m_rtShopLo.U0, m_rtShopLo.V0, m_rtShopLo.U1, m_rtShopLo.V1, 0xFFFFFFFF, fPopupZ );
				m_pUIDrawPort->AddTexture( m_rcShop.Right, m_rcShop.Bottom, m_rcShop.Right + 5, m_rcShop.Bottom + 5,
											m_rtShopRL.U0, m_rtShopRL.V0, m_rtShopRL.U1, m_rtShopRL.V1, 0xFFFFFFFF, fPopupZ );

				nPopupY = m_rcShop.Top;
			}
		}

		if( nChatMsgLines > 0 )
		{
			nBoxWidth = _pNetwork->MyCharacterInfo.ChatMsg.GetWidth();
			m_rcChat.Left = vPopupPos(1) - nBoxWidth / 2;
			m_rcChat.Right = m_rcChat.Left + nBoxWidth;
			m_rcChat.Bottom = nPopupY - 10;
			m_rcChat.Top = m_rcChat.Bottom - nChatMsgLines * nFontHeight;
			nPopupY = m_rcChat.Top;

			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top - 5, m_rcChat.Left, m_rcChat.Top,
										m_rtChatLU.U0, m_rtChatLU.V0, m_rtChatLU.U1, m_rtChatLU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top - 5, m_rcChat.Right, m_rcChat.Top,
										m_rtChatUp.U0, m_rtChatUp.V0, m_rtChatUp.U1, m_rtChatUp.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top - 5, m_rcChat.Right + 5, m_rcChat.Top,
										m_rtChatRU.U0, m_rtChatRU.V0, m_rtChatRU.U1, m_rtChatRU.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Top, m_rcChat.Left, m_rcChat.Bottom,
										m_rtChatL.U0, m_rtChatL.V0, m_rtChatL.U1, m_rtChatL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Top, m_rcChat.Right, m_rcChat.Bottom,
										m_rtChatC.U0, m_rtChatC.V0, m_rtChatC.U1, m_rtChatC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Top, m_rcChat.Right + 5, m_rcChat.Bottom,
										m_rtChatR.U0, m_rtChatR.V0, m_rtChatR.U1, m_rtChatR.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left - 5, m_rcChat.Bottom, m_rcChat.Left, m_rcChat.Bottom + 5,
										m_rtChatLL.U0, m_rtChatLL.V0, m_rtChatLL.U1, m_rtChatLL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Left, m_rcChat.Bottom, m_rcChat.Right, m_rcChat.Bottom + 5,
										m_rtChatLo.U0, m_rtChatLo.V0, m_rtChatLo.U1, m_rtChatLo.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcChat.Right, m_rcChat.Bottom, m_rcChat.Right + 5, m_rcChat.Bottom + 5,
										m_rtChatRL.U0, m_rtChatRL.V0, m_rtChatRL.U1, m_rtChatRL.V1, 0xFFFFFFFF, fPopupZ );
		}

		// Show Damage 
		ShowDamageList( vPopupPos, fPopupZ, CEntity::GetPlayerEntity( 0 )->en_ulID );

		// Render all elements
		m_pUIDrawPort->FlushRenderingQueue();

		// Text
		nTextSX = m_rcName.Left + 7;
		nTextSY = m_rcName.Top + 1;
		// Title
		if( _pNetwork->MyCharacterInfo.pkpenalty < -9 ) nColIndex = 11;
		else if( _pNetwork->MyCharacterInfo.pkpenalty > 9 ) nColIndex = 7;
		else nColIndex = 9;
		// PK
		if( _pNetwork->MyCharacterInfo.pk_mode != 0 )
			nColIndex--;
		m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.name, nTextSX, nTextSY,
									GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );

		if( nShopMsgLines > 0 )
		{
			nTextSX = m_rcShop.Left + 1;
			nTextSY = m_rcShop.Top + 1;
			for( int i = 0; i < nShopMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.ShopMsg.GetString( i ), nTextSX, nTextSY,
											_pNetwork->MyCharacterInfo.ShopMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}
		}

		if( nChatMsgLines > 0 )
		{
			nTextSX = m_rcChat.Left + 1;
			nTextSY = m_rcChat.Top + 1;
			for( int i = 0; i < nChatMsgLines; i++ )
			{
				m_pUIDrawPort->PutTextEx( _pNetwork->MyCharacterInfo.ChatMsg.GetString( i ), nTextSX, nTextSY,
											_pNetwork->MyCharacterInfo.ChatMsg.GetColor(), fPopupZ );
				nTextSY += nFontHeight;
			}

			__int64	llCurTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
			if( llCurTime - _pNetwork->MyCharacterInfo.ChatMsg.GetTime() > CHATMSG_TIME_DELAY )
				_pNetwork->MyCharacterInfo.ChatMsg.Reset();
		}

		// Flush all render text queue
		_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
	}

	// If over target is not exist
	if( !_pNetwork->_TargetInfoReal.bIsActive || _pNetwork->_TargetInfoReal.pen_pEntity == NULL )
		return;

	// Get target
	penObject = _pNetwork->_TargetInfoReal.pen_pEntity;

	ASSERT( penObject != NULL );
	vObjectPos = penObject->en_plPlacement.pl_PositionVector;

	// Get frame box
	pmi = penObject->GetModelInstance();
	ASSERT( pmi != NULL );

	pmi->GetAllFramesBBox( boxModel );
	boxModel.StretchByVector( pmi->mi_vStretch );

	// Object point to screen point
	vObjectPos(2) += boxModel.maxvect(2) - boxModel.minvect(2);
	pprProjection->PreClip( vObjectPos, vViewPos );
	pprProjection->PostClip( vViewPos, vPopupPos );
	fPopupZ = ( 1 - pprProjection->pr_fDepthBufferFactor / vViewPos(3) )
				 * pprProjection->pr_fDepthBufferMul + pprProjection->pr_fDepthBufferAdd;

	COLOR colNas = GetTargetInfo()->GetNameColor( 2 );

	// Get name
	if( _pNetwork->_TargetInfoReal.TargetType == ITEM &&
		_pNetwork->_TargetInfoReal.llCount > 1 )
	{
		strTemp.PrintF( "%I64d", _pNetwork->_TargetInfoReal.llCount );
		InsertCommaToString( strTemp );
		colNas = GetNasColor( _pNetwork->_TargetInfoReal.llCount );
		strName.PrintF( "%s(%s)", _pNetwork->_TargetInfoReal.TargetName, strTemp );
	}
	else
		strName.PrintF( "%s", _pNetwork->_TargetInfoReal.TargetName );

	// Get box region
	if( _pNetwork->_TargetInfoReal.TargetType == CHARACTER )
	{
		if( _pNetwork->_TargetInfoReal.PkMode == 0 )
			nBoxWidth = strName.Length() * nFontWidth + 13;
		else
			nBoxWidth = strName.Length() * nFontWidth + 27;
	}
	else
		nBoxWidth = strName.Length() * nFontWidth + 13;

	m_rcName.Left = vPopupPos(1) - nBoxWidth / 2;
	m_rcName.Right = m_rcName.Left + nBoxWidth;
	m_rcName.Bottom = vPopupPos(2) - 7;
	m_rcName.Top = m_rcName.Bottom - 15;

	// Set popup texture
	m_pUIDrawPort->InitTextureData( m_ptdPopupTexture, FALSE, PBT_BLEND, TRUE );

	// Add render regions
	if( _pNetwork->_TargetInfoReal.TargetType == CHARACTER )
	{
		if( _pNetwork->_TargetInfoReal.PkMode == 3 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRDefPK2.U0, m_rtNameRDefPK2.V0, m_rtNameRDefPK2.U1, m_rtNameRDefPK2.V1, 0xFFFFFFFF, fPopupZ );
		}
		else if( _pNetwork->_TargetInfoReal.PkMode == 0 )
		{
			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
		}
		else
		{
			COLOR	colBlend = 0xFFFFFFFF;
			if( _pNetwork->_TargetInfoReal.PkMode == 2 )
				colBlend = colNameBlend;

			m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
										m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 16, m_rcName.Bottom,
										m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, colBlend, fPopupZ );
			m_pUIDrawPort->AddTexture( m_rcName.Right - 16, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
										m_rtNameRPK.U0, m_rtNameRPK.V0, m_rtNameRPK.U1, m_rtNameRPK.V1, colBlend, fPopupZ );
		}
	}
	else
	{
		m_pUIDrawPort->AddTexture( m_rcName.Left, m_rcName.Top, m_rcName.Left + 2, m_rcName.Bottom,
									m_rtNameL.U0, m_rtNameL.V0, m_rtNameL.U1, m_rtNameL.V1, 0xFFFFFFFF, fPopupZ );
		m_pUIDrawPort->AddTexture( m_rcName.Left + 2, m_rcName.Top, m_rcName.Right - 2, m_rcName.Bottom,
									m_rtNameC.U0, m_rtNameC.V0, m_rtNameC.U1, m_rtNameC.V1, 0xFFFFFFFF, fPopupZ );
		m_pUIDrawPort->AddTexture( m_rcName.Right - 2, m_rcName.Top, m_rcName.Right, m_rcName.Bottom,
									m_rtNameR.U0, m_rtNameR.V0, m_rtNameR.U1, m_rtNameR.V1, 0xFFFFFFFF, fPopupZ );
	}

	// Render all elements
	m_pUIDrawPort->FlushRenderingQueue();

	// Text
	nTextSX = m_rcName.Left + 7;
	nTextSY = m_rcName.Top + 1;
	switch( _pNetwork->_TargetInfoReal.TargetType )
	{
	case MOB:
		{
			nLevelDiff = _pNetwork->_TargetInfoReal.iLevel - _pNetwork->MyCharacterInfo.level;
			if( nLevelDiff > 5 ) nColIndex = 0;
			else if( nLevelDiff > 2 ) nColIndex = 1;
			else if( nLevelDiff > -3 ) nColIndex = 2;
			else if( nLevelDiff > -6 ) nColIndex = 3;
			else nColIndex = 4;
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );
		}
		break;

	case NPC:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
		}
		break;

	case PET:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
				GetTargetInfo()->GetNameColor( 5 ), fPopupZ );
		}
		break;

	case CHARACTER:
		{
			// Title
			if( _pNetwork->_TargetInfoReal.PkState < -9 ) nColIndex = 11;
			else if( _pNetwork->_TargetInfoReal.PkState > 9 ) nColIndex = 7;
			else nColIndex = 9;
			// PK
			if( _pNetwork->_TargetInfoReal.PkMode != 0 )
				nColIndex--;
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( nColIndex ), fPopupZ );
		}
		break;

	case ITEM:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY, colNas, fPopupZ );
		}
		break;

	default:
		{
			m_pUIDrawPort->PutTextEx( strName, nTextSX, nTextSY,
										GetTargetInfo()->GetNameColor( 2 ), fPopupZ );
		}
	}

	// Flush all render text queue
	_pUIMgr->GetDrawPort()->EndTextEx( TRUE );
}

// ----------------------------------------------------------------------------
// Name : RearrangeOrder()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::RearrangeOrder( int nCurrentUI, BOOL bFrontOrder )
{
	// Already rearranged
	if( ( bFrontOrder && m_aUIOrder[0] == nCurrentUI ) ||
		( !bFrontOrder && !m_apUIs[nCurrentUI]->IsEnabled() ) )
		return;

	// Find order of current UI & reset focus state
	INDEX iSelOrder = 0;
	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if( m_aUIOrder[iUI] == nCurrentUI )
			iSelOrder = iUI;
		else
			m_apUIs[m_aUIOrder[iUI]]->SetFocus( FALSE );
	}

	// Rearrange
	if( bFrontOrder )
	{
		for( INDEX iUI = iSelOrder; iUI > 0; iUI-- )
			m_aUIOrder[iUI] = m_aUIOrder[iUI - 1];
		m_aUIOrder[0] = nCurrentUI;
		GetUI( nCurrentUI )->SetVisible( TRUE );
		GetUI( nCurrentUI )->SetEnable( TRUE );
	}
	else
	{

#ifdef HELP_SYSTEM_1
// [KH_070426] 3Â÷ µµżň¸» °ü·Ă Ăß°ˇ
		if(_pUIMgr->GetHelp3()->IsEnabled() && _pUIMgr->GetHelp3()->m_pMammyWnd == m_apUIs[nCurrentUI])
			RearrangeOrder(UI_HELP3, FALSE);
#endif

		// Find index of last UI
		INDEX iLastUI;
		for(  iLastUI = 0; iLastUI < UI_TYPE_END; iLastUI++ )
		{
			if( !m_apUIs[m_aUIOrder[iLastUI]]->IsEnabled() )
				break;
		}

		GetUI( nCurrentUI )->SetVisible( FALSE );
		GetUI( nCurrentUI )->SetEnable( FALSE );
		if( iLastUI == 0 ) return;

		for( INDEX iUI = iSelOrder + 1; iUI < iLastUI; iUI++ )
			m_aUIOrder[iUI - 1] = m_aUIOrder[iUI];
		m_aUIOrder[iLastUI - 1] = nCurrentUI;
	}

	// Set focus of first window
	m_apUIs[m_aUIOrder[0]]->SetFocus( TRUE );
}


void CUIManager::ChangeOrder( int nCurrentUI, int nOrder )
{
	INDEX iSelOrder = 0;
	for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		if( m_aUIOrder[iUI] == nCurrentUI )
		{
			iSelOrder = iUI;
			break;
		}
	}

	int nDis = nOrder -iSelOrder;

	int nCur =iSelOrder;
	if( nDis<0)
	{
		for(int i=0; i>nDis; --i)	
		{
			int temp =m_aUIOrder[nCur];
			m_aUIOrder[nCur] =m_aUIOrder[nCur-1];
			m_aUIOrder[nCur-1] = temp;
			--nCur;
		}
	}
	else if( nDis >0)
	{
		for(int i=0; i<nDis; ++i)
		{
			int temp =m_aUIOrder[nCur];
			m_aUIOrder[nCur] =m_aUIOrder[nCur+1];
			m_aUIOrder[nCur+1] = temp;
			++nCur;
		}
	}
}


// ----------------------------------------------------------------------------
// Name : SetUIGameState()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::SetUIGameState( UIGameState ugsGameState )
{
	m_ugsGameState = ugsGameState;

	if( _bWorldEditorApp )
		return;

	if( ugsGameState == UGS_GAMELOADING )
		Reset();

	for( int iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
	{
		m_aUIOrder[iUI] = iUI;
		m_apUIs[iUI]->SetEnable( FALSE );
		m_apUIs[iUI]->SetVisible( FALSE );
	}

	if( ugsGameState == UGS_LOGIN )
	{
		RECT	rectClient;
		GetClientRect( _hwndMain, &rectClient );
		POINT	pt;
		pt.x = 0;	pt.y = 0;
		ClientToScreen( _hwndMain, &pt );
		OffsetRect( &rectClient, pt.x, pt.y );

		// remember mouse pos
		GetCursorPos( &(_pInput->inp_ptOldMousePos) );
		// set mouse clip region
		//ClipCursor( &rectClient );
		// determine screen center position
		_pInput->inp_slScreenCenterX = ( rectClient.left + rectClient.right ) / 2;
		_pInput->inp_slScreenCenterY = ( rectClient.top + rectClient.bottom ) / 2;

		// clear button's buffer
		memset( _abKeysPressed, 0, sizeof( _abKeysPressed ) );
		
		// remember current status
		_pInput->inp_bInputEnabled = TRUE;
		_pInput->inp_bPollJoysticks = FALSE;

		// Set type of cursor
		GetMouseCursor()->SetCursorType( UMCT_NORMAL );

		// ·Î±×ŔÎ Č°ĽşČ­.
		GetLogin()->Reset();
		RearrangeOrder( UI_LOGIN, TRUE );
	
	}
	else if( ugsGameState == UGS_SELSERVER)
	{
		// ·Î±×ŔÎ şńČ°ĽşČ­ Ľ­ąö Ľ±ĹĂ Č°ĽşČ­
		GetLogin()->Reset();

		//GetSelServer()->Reset();
		RearrangeOrder( UI_SEL_SERVER, TRUE );

	}
	else if( ugsGameState == UGS_SELCHAR )
	{
		GetLogin()->Reset();

		GetSelChar()->Reset();
		RearrangeOrder( UI_SEL_CHAR, TRUE );

		GetOption()->SetEnable( TRUE );
	}
	else if( ugsGameState == UGS_CREATECHAR )
	{
		GetLogin()->Reset();
		GetSelChar()->Reset();
		GetCreateChar()->Reset();

		RearrangeOrder( UI_CREATE_CHAR, TRUE );
	}
	else if( ugsGameState == UGS_GAMEON )
	{
		RECT	rectClient;
		GetClientRect( _hwndMain, &rectClient );
		POINT	pt;
		pt.x = 0;	pt.y = 0;
		ClientToScreen( _hwndMain, &pt );
		OffsetRect( &rectClient, pt.x, pt.y );

		// remember mouse pos
		//GetCursorPos( &(_pInput->inp_ptOldMousePos) );
		// set mouse clip region
		//ClipCursor( &rectClient );
		// determine screen center position
		_pInput->inp_slScreenCenterX = ( rectClient.left + rectClient.right ) / 2;
		_pInput->inp_slScreenCenterY = ( rectClient.top + rectClient.bottom ) / 2;

		// clear button's buffer
		memset( _abKeysPressed, 0, sizeof( _abKeysPressed ) );

		GetLogin()->Reset();
		GetSelChar()->Reset();
		//GetCreateChar()->Reset();
		int iUI;
		for(  iUI = UI_ALWAYS_SHOW_START; iUI < UI_ALWAYS_SHOW_END; iUI++ )
		{
			m_apUIs[iUI]->SetEnable( TRUE );
			m_apUIs[iUI]->SetVisible( TRUE );
		}

		for( iUI = UI_SELECTIVE_SHOW_START; iUI < UI_SELECTIVE_SHOW_END; iUI++ )
			m_apUIs[iUI]->SetEnable( TRUE );

		RearrangeOrder( UI_PLAYERINFO, TRUE );
		m_apUIs[UI_PLAYERINFO]->SetFocus( TRUE );

		_pGameState->GetGameMode() = CGameState::GM_NETWORK;	

// ÁÖĽ®Ăł¸® : ·ÎµůŔĚ żĎ·áµČČÄ Ľ­ąöżˇĽ­ ¸ŢĽĽÁö ąŢµµ·Ď ĽöÁ¤ÇÔ.
// Date : 2005-11-03(żŔČÄ 2:03:57), By Lee Ki-hwan

		// °ÔŔÓ ·Îµů˝Ă UIµĄŔĚĹÍ  ĽÂĆĂČÄ UIManagerżˇĽ­ UIĽÂĆĂŔ» ĂĘ±âČ­ ÇŘąö¸˛...
		//if( GetGuildBattle()->IsInBattle() ) GetGuildBattle()->SetVisible ( TRUE );
		//if( _pUISWDoc->IsWar() ) GetSiegeWarfare()->SetVisible ( TRUE );
		//if( GetBilling()->GetVisible() ) GetBilling()->SetVisible( TRUE );
		
		/*if( m_nShowMessageBox > 0 )
		{
			_pUIMgr->CloseMessageBox( MSGCMD_SIEGE_WARFARE_MOVEING_CONFIRM );
				
			_pUIMgr->m_nShowMessageBox = MSGCMD_SIEGE_WARFARE_MOVEING_CONFIRM;
		
			CUIMsgBox_Info	MsgBoxInfo;	
			CTString		strMessage;
			
			MsgBoxInfo.SetMsgBoxInfo(  _S( 2071, "°řĽşÁöżŞ ŔĚµż" ), UMBS_YESNO, UI_NONE, MSGCMD_SIEGE_WARFARE_MOVEING_CONFIRM );	
			strMessage.PrintF( _S( 2072, "°řĽş ˝ĂŔŰ ÁöÁˇŔ¸·Î ŔĚµżÇĎ˝Ă°Ú˝Ŕ´Ď±î?" ) );
			MsgBoxInfo.AddString( strMessage );
			_pUIMgr->CreateMessageBox( MsgBoxInfo );
			_pUIMgr->m_nShowMessageBox = -1;
		}
		*/

		GetMessenger()->SetMyInfo( _pNetwork->MyCharacterInfo.index, 
									_pNetwork->MyCharacterInfo.name,
									(eJob)_pNetwork->MyCharacterInfo.job,
									ONLINE );
	}
	//wooss 050822 
	else if( ugsGameState == UGS_UI_TEST )
	{
		// TEST UI Č°ĽşČ­.
//		_pUIMgr->GetSelectList()->CreateSelectList(SLS_OK|SLS_CANCEL|SLS_PREV|SLS_NEXT,10);
		RearrangeOrder( _pUIMgr->m_testUI_TYPE, TRUE );

			
	}
}

// ----------------------------------------------------------------------------
// Name : SetKeyFromMsg()
// Desc :
// ----------------------------------------------------------------------------
static void SetKeyFromMsg( MSG *pMsg, BOOL bDown )
{
	INDEX iKID = -1;
	// if capturing scan codes
	if( inp_iKeyboardReadingMethod == 2 )
	{
		INDEX iScan = ( pMsg->lParam >> 16 ) & 0x1FF;
		iKID = _aiScanToKid[iScan];
	}
	// if capturing virtual key codes
	else if( inp_iKeyboardReadingMethod == 1 )
	{
		// get virtualkey
		INDEX iVirt = (pMsg->wParam)&0xFF;

		if( iVirt == VK_SHIFT )
			iVirt = VK_LSHIFT;
		else if( iVirt == VK_CONTROL )
			iVirt = VK_LCONTROL;
		else if (iVirt == VK_MENU)
			iVirt = VK_LMENU;

		iKID = _aiVirtToKid[iVirt];
	}
	// if not capturing
	else
	{
		// do nothing
		return;
	}

	if( iKID >= 0 && iKID < ARRAYCOUNT( _abKeysPressed ) )
	{
		_abKeysPressed[iKID] = bDown;
	}
}

// ----------------------------------------------------------------------------
// Name : MsgProc()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::MsgProc( MSG *pMsg, BOOL *pbIMEProc )
{
	if( _bWorldEditorApp )
		return;

	static BOOL	bNeedCharMsg = TRUE;

//°­µżąÎ ĽöÁ¤ ˝ĂŔŰ ˝Ă˝şĹŰ ¸¶żě˝ş ŔŰľ÷	09.09
// NOTE : UIMouseCursor.cppżÍ Ç×»ó °°µµ·Ď ŔŻÁö.
//#define TEXTURE_CURSOR
#ifndef TEXTURE_CURSOR
	// Get current mouse position
	if( pMsg->message >= WM_MOUSEFIRST && pMsg->message <= WM_MOUSELAST )
	{
		_pInput->inp_ptMousePos.x = LOWORD(pMsg->lParam);
		_pInput->inp_ptMousePos.y = HIWORD(pMsg->lParam);	
		GetMouseCursor()->SetCursorType();
	}
#endif
//°­µżąÎ ĽöÁ¤ łˇ ˝Ă˝şĹŰ ¸¶żě˝ş ŔŰľ÷		09.09

	extern INDEX	g_iEnterChat;

// ŔĚ±âČŻ ĽöÁ¤ ˝ĂŔŰ (11. 15) : IME ¸ŢĽĽÁö Ăł¸®
	*pbIMEProc = false;
	_bIMEProc = false;

	if ( pMsg->message == WM_IME_COMPOSITION		// IME message
		|| pMsg->message == WM_IME_STARTCOMPOSITION 
		|| pMsg->message == WM_IME_ENDCOMPOSITION
		|| pMsg->message == WM_IME_NOTIFY
		|| pMsg->message == WM_INPUTLANGCHANGE
		|| pMsg->message == WM_INPUTLANGCHANGEREQUEST
		|| pMsg->message == WM_SYSKEYDOWN )
	{
		WMSG_RESULT wmsgResult;

		if( m_apUIs[m_aUIOrder[0]]->IsEnabled() )
		{
			if ( ( wmsgResult = m_apUIs[m_aUIOrder[0]]->IMEMessage( pMsg ) ) != WMSG_FAIL ) 
			{
				if ( wmsgResult == WMSG_SUCCESS )
				{
					_bIMEProc = *pbIMEProc = true;
				}
				return;
			}
		}

		if( g_iEnterChat == 0 && GetChatting()->IsEnabled() )
		{
			RearrangeOrder( UI_CHATTING, TRUE );
			GetChatting()->GetInputBox().SetFocus( TRUE );
			
			if( ( wmsgResult = GetChatting()->IMEMessage( pMsg ) ) != WMSG_FAIL )
			{
				if ( wmsgResult == WMSG_SUCCESS )
				{
					_bIMEProc = *pbIMEProc = true;
				
				}
				return;
			}
		}
	}
// ŔĚ±âČŻ ĽöÁ¤ łˇ 

	switch( pMsg->message )
	{
	_pUIMgr->m_mPosX = LOWORD( pMsg->lParam );
	_pUIMgr->m_mPosY = HIWORD( pMsg->lParam );
	case WM_MOUSEMOVE:
		{
			m_bMouseInsideUIs = FALSE;

			// Move holding button
			if( !m_btnHoldBtn.IsEmpty() )
			{
				int	nOffset = BTN_SIZE / 2; 
				m_btnHoldBtn.SetPos( _pInput->inp_ptMousePos.x - nOffset,
										_pInput->inp_ptMousePos.y - nOffset );
			}

			for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}
		}
		break;

	case WM_LBUTTONDOWN:
		{
			if( !m_btnHoldBtn.IsEmpty() )
			{
				ResetHoldBtn();
				return;
			}
			INDEX iUI;
			for(  iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() && m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

			// Kill focus of edit box
			for( iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
				m_apUIs[iUI]->KillFocusEditBox();

			// ´Ů¸Ą pcłŞ npc ¶Ç´Â ´Ů¸Ą ÁöżŞŔ» ¸¶żě˝ş·Î Ĺ¬¸Ż˝Ă ľĘľĆ ŔÖ´Ů¸é Ľ­±â.
			if( ((CPlayerEntity*)CEntity::GetPlayerEntity(0) )->IsSitting() && 
				!((CPlayerEntity*)CEntity::GetPlayerEntity(0) )->IsActionSitting() )
			{
				_pUIMgr->GetCharacterInfo()->UseAction( 3 );
				return;
			}

			_abKeysPressed[KID_MOUSE1] = TRUE;
		}
		break;

	case WM_LBUTTONDBLCLK:
		{
			for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

			// ´Ů¸Ą pcłŞ npc ¶Ç´Â ´Ů¸Ą ÁöżŞŔ» ¸¶żě˝ş·Î Ĺ¬¸Ż˝Ă ľĘľĆ ŔÖ´Ů¸é Ľ­±â.
			if( ((CPlayerEntity*)CEntity::GetPlayerEntity(0) )->IsSitting() && 
				!((CPlayerEntity*)CEntity::GetPlayerEntity(0) )->IsActionSitting() )
			{
				_pUIMgr->GetCharacterInfo()->UseAction( 3 );
				return;
			}

			_abKeysPressed[KID_MOUSE1] = TRUE;
		}
		break;

	case WM_LBUTTONUP:
		{
			for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

			if( !m_btnHoldBtn.IsEmpty() )
			{
				// Drop item
				if( m_btnHoldBtn.GetWhichUI() == UI_INVENTORY && !IsCSFlagOn(CSF_WAREHOUSE) )
					DropItem( m_btnHoldBtn.GetItemTab(), m_btnHoldBtn.GetItemRow(),	m_btnHoldBtn.GetItemCol() );

				// Remove button in quick slot
				if( m_btnHoldBtn.GetWhichUI() == UI_QUICKSLOT )
					GetQuickSlot()->RemoveBtn( m_btnHoldBtn.GetBtnID() );

				ResetHoldBtn();
				return;
			}

			_abKeysPressed[KID_MOUSE1] = FALSE;
		}
		break;

	case WM_MOUSEWHEEL:
		{
			POINT	pt;
			pt.x = LOWORD( pMsg->lParam );
			pt.y = HIWORD( pMsg->lParam );
			ScreenToClient( _hwndMain, &pt );
			pMsg->lParam = MAKEWPARAM( pt.x, pt.y );

			for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
					return;
			}

			INDEX iWheelValue = SWORD( HIWORD( pMsg->wParam ) );
			_iMouseZ += iWheelValue;
			_pInput->m_WheelPos = iWheelValue;
		}
		break;

	case WM_CHAR:				// Fot edit box
		{
			if( bNeedCharMsg )
			{
				if( g_iEnterChat )
				{
					for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
					{
						INDEX	iCurUI = m_aUIOrder[iUI];
						if( !m_apUIs[iCurUI]->IsEnabled() )
							break;
						if( m_apUIs[iCurUI]->CharMessage( pMsg ) != WMSG_FAIL )
							return;
					}
				}
				else
				{
					if( m_apUIs[m_aUIOrder[0]]->IsEnabled() )
					{
						if ( m_apUIs[m_aUIOrder[0]]->CharMessage( pMsg ) != WMSG_FAIL )
							return;
					}

					if( GetChatting()->IsEnabled() )
					{
						RearrangeOrder( UI_CHATTING, TRUE );
						GetChatting()->GetInputBox().SetFocus( TRUE );

						if( GetChatting()->CharMessage( pMsg ) != WMSG_FAIL )
							return;
					}
				}
			}
		}
		break;

	case WM_IME_KEYDOWN	:	// ŔĚ±âČŻ Ăß°ˇ (11.15)
	case WM_KEYDOWN:		// For short cut and edit box
		{
			// ŔĚ±âČŻ ĽöÁ¤ ˝ĂŔŰ  (11.19) : WM_CHAR ·Î ŔĚµż˝Ă żµą®ŔÚ ą«˝Ă ÇĎ´Â °Í ąćÁö¸¦ Ŕ§ÇŘ									
			if ( pMsg->wParam == VK_PROCESSKEY ) 
			{
				if( m_ugsGameState == UGS_GAMEON && g_iEnterChat &&
					GetPlayerInfo()->ProcessShortCut( pMsg ) )
				{
					// Kill focus of edit box
					for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
						m_apUIs[iUI]->KillFocusEditBox();

					bNeedCharMsg = FALSE;
				}

				_bIMEProc = *pbIMEProc = true; 
				return;
			}
			// ŔĚ±âČŻ ĽöÁ¤ łˇ

			for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
			{
				INDEX	iCurUI = m_aUIOrder[iUI];
				if( !m_apUIs[iCurUI]->IsEnabled() )
					break;
				if( m_apUIs[iCurUI]->KeyMessage( pMsg ) != WMSG_FAIL )
				{
					bNeedCharMsg = FALSE;
					return;
				}
			}

			if( m_ugsGameState == UGS_GAMEON )
			{
				// Short cut
				if( GetPlayerInfo()->ProcessShortCut( pMsg ) )
				{
					// Kill focus of edit box
					for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
						m_apUIs[iUI]->KillFocusEditBox();

					bNeedCharMsg = FALSE;
					return;
				}
				// Cancel ( skill, target etc... )
				else if( pMsg->wParam == VK_ESCAPE )
				{
					// 1.2.3 : ŔĚ±âČŻ ĽöÁ¤ (04.12.29) : ESC±â´É Ăß°ˇ

					// 1. żŁĹÍ ĂĽĆĂ ŔĎ °ćżě ĂĽĆĂ Ć÷Äż˝ş ĂëĽŇ 
					if ( g_iEnterChat )
					{
						if ( GetChatting()->GetInputBox().IsFocused() )
						{
							GetChatting()->GetInputBox().SetFocus( FALSE );
							return;
						}
					}

					CEntity* penPlEntity;
					CPlayerEntity* penPlayerEntity;
					penPlEntity = CEntity::GetPlayerEntity(0); //Äł¸ŻĹÍ ŔÚ±â ŔÚ˝Ĺ
					penPlayerEntity = (CPlayerEntity*) penPlEntity;
					
					// FIXME : RearrangeOrderżˇ ş¸¸é Á¦ŔĎ Ŕ§żˇ ¶° ŔÖ´Â Ŕ©µµżě¸¦ ľË Ľö ŔÖÁö¸¸,
					// FIXME : UIWindowżˇ CloseÇÔĽöµµ ľř±¸, łŞ¸ÓÁö UIµéżˇ CLoseÇÔĽö°ˇ ´Ů Á¦°˘°˘ŔĚ¶óĽ­ Ăł¸®ÇĎ±â ľÖ¸ĹÇÔ.
					// FiXME : ŔĎ´ÜŔş ŔÎşĄĹä¸®żÍ Äł¸ŻĹÍ ŔÎĆ÷¸¸ ´Ýµµ·Ď ŔÓ˝ĂŔűŔ¸·Î Ăł¸®ÇÔ.
					if( GetInventory()->IsVisible() || GetCharacterInfo()->IsVisible() )
					{
						if( GetInventory()->IsVisible() )						
							GetInventory()->ToggleVisible();

						if( GetCharacterInfo()->IsVisible() )
							GetCharacterInfo()->ToggleVisible();

						bNeedCharMsg = FALSE;
						return;
					}	
					
					//escĹ°·Î °Ĺ·ˇ ´ëÇŕ°ú ľĆŔĚ¸®˝ş »óÁˇŔ» ´ÝŔ»Ľö ŔÖµµ·Ď Ăß°ˇ
					if( GetCashShop()->IsVisible() )
					{
						GetCashShop()->CloseCashShop();

						bNeedCharMsg = FALSE;
						return;
					}

					if( GetAuction()->IsVisible() )
					{
						GetAuction()->CloseAuction();

						bNeedCharMsg = FALSE;
						return;
					}


					//2. ESC·Î µżŔŰ Á¤Áö µÇ´Â Player µżŔŰŔĚ Č°ĽşČ­ µÇľî ŔÖŔ» °ćżě ĂëĽŇ 
					if ( penPlayerEntity->CheckEscKey() )
					{
						if( IsCSFlagOn( CSF_TELEPORT ) )
						{
							_pNetwork->SendWarpCancel();
						}
						else
						{							
							CancelSkill(TRUE);
						}
					}
					else  // 3. Áľ·áĂ˘ ¶çżň
					{
						GetSystemMenu()->ToggleVisible ();
					}

					bNeedCharMsg = FALSE;
					return;
				}
			}

			bNeedCharMsg = TRUE;
			if( g_iEnterChat || _abKeysPressed[KID_LALT] || _abKeysPressed[KID_LCONTROL] ||
				pMsg->wParam == VK_CONTROL || pMsg->wParam == VK_SHIFT ||
				( pMsg->wParam >= VK_PRIOR && pMsg->wParam <= VK_DOWN ) )
			{
				SetKeyFromMsg( pMsg, TRUE );
			}
		}
		break;

	case WM_KEYUP:
		{
			// For Capture Screen
			if( pMsg->wParam == VK_SNAPSHOT )
			{
				if(m_pGame)
				{
					m_pGame->CaptureScreen();
				}			
			}
			// Ĺ°´­¸° »óĹÂ¸¦ Č®ŔÎÇĎ±â Ŕ§ÇŘĽ­ µÎ°łŔÇ UI¸¸ żążÜĂł¸®			
			if( m_apUIs[UI_MAP]->IsEnabled() )
			{
				if( m_apUIs[UI_MAP]->KeyMessage( pMsg ) != WMSG_FAIL )
				{
					bNeedCharMsg = FALSE;
					return;
				}
			}

			if( m_apUIs[UI_RADAR]->IsEnabled() )
			{
				if( m_apUIs[UI_RADAR]->KeyMessage( pMsg ) != WMSG_FAIL )
				{
					bNeedCharMsg = FALSE;
					return;
				}
			}
			

			bNeedCharMsg = TRUE;
			SetKeyFromMsg( pMsg, FALSE );
		}
		break;

	case WM_RBUTTONDOWN:
		{
			if( m_ugsGameState == UGS_GAMEON )
			{
				for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
				{
					INDEX	iCurUI = m_aUIOrder[iUI];
					if( !m_apUIs[iCurUI]->IsEnabled() )
						break;
					if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->MouseMessage( pMsg ) != WMSG_FAIL )
						return;
				}

				_abKeysPressed[KID_MOUSE2] = TRUE;
				m_bRButtonDown = TRUE;
			}
		}
		break;

	case WM_RBUTTONDBLCLK:
		{
			if( m_ugsGameState == UGS_GAMEON )
			{
				_abKeysPressed[KID_MOUSE2] = TRUE;
				m_bRButtonDown = TRUE;
			}
		}
		break;

	case WM_RBUTTONUP:
		{
			_abKeysPressed[KID_MOUSE2] = FALSE;
			m_bRButtonDown = FALSE;
		}
		break;

	case WM_MBUTTONDOWN:
	case WM_MBUTTONDBLCLK:
		{
			_abKeysPressed[KID_MOUSE3] = TRUE;
		}
		break;

	case WM_MBUTTONUP:
		{
			_abKeysPressed[KID_MOUSE3] = FALSE;
		}
		break;

	case WM_SYSKEYDOWN:
		{
			// F10
			if( m_ugsGameState == UGS_GAMEON && pMsg->wParam == VK_F10 )
			{
				GetQuickSlot()->UseQuickSlot( 9 );

				// Kill focus of edit box
				for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
					m_apUIs[iUI]->KillFocusEditBox();

				return;
			}
			// Short cut
			else if( _abKeysPressed[KID_LALT] )
			{
				if( m_ugsGameState == UGS_GAMEON && GetPlayerInfo()->ProcessShortCut( pMsg ) )
				{
					// Kill focus of edit box
					for( INDEX iUI = UI_TYPE_START; iUI < UI_TYPE_END; iUI++ )
						m_apUIs[iUI]->KillFocusEditBox();
				}

				return;
			}

			SetKeyFromMsg( pMsg, TRUE );
		}
		break;

	case WM_SYSKEYUP:
		{
			bNeedCharMsg = TRUE;
			SetKeyFromMsg( pMsg, FALSE );
		}
		break;

	case WM_SETCURSOR:			//°­µżąÎ ĽöÁ¤ ˝ĂŔŰ ˝Ă˝şĹŰ ¸¶żě˝ş ŔŰľ÷	09.09
		{
			GetMouseCursor()->SetCursorType();
		}
		break;					//°­µżąÎ ĽöÁ¤ łˇ ˝Ă˝şĹŰ ¸¶żě˝ş ŔŰľ÷		09.09
	}
}

// ----------------------------------------------------------------------------
// Name : IsInsideUpperUIs()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::IsInsideUpperUIs( INDEX iCurUIIndex, int nX, int nY )
{
	INDEX iCurUIOrder;
	for(  iCurUIOrder = UI_TYPE_START; iCurUIOrder < UI_TYPE_END; iCurUIOrder++ )
	{
		if( iCurUIIndex == m_aUIOrder[iCurUIOrder] )
			break;
	}

	for( INDEX iUIOrder = UI_TYPE_START; iUIOrder < iCurUIOrder; iUIOrder++ )
	{
		INDEX	iCurUI = m_aUIOrder[iUIOrder];
		if( m_apUIs[iCurUI]->IsVisible() &&	m_apUIs[iCurUI]->IsInside( nX, nY ) )
			return TRUE;
	}

	return FALSE;
}

#ifdef HELP_SYSTEM_1
// wooss 070324 --------------------------------------------------->>
// kw : WSS_HELP_SYSTEM_1
void CUIManager::LoadHelp1Data( const CTFileName &fnString )
{
	if( m_aHelp1Data.Count() > 0 )
		return;

	CTFileStream	fsString;
	fsString.Open_t( fnString );

	char	szTemp[4096];
	INDEX	iIndex, iLength;
	INDEX	iLastIndex = 0;
	INDEX	iTotalCount = 0;

	fsString >> iTotalCount;
	fsString >> iLastIndex;
	m_aHelp1Data.New( iLastIndex + 1 );

	for( INDEX i = 0; i < iTotalCount; i++ )
	{
		// index
		fsString >> iIndex;
		m_aHelp1Data[iIndex].m_index = iIndex;

		// name
		fsString >> iLength;
		if( iLength > 0 )
		{
			fsString.Read_t( szTemp, iLength );
			szTemp[iLength] = NULL;
			m_aHelp1Data[iIndex].m_strName = szTemp;
		}
		// desc
		fsString >> iLength;
		if( iLength > 0 )
		{
			fsString.Read_t( szTemp, iLength );
			szTemp[iLength] = NULL;
			m_aHelp1Data[iIndex].m_strDesc = szTemp;
		}
		// subNum
		fsString >> m_aHelp1Data[iIndex].m_subNum;
		// subLevel
		fsString >> m_aHelp1Data[iIndex].m_subLevel;
		// subEnable -> set false
		m_aHelp1Data[iIndex].m_subEnable = 0;
		// pic file name
		fsString >> iLength;

		if( iLength > 0 )
		{
			fsString.Read_t( szTemp, iLength );
			szTemp[iLength] = NULL;
			m_aHelp1Data[iIndex].m_strFile = szTemp;
		}
		// pic uv, width/height
		fsString >> m_aHelp1Data[iIndex].m_uv_x;
		fsString >> m_aHelp1Data[iIndex].m_uv_y;
		fsString >> m_aHelp1Data[iIndex].m_width;
		fsString >> m_aHelp1Data[iIndex].m_height;

	}

}
// -----------------------------------------------------------------<<
#endif

// ----------------------------------------------------------------------------
// Name : Reset()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::LoadStringData( const CTFileName &fnString )
{
	if( m_aStringData.Count() > 0 )
		return;

	CTFileStream	fsString;
	fsString.Open_t( fnString );

	char	szTemp[1024];
	INDEX	iIndex, iLength;
	INDEX	iLastIndex = 0;
	INDEX	iTotalCount = 0;
	INDEX	iLastReadIndex = 0;

	fsString >> iTotalCount;
	fsString >> iLastIndex;
	m_aStringData.New( iLastIndex + 1 );

	for( INDEX i = 0; iLastReadIndex < iLastIndex; i++ )
	{
		fsString >> iIndex;
		iLastReadIndex = iIndex;
		fsString >> iLength;

		if( iLength > 0 )
		{
			fsString.Read_t( szTemp, iLength );
			szTemp[iLength] = NULL;
			m_aStringData[iIndex] = szTemp;
		}
	}

	_pGameState->m_astrErrorMsg[MSG_FAIL_MANY_CONNECT] = GetString( 1 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_WRONG_VERSION] = GetString( 2 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_WRONG_CHAR] = GetString( 3 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_WRONG_PASSWORD] = GetString( 4 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_ALREADY_CONNECT] = GetString( 6 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_CONNECT_SERVER] = GetString( 7 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BLOCK_CHAR] = GetString( 8 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_CHECK_CHAR] = GetString( 9 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_SYSTEM_ERROR] = GetString( 10 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_NOT_EXIST_CHAR] = GetString( 11 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_ALREADY_NAME] = GetString( 12 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_NEW_CHAR] = GetString( 13 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_FULL_CHAR] = GetString( 14 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_NOT_EXIST_CHAR] = GetString( 15 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_DB_UNKNOWN] = GetString( 16 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_NOT_PAY] = GetString( 17 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_NOT_RIGHT] = GetString( 18 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_TIME_OUT] = GetString( 19 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_ALREADY_CONNECT] = GetString( 20 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_OVER_IP] = GetString( 21 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_TIME_NOT_ENOUGH] = GetString( 22 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_TIME_OUT_DISCONNECT] = GetString( 23 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_OTHER] = GetString( 24 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_WRONGPW] = GetString( 25 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_BILLING_BLOCKED] = GetString( 26 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_MSGR_TIMEOUT_WHISPER] = GetString( 27 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_MSGR_NOT_FOUND_CHAR] = GetString( 28 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGIN_SERVER] = GetString( 29 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_MANY_CONNECT] = GetString( 30 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_WRONG_VERSION] = (const char*)"Cliente desatualizado, feche o jogo e execute o launcher!";//GetString( 31 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_WRONG_CHAR] = GetString( 32 );
	// FIXME : ľĎČŁżˇ Ŕß¸řµČ ą®ŔÚ Ć÷ÇÔ ¸ŢĽĽÁö şŻ°ć.
	//_pGameState->m_astrErrorMsg[31] = GetString( 33 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_WRONG_PASSWORD] = GetString( 4 );
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_ALREADY_CONNECT] = GetString( 34 );			// MSG_FAIL_LOGINSERV_ALREADY_CONNECT
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_BLOCK_CHAR] = GetString( 35 );			// MSG_FAIL_LOGINSERV_BLOCK_CHAR
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_CHECK_CHAR] = GetString( 36 );			// MSG_FAIL_LOGINSERV_CHECK_CHAR
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_SYSTEM_ERROR] = GetString( 37 );			// MSG_FAIL_LOGINSERV_SYSTEM_ERROR
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_NOT_EXIST_CHAR] = GetString( 38 );			// MSG_FAIL_LOGINSERV_NOT_EXIST_CHAR
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_NO_SERVICE] = _S( 528, "Ľ­şń˝ş ±â°ŁŔĚ ľĆ´Ő´Ď´Ů." );	// MSG_FAIL_LOGINSERV_NO_SERVICE	
	_pGameState->m_astrErrorMsg[MSG_FAIL_WRONG_IDENTIFICATION] = GetString( 39 );			// MSG_FAIL_TEST_WRONG
	_pGameState->m_astrErrorMsg[MSG_NOT_IN_ZONE] = GetString( 40 );			// MSG_NOT_IN_ZONE
	_pGameState->m_astrErrorMsg[MSG_FAIL_ENABLE_AREA] = CTString("Enable area msg error");		// MSG_FAIL_ENABLE_AREA
	_pGameState->m_astrErrorMsg[MSG_FAIL_CANNT_ENABLE_AREA] = CTString("area can't enable msg error");	// MSG_FAIL_CANNT_ENABLE_AREA
																								// wooss 050824
	_pGameState->m_astrErrorMsg[MSG_FAIL_NOTLEVEL_FORDELETE] = CTString("Something wrong, This charater can't delete");	// MSG_FAIL_DELETE_CHARATER (cause level is high(5))
	_pGameState->m_astrErrorMsg[MSG_TIME_OUT] = GetString( 41 );			// TIME_OUT
	_pGameState->m_astrErrorMsg[MSG_FAIL_LOGINSERV_BLOCK_USER] = GetString(4116);	//ttos_080410 : şę¶óÁú şńąĐąřČŁ 3Č¸ Á¦ÇŃ

	JobInfo().SetName( TITAN, GetString( 43 ) );
	JobInfo().SetName( KNIGHT, GetString( 44 ) );
	JobInfo().SetName( HEALER, GetString( 45 ) );
	JobInfo().SetName( MAGE, GetString( 46 ) );
	JobInfo().SetName( ROGUE, GetString( 47 ) );
	JobInfo().SetName( SORCERER, GetString( 48 ) );
	
	JobInfo().SetExtensionName( KNIGHT, 0, _S( 1188, "·Îż­ łŞŔĚĆ®" ) );	
	JobInfo().SetExtensionName( KNIGHT, 1, _S( 1189, "ĹŰÇĂ łŞŔĚĆ®" ) );	
	JobInfo().SetExtensionName( TITAN, 0, _S( 1190, "ÇĎŔĚ·Ł´ő" ) );		
	JobInfo().SetExtensionName( TITAN, 1, _S( 1191, "żö ¸¶˝şĹÍ" ) );	
	JobInfo().SetExtensionName( HEALER, 0, _S( 1192, "ľĆĂł" ) );		
	JobInfo().SetExtensionName( HEALER, 1, _S( 1193, "Ĺ¬·ą¸Ż" ) );		
	JobInfo().SetExtensionName( MAGE, 0, _S( 1194, "Ŕ§ŔÚµĺ" ) );		
	JobInfo().SetExtensionName( MAGE, 1, _S( 1195, "Ŕ§Äˇ" ) );			
	JobInfo().SetExtensionName( ROGUE, 0, _S( 1196, "ľî˝Ř˝Ĺ" ) );		
	JobInfo().SetExtensionName( ROGUE, 1, _S( 1197, "·ąŔÎŔú" ) );		
	JobInfo().SetExtensionName( SORCERER, 0, _S(2324, "ż¤¸®¸ŕĹ» ¸®˝şĆ®" ) );
	JobInfo().SetExtensionName( SORCERER, 1, _S(2325, "˝şĆäĽČ ¸®˝şĆ®" ) );
}

// ----------------------------------------------------------------------------
// Name : CompareFinalConsonant()
// Desc :
// ----------------------------------------------------------------------------
static BOOL	CompareFinalConsonant( INDEX iComp )
{
	for( INDEX i = 0; i < COMP_DIGIT_COUNT; i++ )
	{
		if( aiCompDigit[i] == iComp )
			return TRUE;
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : CompareFinalConsonant()
// Desc :
// ----------------------------------------------------------------------------
static BOOL	CompareFinalConsonant( char szComp[2] )
{
	for( INDEX i = 0; i < COMP_STRING_COUNT; i++ )
	{
		if( (char)aszCompString[i][0] == szComp[0] && (char)aszCompString[i][1] == szComp[1] )
			return TRUE;
	}

	return FALSE;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, INDEX iSrc )
{
	ASSERT( iIndex < m_aStringData.Count() );

	extern INDEX	g_iCountry;
	if( g_iCountry != KOREA )
		return m_aStringData[iIndex];

	static const CTString	strReplace[4] = { "<¸¦>", "<°ˇ>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°ˇ", "żÍ", "´Â" };
	static const CTString	strReplace2[4] = { "Ŕ»", "ŔĚ", "°ú", "Ŕş" };
	static CTString			strOrig;

	strOrig = m_aStringData[iIndex];

	if( CompareFinalConsonant( iSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, const char *szSrc )
{
	ASSERT( iIndex < m_aStringData.Count() );

	
	if( g_iCountry != KOREA )
		return m_aStringData[iIndex];

	static const CTString	strReplace[4] = { "<¸¦>", "<°ˇ>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°ˇ", "żÍ", "´Â" };
	static const CTString	strReplace2[4] = { "Ŕ»", "ŔĚ", "°ú", "Ŕş" };
	static CTString			strOrig;
	char					szCompSrc[2];
	INDEX					iLength;

	strOrig = m_aStringData[iIndex];

	iLength = strlen( szSrc );
	szCompSrc[0] = szSrc[iLength - 2];
	szCompSrc[1] = szSrc[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, const CTString &strSrc )
{
	ASSERT( iIndex < m_aStringData.Count() );

	
	if( g_iCountry != KOREA )
		return m_aStringData[iIndex];

	static const CTString	strReplace[4] = { "<¸¦>", "<°ˇ>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°ˇ", "żÍ", "´Â" };
	static const CTString	strReplace2[4] = { "Ŕ»", "ŔĚ", "°ú", "Ŕş" };
	static CTString			strOrig;
	char					szCompSrc[2];
	INDEX					iLength;

	strOrig = m_aStringData[iIndex];

	iLength = strSrc.Length();
	szCompSrc[0] = strSrc[iLength - 2];
	szCompSrc[1] = strSrc[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, const char *szSrc1, const char *szSrc2 )
{
	ASSERT( iIndex < m_aStringData.Count() );

	
	if( g_iCountry != KOREA )
		return m_aStringData[iIndex];

	static const CTString	strReplace[4] = { "<¸¦>", "<°ˇ>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°ˇ", "żÍ", "´Â" };
	static const CTString	strReplace2[4] = { "Ŕ»", "ŔĚ", "°ú", "Ŕş" };
	static CTString			strOrig;
	char					szCompSrc[2];
	INDEX					iLength;

	strOrig = m_aStringData[iIndex];

	iLength = strlen( szSrc1 );
	szCompSrc[0] = szSrc1[iLength - 2];
	szCompSrc[1] = szSrc1[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				break;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				break;
		}
	}

	iLength = strlen( szSrc2 );
	szCompSrc[0] = szSrc2[iLength - 2];
	szCompSrc[1] = szSrc2[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

// ----------------------------------------------------------------------------
// Name : GetString()
// Desc :
// ----------------------------------------------------------------------------
CTString & CUIManager::GetString( INDEX iIndex, const CTString &strSrc1, const CTString &strSrc2 )
{
	ASSERT( iIndex < m_aStringData.Count() );

	
	if( g_iCountry != KOREA )
		return m_aStringData[iIndex];

	static const CTString	strReplace[4] = { "<¸¦>", "<°ˇ>", "<°ú>", "<´Â>" };
	static const CTString	strReplace1[4] = { "¸¦", "°ˇ", "żÍ", "´Â" };
	static const CTString	strReplace2[4] = { "Ŕ»", "ŔĚ", "°ú", "Ŕş" };
	static CTString			strOrig;
	char					szCompSrc[2];
	INDEX					iLength;

	strOrig = m_aStringData[iIndex];

	iLength = strSrc1.Length();
	szCompSrc[0] = strSrc1[iLength - 2];
	szCompSrc[1] = strSrc1[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				break;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				break;
		}
	}

	iLength = strSrc2.Length();
	szCompSrc[0] = strSrc2[iLength - 2];
	szCompSrc[1] = strSrc2[iLength - 1];
	if( CompareFinalConsonant( szCompSrc ) )
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace1[i] ) )
				return strOrig;
		}
	}
	else
	{
		for( INDEX i = 0; i < 4; i++ )
		{
			if( strOrig.ReplaceSubstr( strReplace[i], strReplace2[i] ) )
				return strOrig;
		}
	}

	return strOrig;
}

//°­µżąÎ ĽöÁ¤ ˝ĂŔŰ ´ŮÁß °ř°Ý ŔŰľ÷	09.06
// ----------------------------------------------------------------------------
// Name : Reset()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::Reset()
{
	m_nShowMessageBox = -1;

	// Portal
	GetPortal()->Close();

	// Shop
	GetShop()->ResetShop();

	// Personal Shop
	GetPersonalShop()->ResetShop();

	// Exchange
	GetExchange()->ResetExchange();

	// Refine
	GetRefine()->CloseRefine();

	// Unlock inventory
	GetInventory()->Lock( FALSE, FALSE, LOCK_NONE );

	// Unlock requesting quest
	//GetCharacterInfo()->UnlockQuest();
	CUIQuestBook::UnlockQuest();

	// Unlock using stat point
	GetCharacterInfo()->UnlockStatPoint();

	GetMessenger()->Reset();

	// Find message box and close it
	int iUI;
	for(  iUI = UI_MESSAGEBOX_START; iUI < UI_MESSAGEBOX_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled())
		{
			((CUIMessageBox *)m_apUIs[iUI])->InitMessageBox();
		}
	}
	for( iUI = UI_MESSAGEBOXL_START; iUI < UI_MESSAGEBOXL_END; iUI++ )
	{
		if( m_apUIs[iUI]->IsEnabled())
		{
			((CUIMessageBoxL *)m_apUIs[iUI])->InitMessageBox();
		}
	}

	m_nCoolTimeReductionRate =0;
	m_nNeedMPReductionRate =0;
}
//°­µżąÎ ĽöÁ¤ łˇ ´ŮÁß °ř°Ý ŔŰľ÷		09.06

// ----------------------------------------------------------------------------
// Name : Lock()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::Lock(BOOL bLock)
{
	if(m_ugsGameState == UGS_LOGIN)
	{
		GetLogin()->Lock(bLock);
	}
	else if(m_ugsGameState == UGS_SELCHAR)
	{
		GetSelChar()->Lock(bLock);
	}
	else if(m_ugsGameState == UGS_SELSERVER)
	{
		GetSelServer()->Lock(bLock);
	}
	else if(m_ugsGameState == UGS_CREATECHAR)
	{
		GetCreateChar()->Lock(bLock);
	}
}

// ========================================================================= //
//                             Command functions                             //
// ========================================================================= //
static int	nTempTab, nTempRow, nTempCol;

// ----------------------------------------------------------------------------
// Name : DropItem()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::DropItem( int nTab, int nRow, int nCol )
{
	nTempTab = nTab;
	nTempRow = nRow;
	nTempCol = nCol;

	CItems	&rItems = _pNetwork->MySlotItem[nTab][nRow][nCol];
	CItemData	&rItemData = rItems.ItemData;

	// Can not drop item
	if( nTab > 0 )
		return;
	if( !( rItemData.GetFlag() & ITEM_FLAG_DROP) 
		|| rItems.IsFlag(FLAG_ITEM_LENT) 
		|| rItems.IsFlag(FLAG_ITEM_COMPOSITION) 
		|| rItems.IsFlag(FLAG_ITEM_PLATINUMBOOSTER_ADDED) )
	{
		GetChatting()->AddSysMessage( _S(3048, "ąö¸± Ľö ľř´Â ľĆŔĚĹŰŔÔ´Ď´Ů" ), SYSMSG_ERROR );		
		return;
	}
	// Wearing now
	if( rItems.Item_Wearing >= 0 )
		return;

	if(_pNetwork->m_bSingleMode)
	{
		GetChatting()->AddSysMessage( _S( 529, "ľĆŔĚĹŰŔ» ąö¸± Ľö ľř´Â ÁöżŞŔÔ´Ď´Ů." ), SYSMSG_ERROR );		
		return;
	}

	const char* szItemName = _pNetwork->GetItemName( rItemData.GetItemIndex() );
	CTString	strMessage;
	// Ask quantity
	if( ( rItemData.GetFlag() & ITEM_FLAG_COUNT ) && rItems.Item_Sum > 1 )
	{
		CUIMsgBox_Info	MsgBoxInfo;
		MsgBoxInfo.SetMsgBoxInfo( _S( 187, "ŔÎşĄĹä¸®" ), UMBS_OKCANCEL | UMBS_INPUTBOX,
									UI_NONE, MSGCMD_DROPITEM );
		// const char	*szItemName = rItemData.GetName();
		strMessage.PrintF( _S2( 188, szItemName, "¸î °łŔÇ %s<¸¦> ąö¸®˝Ă°Ú˝Ŕ´Ď±î?" ), szItemName );
		MsgBoxInfo.AddString( strMessage );
		
		_pUIMgr->CreateMessageBox( MsgBoxInfo );
	}
	else
	{
		CUIMsgBox_Info	MsgBoxInfo;
		MsgBoxInfo.SetMsgBoxInfo( _S( 187, "ŔÎşĄĹä¸®" ), UMBS_OKCANCEL,
									UI_NONE, MSGCMD_DROPITEM );
		// const char	*szItemName = rItemData.GetName();
		strMessage.PrintF( _S2( 189, szItemName, "%s<¸¦> ąö¸ł´Ď´Ů. °čĽÓ ÇĎ˝Ă°Ú˝Ŕ´Ď±î?" ), szItemName );
		MsgBoxInfo.AddString( strMessage );

		_pUIMgr->CreateMessageBox( MsgBoxInfo );
	}
}
// ----------------------------------------------------------------------------
// Name : MsgBoxCommand(,int,) wooss 050805
// Desc : Ăß°ˇµČ select button Ăł¸®¸¦ Ŕ§ÇŘ ąöĆ° ąřČŁ¸¦ ŔÎŔÚ·Î »çżëÇŃ´Ů.
// ----------------------------------------------------------------------------
void CUIManager::MsgBoxBtnCommand( int nCommandCode, int btnNum, CTString &strInput )
{
	switch( nCommandCode )
	{
		case MSGCMD_USE_RECOVER_ITEM_HEXP:
		
			_pUIMgr->CloseMessageBox(MSGCMD_USE_RECOVER_ITEM_HEXP);

			switch(btnNum)
			{
			case 0:
				//°ˇ±îżî ˝ĂŔŰÁˇżˇĽ­ şÎČ°
				_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM,TRUE,FALSE);
				break;
			
			case 1:
				//»ç¸Á ŔĺĽŇżˇĽ­ şÎČ°	
				_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM,TRUE,TRUE);
				break;
			}

			break;	
		case MSGCMD_USE_RECOVER_ITEM_AEXP:
			_pUIMgr->CloseMessageBox(MSGCMD_USE_RECOVER_ITEM_AEXP);
			switch(btnNum)
			{
			case 0:
				//°ˇ±îżî ˝ĂŔŰÁˇżˇĽ­ şÎČ°
				_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM,TRUE,FALSE);
				break;
			
			case 1:
				//»ç¸Á ŔĺĽŇżˇĽ­ şÎČ°	
				_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM,TRUE,TRUE);
				break;
			}
			
			break;

		case MSGCMD_USE_RECOVER_ITEM_HEXP_LUCKY:
			_pUIMgr->CloseMessageBox(MSGCMD_USE_RECOVER_ITEM_HEXP_LUCKY);
			switch(btnNum)
			{
			case 0:
				//°ˇ±îżî ˝ĂŔŰÁˇżˇĽ­ şÎČ°
				_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM_LUCKY,TRUE,FALSE);
				break;
			
			case 1:
				//»ç¸Á ŔĺĽŇżˇĽ­ şÎČ°	
				_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM_LUCKY,TRUE,TRUE);
				break;
			}

			break;	
		case MSGCMD_USE_RECOVER_ITEM_AEXP_LUCKY:
			_pUIMgr->CloseMessageBox(MSGCMD_USE_RECOVER_ITEM_AEXP_LUCKY);
			switch(btnNum)
			{
			case 0:
				//°ˇ±îżî ˝ĂŔŰÁˇżˇĽ­ şÎČ°
				_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM_LUCKY,TRUE,FALSE);
				break;
			
			case 1:
				//»ç¸Á ŔĺĽŇżˇĽ­ şÎČ°	
				_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM_LUCKY,TRUE,TRUE);
				break;
			}
			
			break;
		case MSGCMD_USE_REBIRTH_ITEM:
			{
				_pUIMgr->CloseMessageBox(MSGCMD_USE_REBIRTH_ITEM);
				
				LONG lUsedIndex =-1;

				if(_pUIBuff->IsBuff(REBIRTH_ITEM_PHOENIX) )
				{
					lUsedIndex =REBIRTH_ITEM_PHOENIX;
				}

				if(_pUIBuff->IsBuff(REBIRTH_ITEM) )
					lUsedIndex =REBIRTH_ITEM;
				else if( _pUIBuff->IsBuff(REBIRTH_ITEM_NEWBIE) )
					lUsedIndex =REBIRTH_ITEM_NEWBIE;

				switch(btnNum)
				{
				case 0:
					//°ˇ±îżî ˝ĂŔŰÁˇżˇĽ­ şÎČ°
					_pNetwork->SendRebirthMessageEx(lUsedIndex,TRUE,FALSE);
					break;
				
				case 1:
					//»ç¸Á ŔĺĽŇżˇĽ­ şÎČ°	
					_pNetwork->SendRebirthMessageEx(lUsedIndex,TRUE,TRUE);
					break;
				}
			}
			break;

		case MSGCMD_USE_SLOT_ITEM :

			switch(btnNum)
			{
			case 0:
				//Č®Ŕĺ˝˝·Ô 1
				_pNetwork->SendExSlotMessage(1);
				break;
			
			case 1:
				//Č®Ŕĺ˝˝·Ô 2
				_pNetwork->SendExSlotMessage(2);
				break;
			}
			break;

		case MSGCMD_GAMBLE_READYSEL :
			{	
				_pUIMgr->CloseMessageBox(MSGCMD_GAMBLE_READYSEL);

				int tv_idx = _pUIMgr->GetGamble()->GetCashItemList()[btnNum].cashIdx;
				int tv_cnt = _pUIMgr->GetGamble()->GetCashItemList()[btnNum].cashCnt;
				CUIButtonEx tv_btn = _pUIMgr->GetGamble()->GetSlotBtn();
				int my_cnt = _pNetwork->MySlotItem[tv_btn.GetItemTab()][tv_btn.GetItemRow()][tv_btn.GetItemCol()].Item_Sum;
				if(tv_cnt > my_cnt)
				{
					_pUIMgr->GetChatting()->AddSysMessage(_S(2912,"ľĆŔĚĹŰ °łĽö°ˇ şÎÁ·ÇŐ´Ď´Ů."));
					_pUIMgr->GetMessageBox(MSGCMD_GAMBLE_READY)->GetBtnEx().InitBtn();        
				}
				else 
				{
					_pUIMgr->GetGamble()->SetSelCashItemIdx(tv_idx);
				}

				_pUIMgr->GetMessageBox(MSGCMD_GAMBLE_READY)->GetBtnOK().SetEnable(TRUE);
				

			}
			break;

		// WSS_MINIGAME 070420 ----------------------------------->>
		case MSGCMD_MINIGAME_SELECT_ITEM:
			{
				switch(btnNum)
				{
				case 0:
					//ż±±â ą«±â Ľ±ĹĂ 1
					_pNetwork->SendMinigameSelectGift(((CUIMinigame*)_pUIMgr->GetUI(UI_MINIGAME))->m_extra1);										
					break;
				
				case 1:
					//ż±±â ą«±â Ľ±ĹĂ 2
					_pNetwork->SendMinigameSelectGift(((CUIMinigame*)_pUIMgr->GetUI(UI_MINIGAME))->m_extra2);
					break;
				}
				_pUIMgr->CloseMessageBox(MSGCMD_MINIGAME_SELECT_ITEM);
			break;


			}
		// -------------------------------------------------------<<
		// WSS_DRATAN_SEIGEWARFARE 2007/08/22 -------------------->>
		case MSGCMD_SIEGEWARFARE_REBIRTH :
			{
				switch(btnNum)
				{
				case 0:	//şÎČ° ÁřÁö·Î...				
				case 1:	//°ˇ±îżî ¸¶Ŕ»·Î...
					_pUIMgr->GetSiegeWarfareNew()->SendSiegewarfareRebirth(btnNum);
					break;
				}
				_pUIMgr->CloseMessageBox(MSGCMD_SIEGEWARFARE_REBIRTH);
				
			}
			break;
		// -------------------------------------------------------<<

	}			
}

// ----------------------------------------------------------------------------
// Name : MsgBoxCommand()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::MsgBoxCommand( int nCommandCode, BOOL bOK, CTString &strInput )
{
	//wooss 050802
	CTString		strTitle;
	CTString		strMsg ;
	CUIMsgBox_Info	MsgBoxInfo;
	BuffInfo*		tv_buffInfo = _pUIBuff->GetBuffArray();
	int				tv_tab,tv_row,tv_col;	// ŔÓ˝Ă ľĆŔĚĹŰ ˝˝·Ô Ŕ§Äˇ Á¤ş¸ 

	if( !bOK ) // NO, CANCEL °ćżě 
	{
		// wooss 050802
	switch( nCommandCode )
	{		
		case MSGCMD_USE_CONFIRM_HEXP:
			_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM,FALSE,FALSE);
			break;
		case MSGCMD_USE_CONFIRM_AEXP:
			_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM,FALSE,FALSE);
			break;
		case MSGCMD_USE_CONFIRM_HEXP_LUCKY:
			_pNetwork->SendRebirthMessageEx(RECOVER_HEXP_ITEM_LUCKY,FALSE,FALSE);
			break;
		case MSGCMD_USE_CONFIRM_AEXP_LUCKY:
			_pNetwork->SendRebirthMessageEx(RECOVER_AEXP_ITEM_LUCKY,FALSE,FALSE);
			break;
		case MSGCMD_USE_CONFIRM_REBIRTH:
			_pNetwork->SendRebirthMessageEx(REBIRTH_ITEM,FALSE,FALSE);
			break;

		case MSGCMD_WARP_TO_CANCEL:
			 strMsg	= _pUIMgr->GetMessageBox(MSGCMD_WARP_TO_CANCEL)->GetInputBox().GetString();
			_pNetwork->SendWarpItemMessage(MSG_WARP_TO_REQING,strMsg);
			_pUIMgr->CloseMessageBox(MSGCMD_WARP_TO_CANCEL);
			break;
		
		case MSGCMD_WARP_TAKE_CANCEL:
			 strMsg	= _pUIMgr->GetMessageBox(MSGCMD_WARP_TAKE_CANCEL)->GetInputBox().GetString();
			_pNetwork->SendWarpItemMessage(MSG_WARP_TAKE_REQING,strMsg);
			_pUIMgr->CloseMessageBox(MSGCMD_WARP_TAKE_CANCEL);
			break;

		case MSGCMD_WARP_TO_REQ_CALL:
			{
				CTString strSendName = CTString( _pUIMgr->GetMessageBox(MSGCMD_WARP_TO_REQ_CALL)->GetInputBox().GetString() );

				_pUIMgr->CloseMessageBox(MSGCMD_WARP_TO_REQ_CALL);
				_pNetwork->SendWarpItemMessage(MSG_WARP_TO,
					strSendName,
					FALSE);
			}
			break;

		case MSGCMD_WARP_TAKE_REQ_CALL:
			{
				CTString strSendName = CTString( _pUIMgr->GetMessageBox(MSGCMD_WARP_TAKE_REQ_CALL)->GetInputBox().GetString() );

				_pUIMgr->CloseMessageBox(MSGCMD_WARP_TAKE_REQ_CALL);
				_pNetwork->SendWarpItemMessage(MSG_WARP_TAKE,
					strSendName,
					FALSE);
			}
			break;

			
		case MSGCMD_EX_PARTY_RECALL_PROMPT :	
			_pNetwork->SendPartyRecallConfirm(_pNetwork->m_tmp_str,_pNetwork->m_tmp_idx,FALSE);
			break;

		case MSGLCMD_EVENT_XMAS_2006_CHANGE:
			{
				//±łČŻÇŇ ÄÉŔĚĹ© °łĽö ŔÔ·ÂĂ˘ŔĚ ¶çżöÁ® ŔÖÁö ľĘŔ¸¸é Ă˘Ŕ» ´ÝŔ˝.
				if( !_pUIMgr->GetMessageBox(MSGLCMD_EVENT_XMAS_2006_COUNT) )
					_pUIMgr->CloseMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE);
				break;
			}
		case MSGCMD_EX_MONSTERCOMBO_GOTO_COMBO_PROMPT:
			{
				_pUIMgr->GetCombo()->SendComboMessage(MSG_EX_MONSTERCOMBO_GOTO_COMBO_CONFIRM,FALSE);
				_pUIMgr->CloseMessageBox(MSGCMD_EX_MONSTERCOMBO_GOTO_COMBO_PROMPT);
			}
			break;
		default : 
			_pUIMgr->CloseMessageBox(nCommandCode);
			break;
	}

	return;
	}

	// YES, OK °ćżě

	CItems		&rItems = _pNetwork->MySlotItem[nTempTab][nTempRow][nTempCol];
	CItemData	&rItemData = rItems.ItemData;

	switch( nCommandCode )
	{
	
		// wooss 050802
	case MSGCMD_USE_CONFIRM_HEXP:

		_pUIMgr->CloseMessageBox(MSGCMD_USE_CONFIRM_HEXP);
			
		strMsg  = _S( 1888, "°ćÇčÄˇ şą±¸ ÁÖą®Ľ­" );	 
		MsgBoxInfo.SetMsgBoxInfo(strMsg ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_RECOVER_ITEM_HEXP);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);
		break;
								
	case MSGCMD_USE_CONFIRM_AEXP:	  
	
		_pUIMgr->CloseMessageBox(MSGCMD_USE_CONFIRM_AEXP);
		strMsg = _S( 1895, "Ľ÷·Ăµµ şą±¸ ÁÖą®Ľ­" );	
		MsgBoxInfo.SetMsgBoxInfo(strMsg ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_RECOVER_ITEM_AEXP);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);

		break;
		
	case MSGCMD_USE_CONFIRM_HEXP_LUCKY:

		_pUIMgr->CloseMessageBox(MSGCMD_USE_CONFIRM_HEXP_LUCKY);
			
		strMsg  = _pNetwork->GetItemName(RECOVER_HEXP_ITEM_LUCKY);
		MsgBoxInfo.SetMsgBoxInfo(strMsg ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_RECOVER_ITEM_HEXP_LUCKY);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);
		break;
								
	case MSGCMD_USE_CONFIRM_AEXP_LUCKY:	  
	
		_pUIMgr->CloseMessageBox(MSGCMD_USE_CONFIRM_AEXP_LUCKY);
		strMsg = _pNetwork->GetItemName(RECOVER_AEXP_ITEM_LUCKY);
		MsgBoxInfo.SetMsgBoxInfo(strMsg ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_RECOVER_ITEM_AEXP_LUCKY);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);

		break;
		
	case MSGCMD_USE_CONFIRM_REBIRTH:	 
		
		_pUIMgr->CloseMessageBox(MSGCMD_USE_CONFIRM_REBIRTH);
		
		if(_pUIBuff->IsBuff(REBIRTH_ITEM_PHOENIX))
		{
			strMsg =_S( 4263,  "ÇÇ´Đ˝şŔÇ şÎČ°" ); 
		}

		if(_pUIBuff->IsBuff(REBIRTH_ITEM) || _pUIBuff->IsBuff(REBIRTH_ITEM_NEWBIE))
		{
			strMsg =_S( 1896,  "şÎČ° ÁÖą®Ľ­" ); 
		}
		MsgBoxInfo.SetMsgBoxInfo(strMsg,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_REBIRTH_ITEM);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);

		break;

	case MSGCMD_CHECK_ITEM_HEXP:
		_pUIMgr->CloseMessageBox(MSGCMD_CHECK_ITEM_HEXP);
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);

		break;

	case MSGCMD_CHECK_ITEM_AEXP:
		_pUIMgr->CloseMessageBox(MSGCMD_CHECK_ITEM_AEXP);
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
		break;
		
	case MSGCMD_USE_WARP_ITEM:

	//	_pUIMgr->CloseMessageBox(MSGCMD_USE_WARP_ITEM);
		strTitle	=	_S( 191, "Č®ŔÎ" );
		strMsg		=_S( 1912, 	"Ľř°ŁŔĚµż ÇŇ Ŕ§Äˇżˇ ŔÖ´Â ŔŻŔúżˇ°Ô Ľř°ŁŔĚµż ż©şÎ¸¦ ąŻ°í ŔÖ˝Ŕ´Ď´Ů. ąöĆ°Ŕ» ´©¸Ł¸é ĂëĽŇ µË´Ď´Ů." ); 
		MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_CANCEL,UI_NONE,MSGCMD_WARP_TO_CANCEL);
		MsgBoxInfo.AddString(strMsg);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);
		
		strMsg		=	_pUIMgr->GetMessageBox(MSGCMD_USE_WARP_ITEM)->GetInputBox().GetString();
		
		_pUIMgr->GetMessageBox(MSGCMD_WARP_TO_CANCEL)->GetInputBox().SetString(strMsg.str_String);
		
		_pNetwork->SendWarpItemMessage(	MSG_WARP_TO_REQ,strMsg );
		
		_pUIMgr->CloseMessageBox(MSGCMD_USE_WARP_ITEM);
		  
				
		break;


	case MSGCMD_WARP_TO_REQ_CALL:
		// Date : 2006-05-30(żŔŔü 11:39:42), By eons
		if( !((CPlayerEntity*)CEntity::GetPlayerEntity(0))->IsIdle() )
		{
			_pUIMgr->GetChatting()->AddSysMessage( _S( 2741, "´Ů¸Ą Çŕµż Áßżˇ´Â Ľř°Ł ŔĚµż żäĂ»Ŕ» ˝ÂŔÎ ÇŇ Ľö ľř˝Ŕ´Ď´Ů." ) );
			_pUIMgr->CloseMessageBox(MSGCMD_WARP_TO_REQ_CALL);
			_pNetwork->SendWarpItemMessage(MSG_WARP_TO,strInput,FALSE);
			return;
		}

		_pUIMgr->CloseMessageBox(MSGCMD_WARP_TO_REQ_CALL);
		_pNetwork->SendWarpItemMessage(MSG_WARP_TO,strInput,TRUE);
		break;

	case MSGCMD_WARP_TAKE_REQ_CALL:
		// Date : 2006-05-30(żŔŔü 11:39:42), By eons
		if( !((CPlayerEntity*)CEntity::GetPlayerEntity(0))->IsIdle() )
		{
			_pUIMgr->GetChatting()->AddSysMessage( _S( 2742, "´Ů¸Ą Çŕµż Áßżˇ´Â ĽŇČŻ żäĂ»Ŕ» ˝ÂŔÎ ÇŇ Ľö ľř˝Ŕ´Ď´Ů." ) );
			_pUIMgr->CloseMessageBox(MSGCMD_WARP_TAKE_REQ_CALL);
			_pNetwork->SendWarpItemMessage(MSG_WARP_TAKE,strInput,FALSE);
			return;
		}

		_pUIMgr->CloseMessageBox(MSGCMD_WARP_TAKE_REQ_CALL);
		_pNetwork->SendWarpItemMessage(MSG_WARP_TAKE,strInput,TRUE);
		break;

	// wooss 050817 
	case MSGCMD_USE_PC_SUMMON_ITEM :
	
		strTitle	=	_S( 191, "Č®ŔÎ" );
		strMsg		=	_S( 1916, "ĽŇČŻÇŇ ŔŻŔúżˇ°Ô ĽŇČŻ ż©şÎ¸¦ ąŻ°í ŔÖ˝Ŕ´Ď´Ů. ąöĆ°Ŕ» ´©¸Ł¸é ĂëĽŇ µË´Ď´Ů" ); 
		MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_CANCEL,UI_NONE,MSGCMD_WARP_TAKE_CANCEL);
		MsgBoxInfo.AddString(strMsg);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);
		
		strMsg		=	_pUIMgr->GetMessageBox(MSGCMD_USE_PC_SUMMON_ITEM)->GetInputBox().GetString();

		_pUIMgr->GetMessageBox(MSGCMD_WARP_TAKE_CANCEL)->GetInputBox().SetString(strMsg.str_String);

		_pNetwork->SendWarpItemMessage(	MSG_WARP_TAKE_REQ,strMsg );
		
		_pUIMgr->CloseMessageBox(MSGCMD_USE_PC_SUMMON_ITEM);

		break;
 
	// wooss 050818
	case MSGCMD_USE_BOSS_SUMMON_ITEM:
		
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
		break;
	//<--
	
	case MSGCMD_DROPITEM:
		if( ( rItemData.GetFlag() & ITEM_FLAG_COUNT ) && rItems.Item_Sum > 1 )
		{
			char	*pcInput = strInput.str_String;
			int		nLength = strInput.Length();
			int iChar;
			for(  iChar = 0; iChar < nLength; iChar++ )
			{
				if( pcInput[iChar] < '0' || pcInput[iChar] > '9' )
					break;
			}

			if( iChar == nLength )
			{
				SQUAD	llCount = _atoi64( pcInput );
				if( llCount > 0 && llCount <= rItems.Item_Sum )
					SendDropItem( nTempTab, nTempRow, nTempCol, llCount );
			}
		}
		else
		{
			SendDropItem( nTempTab, nTempRow, nTempCol, 1 );
		}
		break;

	case MSGCMD_PC_DEATH:
		_pNetwork->SendRebirthMessage();
		break;

	case MSGCMD_DISCONNECT://kwon Á˘ĽÓ ˛÷°ÜĽ­ °ÔŔÓ Áľ·á.
		_pGameState->Running() = FALSE;
		_pGameState->QuitScreen() = FALSE;	
		//_pGameState->m_BackGroundWorld.Clear();
		break;
		
	case MSGCMD_LOGIN_ERROR:
		// ·Î±×ŔÎ °úÁ¤żˇĽ­ żˇ·Ż ąß»ý˝Ă.
		//_pUIMgr->GetLogin()->Lock(FALSE);
		_pUIMgr->Lock(FALSE);
		break;

	// wooss 050812
	case MSGCMD_CONFIRM_CHANGE_MY_NAME:
		
		_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_CHANGE_MY_NAME);
		strTitle = _S( 1919, "°ł¸íÄ«µĺ" ); 
		strMsg = _S( 2140, "»ő·Îżî Äł¸ŻĹÍŔÇ ŔĚ¸§Ŕ» ŔÔ·ÂÇĎĽĽżä" ); 
		MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_INPUTBOX|UMBS_OKCANCEL,UI_NONE,MSGCMD_USE_CHANGE_MY_NAME_ITEM);
		MsgBoxInfo.AddString(strMsg);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);

		break;

	case MSGCMD_CONFIRM_CHANGE_GUILD_NAME:

		_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_CHANGE_GUILD_NAME);
		strTitle = _S( 2141, "±ćµĺ°ł¸íÄ«µĺ" ); 
		strMsg = _S( 2142, "»ő·Îżî ±ćµĺŔÇ ŔĚ¸§Ŕ» ŔÔ·ÂÇĎĽĽżä" ); 
		MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_INPUTBOX|UMBS_OKCANCEL,UI_NONE,MSGCMD_USE_CHANGE_GUILD_NAME_ITEM);
		MsgBoxInfo.AddString(strMsg);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);

		break;

	case MSGCMD_USE_CHANGE_MY_NAME_ITEM: 
		{	
			strMsg	= _pUIMgr->GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetInputBox().GetString();
			//_pUIMgr->GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetAbsPos(tv_col,tv_row);
			//tv_row+=_pUIMgr->GetMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM)->GetHeight();

			if (!checkName(strMsg, 0)) return;

			_pNetwork->SendChangMyName(strMsg);
			_pUIMgr->CloseMessageBox(MSGCMD_USE_CHANGE_MY_NAME_ITEM);
		}
		break;
	
	case MSGCMD_USE_CHANGE_GUILD_NAME_ITEM: 
		{
			strMsg	= _pUIMgr->GetMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM)->GetInputBox().GetString();
			//_pUIMgr->GetMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM)->GetAbsPos(tv_col,tv_row);
			
			if (!checkName(strMsg, 1)) return;
			
			_pNetwork->SendChangGuildName(strMsg);			
			_pUIMgr->CloseMessageBox(MSGCMD_USE_CHANGE_GUILD_NAME_ITEM);
		}
		break;
		
	case MSGCMD_CONFIRM_MEMSCROLL_EX:
		_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_MEMSCROLL_EX);
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
		break;

	case MSGCMD_CONFIRM_WAREHOUSE_EX:
		_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_WAREHOUSE_EX);
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
		break;
		
	case MSGCMD_PROLONG_MEMSCROLL_EX :
		_pUIMgr->CloseMessageBox(MSGCMD_PROLONG_MEMSCROLL_EX);
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->SendProlongMessage(tv_tab,tv_row,tv_col);
		break;
	case MSGCMD_PROLONG_WAREHOUSE_EX :
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->SendProlongMessage(tv_tab,tv_row,tv_col);
		break;

	//wooss 050820
	case MSGCMD_CONFIRM_SLOT_ITEM :
		strTitle = _S(2407,"Äł¸ŻĹÍ ˝˝·Ô Č®Ŕĺ Ä«µĺ");
		MsgBoxInfo.SetMsgBoxInfo(strTitle ,UMBS_SELECTBOX,UI_NONE,MSGCMD_USE_SLOT_ITEM);
		_pUIMgr->CreateMessageBox(MsgBoxInfo);
		break;

	// wooss 060306
	case MSGCMD_CONFIRM_PARTY_RECALL_ITEM :
		_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_PARTY_RECALL_ITEM);
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
		break;

	case MSGCMD_NULL:
		_pUIMgr->CloseMessageBox(MSGCMD_NULL);
		break;

	case MSGCMD_USE_ITEM:
		_pUIMgr->CloseMessageBox(MSGCMD_USE_ITEM);
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
		break;

	
	case MSGCMD_SIEGE_WARFARE_MOVEING_CONFIRM:
		// °řĽşÁöżŞŔ¸·Î ŔĚµż 
		_pNetwork->SendMovingGuildWarArea();
		break;
	case MSGCMD_BOOST_RANDON_PRODUCT_ERROR:
		_pUIMgr->CloseMessageBox(MSGCMD_BOOST_RANDON_PRODUCT_ERROR); 
		break;
	case MSGCMD_GUILD_LORD_NOTICE: // ĽşÁÖ °řÁö
		_pUIMgr->GetChatting()->SendChatMessage( strInput.str_String, TRUE );
		_pUIMgr->GetCharacterInfo()->UseAction( 34 );
		break;
	case MSGCMD_EVENT_PRIZE:
		{
			switch( _pNetwork->m_iLastError )
			{
			case MSG_EVENT_ERROR_CHUSEOK_UPGRADE_OK:
			case MSG_EVENT_ERROR_CHUSEOK_UPGRADE_FAIL:
			case MSG_EVENT_ERROR_CHUSEOK_ALREADY_UPGRADE:
			case MSG_EVENT_ERROR_CHUSEOK_NO_CROP:
				GetQuest()->MsgBoxLCommand( MSGLCMD_EVENT, QUEST_HARVEST_MOON_DAY_EVENT );

				break;
			}

		}
		break;
	case MSGCMD_BILL_ITEM_REP:
		//_pNetwork->BillInfoUserInfoReq();
		break;
		
	case MSGCMD_EX_PARTY_RECALL_PROMPT :
		_pNetwork->SendPartyRecallConfirm(_pNetwork->m_tmp_str,_pNetwork->m_tmp_idx,TRUE);		
		break;

	// wooss 060516 platiunm item
	case MSGCMD_CONFIRM_UPGRADESTONE_ITEM :
		{
			_pUIMgr->CloseMessageBox(MSGCMD_NULL);
			_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_UPGRADESTONE_ITEM);
			_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
			_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
				
		}
		break;

	case MSGCMD_CONFIRM_MIXNEWREQ_ITEM :
		{
			_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_MIXNEWREQ_ITEM);
			_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
			_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
				
		}
		break;

	case MSGCMD_CONFIRM_MIXNEW_ITEM :
		{
			_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_MIXNEW_ITEM);
			_pUIMgr->GetMixNew()->OpenMixNew(TRUE);
			
				
		}
		break;
	case MSGCMD_COMFIRM_USE_ITEM:
		{
			_pUIMgr->CloseMessageBox(MSGCMD_COMFIRM_USE_ITEM);
			_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		
			CItems& Items = _pNetwork->MySlotItem[tv_tab][tv_row][tv_col];
			// ´Ů˝Ă ľĆŔĚĹŰ »çżë ¸ŢĽĽÁö ŔüĽŰ( etc = 1 )
			_pNetwork->SendItemUse(Items.Item_Tab, Items.Item_Row, Items.Item_Col, Items.Item_UniIndex, 1 );
		}
		break;
	case MSGCMD_PET_MOUNT_CANCEL_CARD:
		{
			CUIMsgBox_Info MsgBoxInfo;
			CTString strMessage;
			
			strMessage.PrintF( _S( 191, "Č®ŔÎ" ) );
			MsgBoxInfo.SetMsgBoxInfo(strMessage,UMBS_YESNO,UI_NONE,MSGCMD_USE_PET_MOUNT_CANCEL_CARD);
			strMessage.PrintF( _S( 2895, "[ŔŻ·áľĆŔĚĹŰ] Ľ±ĹĂÇŃ ľÖżĎµżą°ŔÇ Ĺ» °Í(¸¶żîĆ®) »óĹÂ¸¦ ĂëĽŇÇĎ°í ľÖżĎ µżą° »óĹÂ·Î şŻČŻ ÇĎ˝Ă°Ú˝Ŕ´Ď±î?" ) );
			MsgBoxInfo.AddString(strMessage);
			_pUIMgr->CreateMessageBox(MsgBoxInfo);
		}
		break;
	case MSGCMD_USE_PET_MOUNT_CANCEL_CARD:
		{
			int nUniIndex;

			_pUIMgr->GetMessageBox(MSGCMD_PET_MOUNT_CANCEL_CARD)->GetBtnUseItemInfo( tv_tab, tv_row, tv_col, nUniIndex );
			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_row][tv_col];

			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.Item_Row, ItemsBtn.Item_Col, ItemsBtn.Item_UniIndex, nUniIndex );
			_pUIMgr->CloseMessageBox( MSGCMD_PET_MOUNT_CANCEL_CARD );
		}
		break;
	case MSGCMD_CONFIRM_UNMIX_ITEM : 
		{
			_pUIMgr->GetMixNew()->OpenMixNew(FALSE);
		}
		break;
	case MSGCMD_RARE_IDENTIFY :
		{
			int nUniIndex;

			_pUIMgr->GetMessageBox(MSGCMD_RARE_IDENTIFY)->GetBtnUseItemInfo( tv_tab, tv_row, tv_col, nUniIndex );
			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_row][tv_col];

			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.Item_Row, ItemsBtn.Item_Col, ItemsBtn.Item_UniIndex, nUniIndex );
			_pUIMgr->CloseMessageBox( MSGCMD_RARE_IDENTIFY );
		}
		break;
	case MSGLCMD_EVENT_XMAS_2006_COUNT :	// 2006 X-Mas Event [12/12/2006 Theodoric]
		{
			CUIEditBox& nInputBox = _pUIMgr->GetMessageBox(MSGLCMD_EVENT_XMAS_2006_COUNT)->GetInputBox();
			int nCakeCount = atoi(nInputBox.GetString());
			int nCakeMaxCount  = _pUIMgr->GetInventory()->GetItemCount(1975);			

			if(  nCakeMaxCount < 3 || !( nCakeCount > 2 && nCakeCount <= nCakeMaxCount ) )
			{
				_pUIMgr->GetMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE)->GetBtnEx().InitBtn();
			}
			else
			{
				_pUIMgr->GetMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE)->GetInputBox().SetString( nInputBox.GetString());
				_pUIMgr->GetMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE)->GetBtnOK().SetEnable(TRUE);	
			}
		}
		break;

	case MSGLCMD_EVENT_XMAS_2006_CHANGE :
		{
			CUIEditBox& nInputBox = _pUIMgr->GetMessageBox(MSGLCMD_EVENT_XMAS_2006_CHANGE)->GetInputBox();
			int nCakeCount = atoi(nInputBox.GetString());

			if (nCakeCount > 0)
			{
				_pNetwork->Send2006XMasEvent( (SLONG)nCakeCount );
			}			

			_pUIMgr->CloseMessageBox( MSGLCMD_EVENT_XMAS_2006_CHANGE );
			
		}
		break;
	case MSGCMD_USE_PACKING_PAPER: // ĂĘÄÚ·ż Ć÷ŔĺÁö
	case MSGCMD_USE_SMALL_CORD: // şąÁÖ¸Ó´Ď łë˛ö 
		{
			int nUniIndex;

			_pUIMgr->GetMessageBox(nCommandCode)->GetBtnUseItemInfo( tv_tab, tv_row, tv_col, nUniIndex );
			CItems& ItemsBtn = _pNetwork->MySlotItem[tv_tab][tv_row][tv_col];

			_pNetwork->SendItemUse(ItemsBtn.Item_Tab, ItemsBtn.Item_Row, ItemsBtn.Item_Col, ItemsBtn.Item_UniIndex, nUniIndex );
			_pUIMgr->CloseMessageBox( nCommandCode );
		}
		break;
	case MSGCMD_GOTO_EGEHA:
		{
			_pUIMgr->GetPortal()->GotoCurSelZone();
		}
		break;
// [KH_070326] ´Ţ°ż ŔĚşĄĆ® °ü·Ă
	case MSGCMD_CONFIRM_EASTER_EGGS:
		_pUIMgr->CloseMessageBox(MSGCMD_CONFIRM_EASTER_EGGS);
		_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
		_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
		break;
	case MSGCMD_PET_NAMECARD_USE:
		{
			if( !_pUIMgr->GetPetTraining()->IsNotPetWear())
			{
				if(_pUIMgr->DoesMessageBoxExist(MSGCMD_PET_NAMECARD_INPUT)) 
					return;
				MsgBoxInfo.SetMsgBoxInfo( CTString(_pNetwork->GetItemName(PET_NAMECARD_ITEM)), UMBS_OKCANCEL|UMBS_INPUTBOX, UI_NONE, MSGCMD_PET_NAMECARD_INPUT);
				MsgBoxInfo.AddString( _S(3528, "ľÖżĎµżą°ŔÇ ŔĚ¸§Ŕ» ŔÔ·ÂÇĎĽĽżä.") );
				MsgBoxInfo.AddString( _S(3529, "(ĂÖ´ë ÇŃ±Ű 8ŔÚ)") );
				MsgBoxInfo.AddString( _s("") );
				MsgBoxInfo.m_nInputMaxChar =16;//.SetInputBox(3, 3, 16);
				_pUIMgr->CreateMessageBox(MsgBoxInfo);
			}
		}
		break;
	case MSGCMD_PET_NAMECARD_INPUT:
		{
			if( !_pUIMgr->GetPetTraining()->IsNotPetWear())
			{
				if( _UIFilteringCharacter.Filtering ( strInput.str_String ) == TRUE ) // find ...
				{
					_pUIMgr->CloseMessageBox(MSGCMD_CREATE_ERROR);
					CUIMsgBox_Info	MsgBoxInfo;
					MsgBoxInfo.SetMsgBoxInfo( CTString(""), UMBS_OK,
												UI_NONE, MSGCMD_CREATE_ERROR );
					
					MsgBoxInfo.AddString( _S(3530, "ŔÔ·ÂÇŃ ŔĚ¸§żˇ ±ÝÁö´Üľî°ˇ Ć÷ÇÔµÇľî ŔÖ˝Ŕ´Ď´Ů. ´Ů˝Ă ŔÔ·ÂÇŘ ÁÖ˝Ę˝ĂżŔ.") );
					_pUIMgr->CreateMessageBox( MsgBoxInfo );

					return;
				}
				else
				{
					_pNetwork->SendPetNameChageReq( _pNetwork->_PetTargetInfo.lIndex, strInput);
				}
			}
		}
		break;

	// [070824: Su-won] PET_COLOR_CHANGE
	case MSGCMD_PET_COLORCHANGE_USE:
		{
			_pUIMgr->CloseMessageBox(MSGCMD_PET_COLORCHANGE_USE);
			_pUIMgr->GetInventory()->GetUseItemSlotInfo(tv_tab,tv_row,tv_col);
			_pNetwork->UseSlotItem(tv_tab,tv_row,tv_col);
		}
		break;

	// [090713: selo] PET_TATOO_CHANGE
	case MSGCMD_PET_TATOOCHANGE_USE:
		{
			_pUIMgr->CloseMessageBox(MSGCMD_PET_TATOOCHANGE_USE);
			_pUIMgr->GetTatoo()->SendItemUse();
			_pUIMgr->GetTatoo()->Close();
		}
		break;

	// [071217: Su-won] EVENT_NEWYEAR_2008
	case MSGCMD_EVENT_NEWYEAR_2008:
		{
			CNetworkMessage	nmMsg( MSG_EVENT );
			nmMsg<< (SBYTE)MSG_EVENT_NEWYEAR_2008;
			_pNetwork->SendToServerNew( nmMsg );
		}
		break;
	case MSGCMD_EX_MONSTERCOMBO_GOTO_COMBO_PROMPT:
		{
			_pUIMgr->GetCombo()->SendComboMessage(MSG_EX_MONSTERCOMBO_GOTO_COMBO_CONFIRM,TRUE);
		}break;

	case MSGCMD_EVENT_PHOENIX:		//ÇÇ´Đ˝ş ŔĚşĄĆ®
		{
			_pNetwork->SendCreatePhoenixCharacter();
		}break;

	}
}

// ----------------------------------------------------------------------------
// Name : MsgBoxCommand()
// Desc : µÎ°łŔÇ ą®ŔÚż­Ŕ» »çżë 
// Date : 2006-06-01(żŔČÄ 4:57:43), By eons
// ----------------------------------------------------------------------------
void CUIManager::MsgBoxCommand( int nCommandCode, BOOL bOK, CTString &strInput ,CTString &strConfirm)
{
	// Date : 2006-06-01(żŔČÄ 4:57:40), By eons
	CTString		strTitle;
	CTString		strMsg ;
	CUIMsgBox_Info	MsgBoxInfo;

	if( !bOK )		// ĂëĽŇ
	{
		switch( nCommandCode )
		{
		case MSGCMD_GOLDENBALL_EVENT:		// °ńµçşĽ
			break;
		}
	}
	else		// ˝ÂŔÎ
	{
		switch( nCommandCode )
		{
		case MSGCMD_GOLDENBALL_EVENT:		// °ńµçşĽ
			{
				if( !( strInput.IsInteger() && strConfirm.IsInteger() ) )
				{
					_pNetwork->ClientSystemMessage( _S( 2770, "ÁˇĽö´Â 0~99»çŔĚŔÇ ĽýŔÚ¸¦ ŔÔ·ÂÇĎĽĹľß ÇŐ´Ď´Ů." ), SYSMSG_ERROR );
					return;
				}
				
				const char *TempChar1 = strInput;
				const char *TempChar2 = strConfirm;

				int TeamA = atoi( TempChar1 );
				int TeamB = atoi( TempChar2 );

				if( TeamA >= 0 && TeamA <= 99 && TeamB >= 0 && TeamB <= 99 )
				{
					_pNetwork->SendWorldCupGoldenBallEvent( MSG_EVENT_GOLDENBALL_VOTE, TeamA, TeamB );
				}
				else
				{
					_pNetwork->ClientSystemMessage( _S( 2770, "ÁˇĽö´Â 0~99»çŔĚŔÇ ĽýŔÚ¸¦ ŔÔ·Â ÇĎĽĹľß ÇŐ´Ď´Ů." ), SYSMSG_ERROR );
					return;
				}
			}
			break;
		}
	}
}

// ========================================================================= //
//                           Send message functions                          //
// ========================================================================= //

// ----------------------------------------------------------------------------
// Name : SendDropItem()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::SendDropItem( int nTab, int nRow, int nCol, SQUAD llCount )
{
	_pNetwork->DropItem( nTab, nRow, nCol, llCount );
}

// ----------------------------------------------------------------------------
// Name : CancelSkill()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::CancelSkill( BOOL bLostTarget, BOOL bSkillError )
{	
	((CPlayerEntity*)CEntity::GetPlayerEntity(0))->CancelSkill(bLostTarget, g_iAutoAttack, bSkillError);
}

//------------------------------------------------------------------------------
// CUIManager::LostTarget
// Explain:  ÇöŔç ÄÉ¸ŻĹÍŔÇ TargertŔ» ĂëĽŇÇŃ´Ů.
// Date : 2005-08-24,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::LostTarget()
{
	((CPlayerEntity*)CEntity::GetPlayerEntity(0))->LostTarget();
}

//#define KEY_SHOW_STRING_INDEX_DEVtest

inline ENGINE_API CTString _SFunc( int x )
{
	/*#ifndef KEY_SHOW_STRING_INDEX_DEV	
		return _pUIMgr->GetString(x);
	#else
		CTString strString;
		strString.PrintF( "(%d)%s", x,_pUIMgr->GetString(x));
		return strString;
	#endif*/
	if (_pNetwork->m_ubGMLevel > 1)
	{
		CTString strString;
		CTString strOrg = _pUIMgr->GetString(x);

		strOrg.IsEmpty() ? strString.PrintF("[%d]Client", x) : strString.PrintF("[%d]%s", x, strOrg);
		return strString;
	}
	else
		return _pUIMgr->GetString(x);

}

//------------------------------------------------------------------------------
// CUIManager::SetTitleName
// Explain: ±ą°ˇş°·Î Ĺ¸ŔĚĆ˛ąŮŔÇ ŔĚ¸§Ŕ» ´Ů¸Ł°Ô ĽłÁ¤
// Date : 2005-09-22,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::SetTitleName( INDEX bFullScreen, int iScreenSizeI, int iScreenSizeJ )
{
	// ±ą°ˇş° Ĺ¸ŔĚĆ˛ ąŮ şŻ°ć 
	// Date : 2005-09-22(żŔČÄ 7:17:24), By Lee Ki-hwan
	// żřµµżě Ĺ¸ŔĚĆ˛ ąŮ Á¶Á¤ 
	CTString strTitleName;
	strTitleName.PrintF( "%s (%s %dx%d)", _S( 147, "Title Name"), (bFullScreen?"FullScreen":"Window"), iScreenSizeI, iScreenSizeJ );
	
	SetWindowText( _hwndMain, strTitleName.str_String );
}

//--------------------------------------------------------------------------------------------------------
// Date : 2005-11-17(żŔČÄ 3:56:49), By Lee Ki-hwan
// °ř°Ý ĽöÄˇ ÇĄ˝Ă ŔŰľ÷ 
#define SHOW_DAMAGE_TIME		1500.0f		// µĄąĚÁö ÇĄ˝Ă ˝Ă°Ł 
#define ATTACKED_COLOR			0xaa000000


//------------------------------------------------------------------------------
// CUIManager::SetDamageState
// Explain:  ŔĎÁ¤˝Ă°ŁŔĚ ÁöłŞ¸é Damage µĄŔĚĹÍ¸¦ ĂĘ±âČ­
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::SetDamageState()
{
	llOldTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
}


//------------------------------------------------------------------------------
// CUIManager::AddDamageData
// Explain: µĄąĚÁö¸¦ ÁÖ°ĹłŞąŢŔ¸¸é ŔúŔĺÇĎ´Â ±â´ÉŔ» ÇŃ´Ů.
// * Ĺ¸°ÝŔĚĆĺĆ®°ˇ ĹÍÁú ¶§ Č­¸éżˇ »Ń·Á ÁÖ´Â µĄŔĚĹÍ ŔúŔĺ 
// * ±âÁ¸ŔÇ µżŔĎÇŃ ¸÷żˇ°ÔĽ­ ąŢŔş µĄŔĚĹÍ´Â ŔúŔĺ
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::AddDamageData( ULONG ulDamage, SBYTE sbTargetFlag, ULONG ulClientIndex, BOOL bDamaged  )
{
	DAMAGE Damage;
	Damage.sbTargetFlag = sbTargetFlag;
	Damage.ulDamage		= ulDamage;
	Damage.ulIndex		= ulClientIndex;
	Damage.fAlpha		= 0.0f;	
	Damage.bDamaged		= bDamaged;
	
	// ÇĂ·ąŔĚľî°ˇ µĄąĚÁö¸¦ ąŢ´Â °ćżěżˇ´Â eraseÇĎÁö ľĘŔ˝!!!
	if( ulClientIndex != CEntity::GetPlayerEntity(0)->en_ulID )
	{
		if( !m_qDamage.empty() )
		{
			int DamageSize = m_qDamage.size();
			int nCount;
			DAMAGE_deque::iterator iter;

			for (nCount = 0, iter = m_qDamage.begin(); nCount < DamageSize; nCount++)
			{
				DAMAGE tmpDamage = (*iter);

				if (tmpDamage.ulIndex == ulClientIndex)
				{
					iter = m_qDamage.erase(iter);
				}
				else
				{
					++iter;
				}
			}
		}
	}
	
	m_qDamage.push_back( Damage );	
}


//------------------------------------------------------------------------------
// CUIManager::ShowDamage
// Explain:  Ĺ¸°Ý ŔĚĆĺĆ®°ˇ ĹÍÁú ¶§ ÇŘ´ç µĄąĚÁö Á¤ş¸¸¦ »Ń¸°´Ů.
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::ShowDamage( ULONG ulClientIndex )
{	
	CTString strSysMessage;	
	if( m_qDamage.empty() )
		return;
	
	DAMAGE_deque::iterator iterBegin = m_qDamage.begin();
	DAMAGE_deque::iterator iterEnd = m_qDamage.end();
	DAMAGE_deque::iterator iter; 
	
	for( iter = iterBegin; iter != iterEnd; iter++ )
	{
		if( (*iter).bVisible )	// Č­¸éżˇ ş¸ż©Áö°í ŔÖŔ¸¸é ĆĐ˝ş 
			continue;
		
		if( (*iter).ulIndex != ulClientIndex )	// łŞ¸¦ °ř°ÝÇŃ ¸ó˝şĹÍ°ˇ ľĆ´Ď¸é ĆĐ˝ş 
			continue;
		
		(*iter).bVisible = TRUE;
		(*iter).dStartTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds();
		return;
	}		
}


//------------------------------------------------------------------------------
// CUIManager::ClearDamageData
// Explain:  
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::ClearDamageData( )
{
	if( !m_qDamage.empty() )
		m_qDamage.clear();
}

//------------------------------------------------------------------------------
// CUIManager::ShowDamageList
// Explain:  ł»°ˇ °ř°ÝÇĎ´Â ¸ó˝şĹÍ Ŕ§żˇ µĄąĚÁö ÇĄ˝Ă 
// * ŔĚ¸§ ÇĄ˝Ă ÇĎ´Â °÷żˇĽ­ °°ŔĚ Ăł¸®Čů´Ů.
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::ShowDamageList( FLOAT3D vPopupPos, FLOAT fPopupZ, ULONG ulClientIndex )
{
	if( m_qDamage.empty() )
		return;

	DAMAGE_deque::iterator iterDamage;

	int qDamageSize = m_qDamage.size();
	int nCount;

	for (nCount=0, iterDamage = m_qDamage.begin(); nCount != qDamageSize; nCount++)
	{
		DAMAGE tmpDamage = (*iterDamage);

		if (ulClientIndex == tmpDamage.ulIndex)
		{
			if (tmpDamage.bVisible)
			{
				DOUBLE dDelayTime = _pTimer->GetHighPrecisionTimer().GetMilliseconds() - tmpDamage.dStartTime;

				if (dDelayTime > SHOW_DAMAGE_TIME)
				{
					iterDamage = m_qDamage.erase(iterDamage);
					continue;
				}
				else
				{
					RenderDamage(iterDamage, dDelayTime, vPopupPos(1), vPopupPos(2));
				}
			}

			++iterDamage;
		}
		else
		{
			++iterDamage;
		}
	}
}

//------------------------------------------------------------------------------
// CUIManager::RenderDamage
// Explain:  µĄąĚÁö ÇĄ˝Ă ·çĆľ ( ÁÖ·Î ˝Ă°Łżˇ µű¸Ą 2D °ú¸¦ Á¦¤Ăľî ÇŃ´Ů.
// Date : 2005-11-16,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::RenderDamage( DAMAGE_deque::iterator iter, DOUBLE dDealyTime, int nX, int nY )
{
	static float fMoveSpeed		= 1.0f;		// After ŔĚµż ˝şÇÇµĺ
	static float fReSize		= 0.2f;		// After ĂŕĽŇ şńŔ˛ 
	static float fMiddleTime	= 200.0f;	// After±îÁöŔÇ ˝Ă°Ł
	static float fShowHeight	= 70.0f;	// After±îÁöŔÇ łôŔĚ 
	static float fDefaultSize	= 1.5f;		// ±âş» Ĺ©±â 
	static float fOffsetY		= 10;		// ˝ĂŔŰ Y Ŕ§Äˇ 

	float fTimeRatio = dDealyTime / fMiddleTime;

	INT			nPosX, nPosY;
	COLOR		colBlend, colBlendText;
	COLOR		colDefault = 0xFFFFFF00;
		
	// ˝Ă°Łżˇ µű¸Ą Ŕ§Äˇ/ľËĆÄ/Ĺ©±â Á¶Á¤
	if( dDealyTime <= fMiddleTime )
	{
		(*iter).fY = fShowHeight * fTimeRatio;
		(*iter).fAlpha = 1.0f * fTimeRatio;
	}
	else
	{
		(*iter).fY += fMoveSpeed;
		(*iter).fAlpha = 1.0f - ( ( dDealyTime - fMiddleTime ) / ( SHOW_DAMAGE_TIME - fMiddleTime ) ) ;
	}

	(*iter).fSize = fDefaultSize - ( fReSize * ( dDealyTime / SHOW_DAMAGE_TIME ) ) ;

	// Ăâ·Â Ŕ§Äˇ ĽłÁ¤
	nPosX = nX - (*iter).fX;
	nPosY = nY - (*iter).fY + fOffsetY;

	// Alpha Ăł¸® 
	if( (*iter).fAlpha < 0.0f ) (*iter).fAlpha = 0.0f;
		
	UBYTE ubAlpha = ( UBYTE( (*iter).fAlpha * 0xFF ) );

	if( (*iter).bDamaged )	// ł»°ˇ °ř°ÝŔ» ąŢ´Â´Ů¸é şÓŔş »ö °čż­ 
	{
		colDefault = ATTACKED_COLOR;
	}
	
	colBlend = colDefault | ubAlpha;
	colBlendText = 0xFFFFFF00 | ubAlpha;

	
	// µĄąĚÁö Ĺ¸ŔÔżˇ µű¸Ą Ăß°ˇ ŔĚąĚÁö 
	switch( (*iter).sbTargetFlag )
	{
		case HITTYPE_MISS:
			DrawText( nPosX, nPosY, ST_MISS, colBlendText, (*iter).fSize );		
			return; // Miss´Â µĄąĚÁö ĽöÄˇ¸¦ ÇĄ˝ĂÇĎÁö ľĘ´Â´Ů.
		
		case HITTYPE_CRITICAL:// Ĺ©¸®ĆĽÄĂ	
			DrawText( nPosX - 20, nPosY - 20, ST_CRITICAL, colBlendText, (*iter).fSize );
			nPosX += 35;
			break;

		case HITTYPE_DEADLY: // µĄµé¸®
			DrawText( nPosX - 20, nPosY - 20, ST_DEADLY, colBlendText, (*iter).fSize );
			nPosX += 35;
			break;
	}
		
	DrawNumber( nPosX, nPosY, (*iter).ulDamage, colBlend, (*iter).fSize ); 
}


//------------------------------------------------------------------------------
// CUIManager::DrawTex
// Explain:  µĄąĚÁö Ĺ¸ŔÔżˇ µű¸Ą Ăß°ˇ ŔĚąĚÁö (Text)
// Date : 2005-11-17,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::DrawText( int nX, int nY, SBYTE sbTargetFlag, COLOR colColor, FLOAT fRatio )
{
	UIRectUV rtShowText	=	m_rtShowText[sbTargetFlag];
	UIRect	rcShowText	=	m_rcShowText[sbTargetFlag];

	float fWidth = rcShowText.GetWidth();
	float fHieght = rcShowText.GetHeight();

	fWidth *= fRatio;
	fHieght *= fRatio;
	
	nX -= ( fWidth / 2 );
	
	_pUIMgr->GetDrawPort()->AddTexture( nX, nY, nX + fWidth ,nY + fHieght,
							rtShowText.U0, rtShowText.V0, rtShowText.U1, rtShowText.V1,
							colColor );
}


//------------------------------------------------------------------------------
// CUISiegeWarfare::DrawNumber
// Explain:  µĄąĚÁö ĽöÄˇ ÇĄ˝Ă (ŔĚąĚÁö)
// Date : 2005-06-28,Author: Lee Ki-hwan
//------------------------------------------------------------------------------
void CUIManager::DrawNumber( int nX, int nY, int nNumber, COLOR colColor, FLOAT fRatio )
{
	static int nSpacing = -3;	// ĽýŔÚ°Ł °Ł°Ý

	UIRectUV rtNumber;
	
	BOOL bEnd = TRUE;
	CTString strNumber;
	strNumber.PrintF( "%d", nNumber );
	int nLength = strNumber.Length();
	int nUnitNumber;		
	
	float fWidth = m_rcNumber.GetWidth();
	float fHieght = m_rcNumber.GetHeight();
	
	fWidth	*= fRatio;
	fHieght *= fRatio;
	
	nX -= ( nLength * fWidth ) / 2;

	for( int i = 0; i < nLength; i++ )
	{
		char cNumber[2] = { strNumber[i] ,  0 };
		nUnitNumber = atoi( cNumber );

		rtNumber = m_rtNumber[nUnitNumber];
		
		_pUIMgr->GetDrawPort()->AddTexture( nX, nY, nX + fWidth ,nY + fHieght,
							rtNumber.U0, rtNumber.V0, rtNumber.U1, rtNumber.V1,
							colColor );
		
		nX += ( m_rcNumber.GetWidth() + nSpacing );
	}
}


// ----------------------------------------------------------------------------
// Name : GetClassOfItem()
// Desc :
// ----------------------------------------------------------------------------
void CUIManager::GetClassOfItem( CItemData & rItemData, CTString &strClass )
{
	CTString	strTemp = CTString( "" );
	
	for(int i = 0; i < TOTAL_JOB; ++i)
	{
		if(rItemData.CanUse(i))
		{
			strTemp += JobInfo().GetName(i);
			strTemp += CTString(" ");
		}
	}

	strClass = strTemp;
}


// ----------------------------------------------------------------------------
// Name : IsPetPlus()
// Desc :
// ----------------------------------------------------------------------------
BOOL CUIManager::IsPet(CItemData& rItemData)
{
	if(rItemData.GetType() == CItemData::ITEM_ACCESSORY && rItemData.GetSubType() == CItemData::ACCESSORY_PET ) return TRUE;
	
	return FALSE;
}
BOOL CUIManager::IsWildPet(CItemData& rItemData)
{
	if(rItemData.GetType() == CItemData::ITEM_ACCESSORY && rItemData.GetSubType() == CItemData::ACCESSORY_WILDPET ) return TRUE;
	
	return FALSE;
}

struct tm * CUIManager::LClocaltime ( time_t *timp )
{
		tm * ptb= new(tm);
        ULONG caltim =((ULONG)(*timp))*24;            /* calendar time to convert */
        int islpyr = 0;                 /* is-current-year-a-leap-year flag */
            
        if ( caltim < 0L )
                return(NULL);

        /*
         * Determine years since 1970. First, identify the four-year interval
         * since this makes handling leap-years easy (note that 2000 IS a
         * leap year and 2100 is out-of-range).
         */
        ptb->tm_year = (int)(caltim / _LC_YEAR_SEC);
        caltim -= ((ULONG)(ptb->tm_year) * _LC_YEAR_SEC);
//		caltim = caltim % _LC_YEAR_SEC;

	     /*
         * tmptim now holds the value for tm_year. caltim now holds the
         * number of elapsed seconds since the beginning of that year.
         */
        ptb->tm_mon = (int)(caltim / _LC_MONTH_SEC);
        caltim -= ((ULONG)(ptb->tm_mon) * _LC_MONTH_SEC);
//		caltim = caltim % _LC_MONTH_SEC;
							
        /*
         * Determine days since January 1 (0 - 365). This is the tm_yday value.
         * Leave caltim with number of elapsed seconds in that day.
         */
        ptb->tm_yday = (int)(caltim / _LC_DAY_SEC);
        caltim -= (ULONG)(ptb->tm_yday) * _LC_DAY_SEC;
//		caltim = caltim % _LC_DAY_SEC;

        /*
         * Determine months since January (0 - 11) and day of month (1 - 31)
         */
        ptb->tm_mday = ptb->tm_yday - _LC_DAY_IN_MONTH;

        /*
         * Determine days since Sunday (0 - 6)
         */
        ptb->tm_wday = ((int)(*timp / _LC_DAY_SEC) + _LC_BASE_DOW) % 7;

        /*
         *  Determine hours since midnight (0 - 23), minutes after the hour
         *  (0 - 59), and seconds after the minute (0 - 59).
         */
        ptb->tm_hour = (int)(caltim / 3600);
        caltim -= (ULONG)ptb->tm_hour * 3600L;
//		caltim = caltim % 3600;

        ptb->tm_min = (int)(caltim / 60);
        ptb->tm_sec = (int)(caltim - (ptb->tm_min) * 60);
//		caltim = caltim % 60;

        ptb->tm_isdst = 0;
        return( (struct tm *)ptb );

}

BOOL CUIManager::checkName(CTString strMsg, int chkType)
{
	CTString strTitle;
	CUIMsgBox_Info	MsgBoxInfo;


	if( chkType == 0) // Äł¸Ż ŔĚ¸§ şŻ°ć˝Ă
	{
		strTitle = _S(191,"Č®ŔÎ");

		if(strMsg.Length()<MIN_NAME_SIZE)
		{			
			strMsg	 = _S(433,"Äł¸ŻĹÍ ŔĚ¸§ŔĚ łĘą« ÂŞ˝Ŕ´Ď´Ů.\n(ÇŃ±Ű 2~8ŔÚ, żµą® 4~16ŔÚ)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			_pUIMgr->CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
		
		if(strMsg.Length()>MAX_MY_NAME_SIZE )
		{
			strMsg	 = _S(434,"Äł¸ŻĹÍ ŔĚ¸§ŔĚ łĘą« ±é´Ď´Ů.\n(ÇŃ±Ű 2~8ŔÚ, żµą® 4~16ŔÚ)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			_pUIMgr->CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
				
		if(_UIFilteringCharacter.Filtering((char *)((const char *)strMsg)))
		{
			strMsg	 = _S( 437, "ą®Ŕĺżˇ ±ÝÁöµČ ´Üľî°ˇ Ć÷ÇÔµÇľî ŔÖ˝Ŕ´Ď´Ů."); 
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			_pUIMgr->CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
	
		// °řąé ĂĽĹ©.		
		for(const char *chr = strMsg.str_String; *chr != 0; chr++)
		{
			if( (*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' || 
				(*chr) == '%' || (*chr) == '#' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+' || (*chr) == '=' ||
				(g_iCountry == HONGKONG && !_pUIMgr->GetCreateChar()->CheckCharacterHK(chr)))
			{
				_pUIMgr->CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME );
				CTString	strMsg = _S( 146, "Äł¸ŻĹÍ¸íżˇ °řąéŔĚłŞ ĆŻÁ¤ą®ŔÚ´Â µéľî°Ą Ľö ľř˝Ŕ´Ď´Ů." );
				MsgBoxInfo.AddString( strMsg );
				_pUIMgr->CreateMessageBox( MsgBoxInfo );
				
				return FALSE;
			}

			// ¸»·ąŔĚ˝ĂľĆ °ł¸íÄ«µĺ »çżë˝Ă żµą®ĽýŔÚ¸¸ °ˇ´ÉÇĎ°Ô
			if( !((*chr) >= 48 && (*chr) <=57)  //! 0 ~ 9
				&& !((*chr) >= 65 && (*chr) <=90) // ! A ~ Z 
				&& !((*chr) >= 97 && (*chr) <=122) // ! a ~ z 
				&& ( g_iCountry == MALAYSIA || g_iCountry == USA || g_iCountry == BRAZIL || g_iCountry == GERMANY 
					|| g_iCountry == SPAIN || g_iCountry == FRANCE || g_iCountry == POLAND) )//FRANCE_SPAIN_CLOSEBETA_NA_20081124
			{
				_pUIMgr->CloseMessageBox(MSGCMD_CREATE_ERROR);
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
				CTString	strMessage = _S(2980, "ľĆŔĚµđ´Â żµą®°ú ĽýŔÚ¸¸ ÇăżëµË´Ď´Ů." );
				MsgBoxInfo.AddString( strMessage );
				_pUIMgr->CreateMessageBox( MsgBoxInfo );
				return FALSE;

			}
		}
		
	} // Äł¸ŻŔĚ¸§ şŻ°ć˝Ă
	else if( chkType == 1) // ±ćµĺŔĚ¸§ şŻ°ć˝Ă
	{
		strTitle = _S(191,"Č®ŔÎ");
		if(strMsg.Length()<MIN_NAME_SIZE)
		{
			strMsg	 = _S(882,"±ćµĺ ŔĚ¸§ŔĚ łĘą« ÂŞ˝Ŕ´Ď´Ů.\n(ÇŃ±Ű 2ŔÚŔĚ»ó, żµą® 4ŔÚŔĚ»ó)");
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			_pUIMgr->CreateMessageBox(MsgBoxInfo);
			return FALSE;

		}

		if(strMsg.Length()>MAX_GUILD_NAME_SIZE) 
		{
			strMsg	 =_S( 2143,  "±ćµĺ ŔĚ¸§ŔĚ łĘą« ±é´Ď´Ů \n(ÇŃ±Ű 2~8ŔÚ żµą® 4~16ŔÚ ŔÔ´Ď´Ů)" );		
			MsgBoxInfo.SetMsgBoxInfo(strTitle,UMBS_OK,UI_NONE,MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			_pUIMgr->CreateMessageBox(MsgBoxInfo);
			return FALSE; 
		}
		if(_UIFilteringCharacter.Filtering((char *)(const char *)strMsg))
		{
			strMsg	 = _S( 437, "ą®Ŕĺżˇ ±ÝÁöµČ ´Üľî°ˇ Ć÷ÇÔµÇľî ŔÖ˝Ŕ´Ď´Ů."); 
			MsgBoxInfo.SetMsgBoxInfo(strTitle, UMBS_OK,UI_NONE, MSGCMD_BAN_NAME);
			MsgBoxInfo.AddString(strMsg);
			_pUIMgr->CreateMessageBox(MsgBoxInfo);
			return FALSE;
		}
	
		// °řąé ĂĽĹ©.		
		for(const char *chr = strMsg.str_String; *chr != 0; chr++)
		{
			if( (*chr) == ' ' || (*chr) == '\t' || (*chr) == '\n' || (*chr) == '\r' || 
				(*chr) == '%' || (*chr) == '#' || (*chr) == '&' || (*chr) == '?' || (*chr) == '+' || (*chr) == '=' ||
				(g_iCountry == HONGKONG && !_pUIMgr->GetCreateChar()->CheckCharacterHK(chr)))
			{
				_pUIMgr->CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_NONE, MSGCMD_BAN_NAME );
				CTString	strMsg = _S( 883, "±ćµĺ ŔĚ¸§żˇ Ŕß¸řµČ ą®ŔÚ°ˇ Ć÷ÇÔµÇľî ŔÖ˝Ŕ´Ď´Ů." );
				MsgBoxInfo.AddString( strMsg );
				_pUIMgr->CreateMessageBox( MsgBoxInfo );
				
				return FALSE;
			}

			// ¸»·ąŔĚ˝ĂľĆ °ł¸íÄ«µĺ »çżë˝Ă żµą®ĽýŔÚ¸¸ °ˇ´ÉÇĎ°Ô
			if( !((*chr) >= 48 && (*chr) <=57)  //! 0 ~ 9
				&& !((*chr) >= 65 && (*chr) <=90) // ! A ~ Z 
				&& !((*chr) >= 97 && (*chr) <=122) // ! a ~ z 
				&& ( g_iCountry == MALAYSIA || g_iCountry == USA || g_iCountry == BRAZIL || g_iCountry == GERMANY 
					|| g_iCountry == SPAIN || g_iCountry == FRANCE || g_iCountry == POLAND) )//FRANCE_SPAIN_CLOSEBETA_NA_20081124
			{
				_pUIMgr->CloseMessageBox(MSGCMD_CREATE_ERROR);
				CUIMsgBox_Info	MsgBoxInfo;
				MsgBoxInfo.SetMsgBoxInfo( strTitle, UMBS_OK,
					UI_CREATE_CHAR, MSGCMD_CREATE_ERROR );
				CTString	strMessage = _S(3113, "±ćµĺ ŔĚ¸§Ŕş żµą®°ú ĽýŔÚ¸¸ ÇăżëÇŐ´Ď´Ů." );
				MsgBoxInfo.AddString( strMessage );
				_pUIMgr->CreateMessageBox( MsgBoxInfo );
				return FALSE;

			}
		}

	}

	return TRUE;

}

// WSS_MINIGAME_070422 ---------------------------------------------------------------------------->>
// For multilined string
void CUIManager::AddStringToList(CUIListBox* pListBox,CTString& tStr, INDEX iMaxChar, COLOR tColor,INDEX ilistCol)
{	
	// Get length of string
	INDEX	nLength = tStr.Length();
	if( nLength <= 0 )
		return;

	// wooss 051002
	if(g_iCountry == THAILAND){
		// Get length of string
		INDEX	nThaiLen = FindThaiLen(tStr);
		INDEX	nChatMax= (iMaxChar-1)*(_pUIFontTexMgr->GetFontWidth()+_pUIFontTexMgr->GetFontSpacing());
		
		// If length of string is less than max char
		if( nThaiLen <= nChatMax )
		{
			pListBox->AddString(ilistCol,tStr,tColor);
		}
		// Need multi-line
		else
		{
			// Check splitting position for 2 byte characters
			int		nSplitPos;
			BOOL	b2ByteChar = FALSE;
			int iPos;
			for(  iPos = 0; iPos < nLength; iPos++ )
			{
				if(nChatMax < FindThaiLen(tStr,0,iPos))
					break;
			}
			nSplitPos = iPos;

			// Split string
			CTString	strLeft,strRight;
			
			tStr.Split( nSplitPos, strLeft, strRight );
			pListBox->AddString(ilistCol,strLeft,tColor);
			AddStringToList(pListBox,strRight, iMaxChar, tColor, ilistCol);
		}
		
	} else{
		// If length of string is less than max char
		if( nLength <= iMaxChar )
		{
			pListBox->AddString(ilistCol,tStr,tColor);
		}
		// Need multi-line
		else
		{
		
			// Check splitting position for 2 byte characters
			int		nSplitPos = iMaxChar;
			BOOL	b2ByteChar = FALSE;
			for( int iPos = 0; iPos < nSplitPos; iPos++ )
			{
				if( tStr[iPos] & 0x80 )
					b2ByteChar = !b2ByteChar;
				else
					b2ByteChar = FALSE;
			}

			if( b2ByteChar )
				nSplitPos--;

			// Split string
			CTString	strLeft,strRight;
			
			tStr.Split( nSplitPos, strLeft, strRight );
			pListBox->AddString(ilistCol,strLeft,tColor);
			AddStringToList(pListBox,strRight, iMaxChar, tColor, ilistCol);
		}
	}
}
// ------------------------------------------------------------------------------------------------<<

BOOL CUIManager::IsRareItem( CTString strName )
{
	for(int i=1828; i<=_pNetwork->wo_aItemName.Count(); ++i)
	{
		CTString strItemName =_pNetwork->GetItemName(i);
		if( strName ==strItemName)
		{
			if( _pNetwork->GetItemData(i).IsFlag(ITEM_FLAG_RARE) )
				return TRUE;
			else 
				return FALSE;
		}
	}

	return FALSE;
}

void CUIManager::SetRareOption( CNetworkMessage *istr, CItems& rItem )
{
	SBYTE	sbOptionType, sbOptionLevel;

	//·ąľî żÉĽÇ ŔÎµ¦˝ş
	(*istr) >> sbOptionType;
	(*istr) >> sbOptionLevel;
	UWORD iRareIndex = (static_cast<WORD>(sbOptionType) <<8) +sbOptionLevel;

	rItem.SetRareIndex(iRareIndex);

	//·ąľî żÉĽÇ Áľ·ů
	(*istr) >> sbOptionType;
	(*istr) >> sbOptionLevel;
	
	WORD iRareOption = (static_cast<WORD>(sbOptionType) <<8) +sbOptionLevel;
	WORD wCBit =1;
	SBYTE sbOption =-1;
	for(int iBit=0; iBit<10; ++iBit)
	{
		if( iRareOption & wCBit)
		{
			int OptionType =_pNetwork->wo_vecItemRareOption[iRareIndex].m_Option[iBit].index;
			int OptionLevel =_pNetwork->wo_vecItemRareOption[iRareIndex].m_Option[iBit].level;
			rItem.SetOptionData( ++sbOption, OptionType, OptionLevel );
		}
		wCBit <<=1;
	}
}

BOOL CUIManager::IsEnemy( void* pTarget, TARGET_TYPE eType, BOOL bSearch )
{
	INDEX iCha_Index =-1;
	INDEX iGuild_Index =-1;
	BOOL bLegit =FALSE;

	if (pTarget == NULL)
	{ return FALSE; }

	switch(eType)
	{
		case CHARACTER:
			{
				if( bSearch )
				{
					CCharacterTarget ptCharacterTarget;

					if (static_cast<CEntity*>(pTarget)->en_pCharacterTarget == NULL)
						return FALSE;

					ptCharacterTarget = *(static_cast<CEntity*>(pTarget)->en_pCharacterTarget);
					iCha_Index = ptCharacterTarget.cha_Index;
					iGuild_Index = ptCharacterTarget.cha_lGuildIndex;
					bLegit = ptCharacterTarget.cha_bLegit;
				}
				else
				{
					iCha_Index = ((CCharacterTarget*)pTarget)->cha_Index;
					iGuild_Index =((CCharacterTarget*)pTarget)->cha_lGuildIndex;
					bLegit =((CCharacterTarget*)pTarget)->cha_bLegit;
				}
			}
			break;
		case MOB:
			return TRUE;
		case NPC:
			return FALSE;
		case PET:
			{
				CPetTarget ptPetTarget;

				if( bSearch)
				{
					if (static_cast<CEntity*>(pTarget)->en_pPetTarget == NULL)
						return FALSE;

					ptPetTarget = *(static_cast<CEntity*>(pTarget)->en_pPetTarget);
				}
				else
				{
					ptPetTarget = *((CPetTarget*)pTarget);
				}

				INDEX ctCha = _pNetwork->ga_srvServer.srv_actCha.Count();
				for( INDEX iObj = 0; iObj < ctCha; iObj++ ) 
				{
					CCharacterTarget &ct = _pNetwork->ga_srvServer.srv_actCha[iObj];
					if( ptPetTarget.pet_OwnerIndex == ct.cha_Index )
					{
						iCha_Index =ct.cha_Index;
						iGuild_Index =ct.cha_lGuildIndex;
						break;
					}
				}
			}
			break;
		case SUMMON:
			{
				CSlaveTarget stSlaveTarget;

				if( bSearch )
				{
					if (static_cast<CEntity*>(pTarget)->en_pSlaveTarget == NULL)
						return FALSE;

					stSlaveTarget = *(static_cast<CEntity*>(pTarget)->en_pSlaveTarget);
				}
				else
				{
					stSlaveTarget = *((CSlaveTarget*)pTarget);
				}

				INDEX ctCha = _pNetwork->ga_srvServer.srv_actCha.Count();
				for( INDEX iObj = 0; iObj < ctCha; iObj++ ) 
				{
					CCharacterTarget &ct = _pNetwork->ga_srvServer.srv_actCha[iObj];
					if( stSlaveTarget.slave_OwnerIndex== ct.cha_Index )
					{
						iCha_Index =ct.cha_Index;
						iGuild_Index =ct.cha_lGuildIndex;
						break;
					}
				}
			}
			break;
		case WILDPET:
			{
				CWildPetInfo ptPetTarget;

				if( bSearch)
				{
					if (static_cast<CEntity*>(pTarget)->en_pWildPetInfo == NULL)
						return FALSE;

					ptPetTarget = *(static_cast<CEntity*>(pTarget)->en_pWildPetInfo);
				}
				else
				{
					ptPetTarget = *((CWildPetInfo*)pTarget);
				}

				INDEX ctCha = _pNetwork->ga_srvServer.srv_actCha.Count();
				for( INDEX iObj = 0; iObj < ctCha; iObj++ ) 
				{
					CCharacterTarget &ct = _pNetwork->ga_srvServer.srv_actCha[iObj];
					if( ptPetTarget.m_nOwnerIndex == ct.cha_Index )
					{
						iCha_Index =ct.cha_Index;
						iGuild_Index =ct.cha_lGuildIndex;
						break;
					}
				}
			}
			break;
		default:
			return FALSE;
	}

	//±ćµĺ ŔüĹő˝Ă »ó´ë ±ćµĺżřŔĚ¸é Ŕű!!!
	if( this->GetGuildBattle()->IsEnemy( iCha_Index) )
		return TRUE;

	//Á¤´çąćŔ§ »ó´ëŔĚ¸é Ŕű
	if( bLegit )
		return TRUE;

	//PK ˝Ă...
	if( _pNetwork->MyCharacterInfo.pk_mode != CHA_PVP_STATE_PEACE || 
		_pUIMgr->GetSiegeWarfareNew()->GetWarState() ) // WSS_DRATAN_SEIGEWARFARE 2007/08/30
	{
		//ĆÄĆĽżřµµ ľĆ´Ď°í °°Ŕş ±ćµĺżřµµ ľĆ´Ď¸é Ŕű!!!
		if( (!GetParty()->IsPartyMember(iCha_Index)) && 
					(iGuild_Index != _pNetwork->MyCharacterInfo.lGuildIndex || _pNetwork->MyCharacterInfo.lGuildIndex<0) )
			return TRUE;
		else
			return FALSE;
	}
	else 
		return FALSE;
}

void CUIManager::StartTargetEffect( SLONG slIndex, CEntity* penEntity, BOOL bEnemy )
{
	//ŔĚĆĺĆ®°ˇ ŔűżëµČ »óĹÂŔĎ ¶§...
	if( m_mapEG.find( slIndex ) != m_mapEG.end() )
	{
		//CEffectGroupŔĚ ŔŻČżÇŃ °ŞŔĚ ľĆ´Ď¸é...
		if( !CEffectGroupManager::Instance().IsValidCreated(m_mapEG[slIndex]) )
		{
			//mapżˇĽ­ »čÁ¦
			m_mapEG.erase( slIndex );
		}
		else
		{
			//żĂąŮ¸Ą »ö±ňŔÇ ŔĚĆĺĆ®°ˇ ŔűżëµÇľîŔÖŔ¸¸é ¸®ĹĎ
			if( m_mapEG[slIndex]->GetName() == std::string(bEnemy?"STATE_LED":"STATE_YELLOW") )
				return;

			//´Ů¸Ą »ö±ňŔÇ ŔĚĆĺĆ®°ˇ ŔűżëµÇľî ŔÖŔ¸¸é ŔĚĆĺĆ® »čÁ¦
			StopTargetEffect( slIndex );
		}
	}

	//ŔĚĆĺĆ® »ýĽş
	CEffectGroup *pEG = StartEffectGroup( bEnemy?"STATE_LED":"STATE_YELLOW"
						, &penEntity->en_pmiModelInstance->m_tmSkaTagManager
						,_pTimer->GetLerpedCurrentTick());

	if( pEG == NULL)
		return;

	//¸đµ¨ŔÇ ĂćµąąÚ˝ş Ĺ©±âżˇ ¸ÂĂç ŔĚĆĺĆ® Ĺ©±â Á¶Á¤
	((CMdlEffect*)(pEG->GetEffectKeyVector()[0].m_pCreatedEffect))->SetStretch(penEntity->en_pmiModelInstance->GetCollisionBoxMax()*3);
	
	std::map<SLONG, CEffectGroup *>::value_type tmpVal( slIndex, pEG);
	m_mapEG.insert(tmpVal);
}

void CUIManager::StopTargetEffect( SLONG slIndex )
{
	if( m_mapEG.find( slIndex ) == m_mapEG.end() ) return;

	DestroyEffectGroup( m_mapEG[slIndex] );

	m_mapEG.erase( slIndex );
}

// ----------------------------------------------------------------------------
// Name : IsPlayInZone()
// Desc : ŔÎ˝şĹĎĆ®Á¸ ÇĂ·ąŔĚÁßŔÎÁö ĂĽĹ©
// ----------------------------------------------------------------------------
BOOL CUIManager::IsPlayInZone()
{
	SLONG slInZoneNum[3] = {33, 34, 35}; // 33(żąąč´ç1), 34(żąąč´ç2), 35(ľĎČćŔÇ Á¦´Ü)

	for(int i=0; i<3; i++)
	{
		if(_pNetwork->MyCharacterInfo.zoneNo == slInZoneNum[i])
			return TRUE;
	}

	return FALSE;
}

// WSS_SELECTIVE_UI_FUCNTION 2007/08/15 
// SELECTIVE UI ------------------------------------------------------------------------->>
void CUIManager::CloseSelectiveUI( int nUIidx )
{
	if ( nUIidx == -1 ) // Close Selective All
	{
		// Find message box and return result
		for( int iUI = UI_SELECTIVE_SHOW_START; iUI < UI_SELECTIVE_SHOW_END; iUI++ )
		{
			if( m_apUIs[iUI]->IsEnabled())
				RearrangeOrder(iUI,FALSE);
		}	
	}
	else 
	{
		if( m_apUIs[nUIidx]->IsEnabled())
				RearrangeOrder(nUIidx,FALSE);
	}
	

}

BOOL CUIManager::DoesUIExist( int nUIidx )
{
	// Find message box and return result
	if( m_apUIs[nUIidx]->IsEnabled() )
		return TRUE;
	return FALSE;
}

BOOL CUIManager::IsUIVisible(int nUIidx)
{
	if (m_apUIs[nUIidx]->IsVisible())
		return TRUE;
	return FALSE;
}
// --------------------------------------------------------------------------------------<<